
uLipeRTOS.elf:     file format elf32-littlearm
uLipeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00000fb8 memsz 0x00000fb8 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08000fb8 align 2**15
         filesz 0x00000040 memsz 0x00000c28 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000284  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  08000284  08000284  00008284  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00000d30  08000288  08000288  00008288  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000040  20000000  08000fb8  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000ae8  20000040  08000ff8  00010040  2**2  ALLOC
  5 ._check_stack 00000100  20000b28  08001ae0  00010040  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  00010040  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  000100b0  2**0  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  000100e8  2**3  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001dc6  00000000  00000000  00010360  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008ff  00000000  00000000  00012126  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002129  00000000  00000000  00012a25  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000610  00000000  00000000  00014b50  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000601a4  00000000  00000000  00015160  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a6a  00000000  00000000  00075304  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d8  00000000  00000000  00075d6e  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f5f2  00000000  00000000  00075f46  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000284 l    d  ._inits	00000000 ._inits
08000288 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000040 l    d  .bss	00000000 .bss
20000b28 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tasks.c
20000060 l     O .bss	00000004 counter1.4218
20000064 l     O .bss	00000004 counter2.4219
20000068 l     O .bss	00000004 counter3.4220
20000054 l     O .bss	00000004 counter1.4225
20000058 l     O .bss	00000004 counter2.4226
2000005c l     O .bss	00000004 counter3.4227
20000050 l     O .bss	00000004 counter.4232
2000004c l     O .bss	00000004 counter.4236
20000048 l     O .bss	00000004 counter.4240
20000044 l     O .bss	00000004 counter.4244
20000040 l     O .bss	00000004 counter.4248
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
08000690 l     F .text	00000186 SetSysClock
080008a6 l       .text	00000000 FIRST_CHANGE
080008c6 l       .text	00000000 SECOND_CHANGE
080008a0 l       .text	00000000 NO_SAVE
00000000 l    df *ABS*	00000000 uLipe_Core.c
00000000 l    df *ABS*	00000000 uLipe_Task.c
08000288 l       ._inits	00000000 __fini_array_end
08000288 l       ._inits	00000000 __fini_array_start
08000288 l       ._inits	00000000 __init_array_end
08000288 l       ._inits	00000000 __preinit_array_end
08000288 l       ._inits	00000000 __init_array_start
08000284 l       ._inits	00000000 __preinit_array_start
0800022c  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
0800022c  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI2_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08000434 g     F .text	0000002a TaskTry3
0800026c  w    F .isr_vector	00000006 DebugMon_Handler
08000284 g     O ._inits	00000004 p_system_init
20000000 g     O .data	00000007 Try
20000000 g       .data	00000000 __data_start__
2001fc00 g       *ABS*	00000000 _Heap_Limit
2000017c g     O .bss	00000100 TaskTryStack8
0800022c  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
0800023c  w    F .isr_vector	00000010 HardFault_Handler
0800022c  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
080004b8 g     F .text	0000002a TaskTry6
2000006c g     O .bss	00000004 CurrentTaskBlock
08000cf8 g     F .text	000000b6 SysTick_Handler
0800022c  w    F .isr_vector	00000006 PVD_IRQHandler
0800022c  w    F .isr_vector	00000006 SDIO_IRQHandler
0800022c  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
00000400 g       *ABS*	00000000 _Main_Stack_Size
08000fb8 g       *ABS*	00000000 _sidata
0800086a g     F .text	00000006 PendSV_Handler
08000234  w    F .isr_vector	00000006 NMI_Handler
08000fb8 g       *ABS*	00000000 __exidx_end
080001d4 g     F .isr_vector	00000056 system_init
0800022c  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI3_IRQHandler
08000db0 g     F .text	000001e8 Task_Create
0800083e g     F .text	00000000 Asm_CriticalIn
20000b28 g       ._check_stack	00000000 _Heap_Begin
0800022c  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
08000fb8 g       *ABS*	00000000 _etext
20000040 g       .bss	00000000 _sbss
2000087c g     O .bss	0000000c TaskMainCtl
2001fc00 g       *ABS*	00000000 __Main_Stack_Limit
0800022c  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
2000027c g     O .bss	00000100 TaskTryStack6
20000018 g     O .data	00000008 Try4
0800022c  w    F .isr_vector	00000006 EXTI0_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000b28 g       ._check_stack	00000000 _noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
0800022c  w    F .isr_vector	00000006 FPU_IRQHandler
20000078 g     O .bss	00000001 ID
0800022c  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
0800025c  w    F .isr_vector	00000006 UsageFault_Handler
0800022c  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
20000040 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
0800022c  w    F .isr_vector	00000006 SPI1_IRQHandler
20000074 g     O .bss	00000004 TickCounter
200008e8 g     O .bss	00000100 IdleTaskStack
2000037c g     O .bss	00000100 TaskTryStack7
0800022c  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
0800022c  w    F .isr_vector	00000006 DCMI_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20000010 g     O .data	00000008 Try3
08000f98 g     F .text	00000014 Task_GetList
08000846 g     F .text	00000000 Asm_CriticalOut
08000fb8 g       *ABS*	00000000 __exidx_start
08000460 g     F .text	0000002a TaskTry4
0800022c  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
08000510 g     F .text	0000008e __libc_init_array
00000400 g       *ABS*	00000000 __Main_Stack_Size
0800084e g     F .text	00000000 Asm_IntLevelContextChange
08000a44 g     F .text	00000062 uLipe_TaskQueryByIndex
0800022c  w    F .isr_vector	00000006 USART6_IRQHandler
20000038 g     O .data	00000008 IdleName
0800022c  w    F .isr_vector	00000006 USART3_IRQHandler
2000047c g     O .bss	00000100 TaskTryStack2
0800022c  w    F .isr_vector	00000006 CRYP_IRQHandler
080005a0 g     F .text	0000004e __libc_fini_array
20000b28 g       .bss	00000000 _ebss
08000188  w    F .isr_vector	0000004c Reset_Handler
0800022c  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
08000400 g     F .text	00000034 TaskTry2
0800022c  w    F .isr_vector	00000006 UART5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM4_IRQHandler
2000057c g     O .bss	00000100 TaskTryStack4
0800022c  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
20000040 g       .data	00000000 __data_end__
08000aa8 g     F .text	00000138 uLipe_TaskDropByIndex
0800022c  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 UART4_IRQHandler
20000b28 g       .bss	00000000 __bss_end__
0800022c  w    F .isr_vector	00000006 TIM3_IRQHandler
0800022c  w    F .isr_vector	00000006 RCC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
0800022c  w    F .isr_vector	00000006 Default_Handler
0800022c  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
0800022c  w    F .isr_vector	00000006 ADC_IRQHandler
200009e8 g     O .bss	00000140 TaskBlockList
20000020 g     O .data	00000008 Try5
20000b28 g       ._check_stack	00000000 _end_noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM7_IRQHandler
080009a4 g     F .text	0000009e uLipe_TaskDequeue
0800022c  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
20000028 g     O .data	00000008 Try6
08000be0 g     F .text	00000116 uLipe_Schedule
0800022c  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
0800022c  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
08000904 g     F .text	0000009e uLipe_TaskEnqueue
0800022c  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 SPI2_IRQHandler
20000888 g     O .bss	00000060 TaskMainQueue
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
0800024c  w    F .isr_vector	00000006 MemManage_Handler
08000288 g     F .text	00000144 main
0800022c  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
08000818 g     F .text	00000000 Asm_LowLevelTickInit
08000264  w    F .isr_vector	00000006 SVC_Handler
2000067c g     O .bss	00000100 TaskTryStack3
0800022c  w    F .isr_vector	00000006 EXTI4_IRQHandler
080004e4 g     F .text	0000002a TaskTry7
080005fc g     F .text	00000092 SystemInit
08000fac g     F .text	0000000a Task_Idle
0800022c  w    F .isr_vector	00000006 FSMC_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_IRQHandler
20000070 g     O .bss	00000004 HighReadyTaskBlock
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
0800022c  w    F .isr_vector	00000006 WWDG_IRQHandler
2000007c g     O .bss	00000100 TaskTryStack
080003cc g     F .text	00000034 TaskTry
0800022c  w    F .isr_vector	00000006 TIM2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
20020000 g       *ABS*	00000000 __stack
0800022c  w    F .isr_vector	00000006 EXTI1_IRQHandler
20000040 g       .data	00000000 _edata
0800085c g     F .text	00000000 Asm_TaskLevelContextChange
0800022c  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	00000188 g_pfnVectors
0800022c  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
2000077c g     O .bss	00000100 TaskTryStack5
0800022c  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 FLASH_IRQHandler
080005f0  w    F .text	0000000a _exit
0800022c  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000254  w    F .isr_vector	00000006 BusFault_Handler
0800022c  w    F .isr_vector	00000006 USART1_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_IRQHandler
20000030 g     O .data	00000008 Try7
0800022c  w    F .isr_vector	00000006 SPI3_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
00000000         *UND*	00000000 TaskQuery
0800022c  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
0800048c g     F .text	0000002a TaskTry5
20000008 g     O .data	00000008 Try2
0800022c  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 89 01 00 08 35 02 00 08 3d 02 00 08     ... ....5...=...
 8000010:	4d 02 00 08 55 02 00 08 5d 02 00 08 00 00 00 00     M...U...].......
	...
 800002c:	65 02 00 08 6d 02 00 08 00 00 00 00 6b 08 00 08     e...m.......k...
 800003c:	f9 0c 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     ....-...-...-...
 800004c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800005c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800006c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800007c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800008c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800009c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ac:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000bc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000cc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000dc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ec:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000fc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800010c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800011c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800012c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800013c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800014c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800015c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800016c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800017c:	2d 02 00 08 2d 02 00 08 2d 02 00 08                 -...-...-...

08000188 <Reset_Handler>:
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	f240 0340 	movw	r3, #64	; 0x40
 8000192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	f640 3328 	movw	r3, #2856	; 0xb28
 800019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001a0:	607b      	str	r3, [r7, #4]
bss_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	e007      	b.n	80001b8 <Reset_Handler+0x30>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	f04f 0200 	mov.w	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f103 0304 	add.w	r3, r3, #4
 80001b6:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d8f3      	bhi.n	80001a8 <Reset_Handler+0x20>
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001c0:	f000 f9a6 	bl	8000510 <__libc_init_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001c4:	f000 f860 	bl	8000288 <__fini_array_end>
 80001c8:	60f8      	str	r0, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001ca:	f000 f9e9 	bl	80005a0 <__libc_fini_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f000 fa0e 	bl	80005f0 <_exit>

080001d4 <system_init>:
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	f640 73b8 	movw	r3, #4024	; 0xfb8
 80001de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	f240 0300 	movw	r3, #0
 80001e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	f240 0340 	movw	r3, #64	; 0x40
 80001f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001f6:	607b      	str	r3, [r7, #4]
data_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	e00b      	b.n	8000216 <system_init+0x42>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	f103 0304 	add.w	r3, r3, #4
 800020c:	603b      	str	r3, [r7, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f103 0304 	add.w	r3, r3, #4
 8000214:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d8ef      	bhi.n	80001fe <system_init+0x2a>
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 800021e:	f000 f9ed 	bl	80005fc <SystemInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000222:	f107 0710 	add.w	r7, r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop

0800022c <ADC_IRQHandler>:
Default_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:433
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:436
  while (1)
    {
    }
 8000230:	e7fe      	b.n	8000230 <ADC_IRQHandler+0x4>
DMA1_Stream3_IRQHandler():
 8000232:	bf00      	nop

08000234 <NMI_Handler>:
NMI_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:445
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:448
  while (1)
    {
    }
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>
 800023a:	bf00      	nop

0800023c <HardFault_Handler>:
HardFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:453
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b0c3      	sub	sp, #268	; 0x10c
 8000240:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:458
  //debuggers:

 unsigned long  FaultStack[64];
 unsigned long *StackPointer;
 unsigned long  i= 0;
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:463

 while (1)
    {

    }
 800024a:	e7fe      	b.n	800024a <HardFault_Handler+0xe>

0800024c <MemManage_Handler>:
MemManage_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:471
  while (1)
    {
    }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
BusFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:479
  while (1)
    {
    }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
UsageFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:487
  while (1)
    {
    }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
SVC_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:495
  while (1)
    {
    }
 8000268:	e7fe      	b.n	8000268 <SVC_Handler+0x4>
 800026a:	bf00      	nop

0800026c <DebugMon_Handler>:
DebugMon_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:503
  while (1)
    {
    }
 8000270:	e7fe      	b.n	8000270 <DebugMon_Handler+0x4>
 8000272:	bf00      	nop
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:511
  while (1)
    {
    }
 8000278:	e7fe      	b.n	8000278 <DebugMon_Handler+0xc>
DebugMon_Handler():
 800027a:	bf00      	nop
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:516
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:519
  while (1)
    {
    }
 8000280:	e7fe      	b.n	8000280 <DebugMon_Handler+0x14>
DebugMon_Handler():
 8000282:	bf00      	nop

Disassembly of section .text:

08000288 <main>:
main():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:63
volatile os_taskID_t ID;


int
main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af02      	add	r7, sp, #8
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:68




	Task_Create(&TaskTry, &TaskTryStack, 0 , &Try, sizeof(Try),sizeof(TaskTryStack));
 800028e:	f04f 0307 	mov.w	r3, #7
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	f240 30cd 	movw	r0, #973	; 0x3cd
 800029e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002a2:	f240 017c 	movw	r1, #124	; 0x7c
 80002a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002aa:	f04f 0200 	mov.w	r2, #0
 80002ae:	f240 0300 	movw	r3, #0
 80002b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b6:	f000 fd7b 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:69
	Task_Create(&TaskTry2, &TaskTryStack2, 1 , &Try2, sizeof(Try2),sizeof(TaskTryStack));
 80002ba:	f04f 0308 	mov.w	r3, #8
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	f240 4001 	movw	r0, #1025	; 0x401
 80002ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002ce:	f240 417c 	movw	r1, #1148	; 0x47c
 80002d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002d6:	f04f 0201 	mov.w	r2, #1
 80002da:	f240 0308 	movw	r3, #8
 80002de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e2:	f000 fd65 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:70
	Task_Create(&TaskTry3, &TaskTryStack3, 3 , &Try3, sizeof(Try2),sizeof(TaskTryStack));
 80002e6:	f04f 0308 	mov.w	r3, #8
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	f240 4035 	movw	r0, #1077	; 0x435
 80002f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002fa:	f240 617c 	movw	r1, #1660	; 0x67c
 80002fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000302:	f04f 0203 	mov.w	r2, #3
 8000306:	f240 0310 	movw	r3, #16
 800030a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800030e:	f000 fd4f 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:71
	Task_Create(&TaskTry4, &TaskTryStack4, 9 , &Try4, sizeof(Try2),sizeof(TaskTryStack));
 8000312:	f04f 0308 	mov.w	r3, #8
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	f240 4061 	movw	r0, #1121	; 0x461
 8000322:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000326:	f240 517c 	movw	r1, #1404	; 0x57c
 800032a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800032e:	f04f 0209 	mov.w	r2, #9
 8000332:	f240 0318 	movw	r3, #24
 8000336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800033a:	f000 fd39 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:72
	Task_Create(&TaskTry5, &TaskTryStack5, 7 , &Try5, sizeof(Try2),sizeof(TaskTryStack));
 800033e:	f04f 0308 	mov.w	r3, #8
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	f240 408d 	movw	r0, #1165	; 0x48d
 800034e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000352:	f240 717c 	movw	r1, #1916	; 0x77c
 8000356:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800035a:	f04f 0207 	mov.w	r2, #7
 800035e:	f240 0320 	movw	r3, #32
 8000362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000366:	f000 fd23 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:73
	Task_Create(&TaskTry6, &TaskTryStack6, 2 , &Try6, sizeof(Try2),sizeof(TaskTryStack));
 800036a:	f04f 0308 	mov.w	r3, #8
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	f240 40b9 	movw	r0, #1209	; 0x4b9
 800037a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800037e:	f240 217c 	movw	r1, #636	; 0x27c
 8000382:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000386:	f04f 0202 	mov.w	r2, #2
 800038a:	f240 0328 	movw	r3, #40	; 0x28
 800038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000392:	f000 fd0d 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:74
	Task_Create(&TaskTry7, &TaskTryStack7, 12 , &Try7, sizeof(Try2),sizeof(TaskTryStack));
 8000396:	f04f 0308 	mov.w	r3, #8
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	f240 40e5 	movw	r0, #1253	; 0x4e5
 80003a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003aa:	f240 317c 	movw	r1, #892	; 0x37c
 80003ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003b2:	f04f 020c 	mov.w	r2, #12
 80003b6:	f240 0330 	movw	r3, #48	; 0x30
 80003ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003be:	f000 fcf7 	bl	8000db0 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:80





	Asm_LowLevelTickInit(16800); //vamos testar!
 80003c2:	f244 10a0 	movw	r0, #16800	; 0x41a0
 80003c6:	f000 fa27 	bl	8000818 <Asm_LowLevelTickInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:82

	while (1);
 80003ca:	e7fe      	b.n	80003ca <main+0x142>

080003cc <TaskTry>:
TaskTry():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:40
os_stack_t TaskTryStack8[64];
os_taskname_t Try8[8] = {"TaskTry8"};


taskptr_t TaskTry(void *TaskArgs)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:48
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 250;
 80003d4:	f240 0360 	movw	r3, #96	; 0x60
 80003d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003dc:	f04f 02fa 	mov.w	r2, #250	; 0xfa
 80003e0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:49
		counter2 = 225;
 80003e2:	f240 0364 	movw	r3, #100	; 0x64
 80003e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ea:	f04f 02e1 	mov.w	r2, #225	; 0xe1
 80003ee:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:50
		counter3 = 350;
 80003f0:	f240 0368 	movw	r3, #104	; 0x68
 80003f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80003fc:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:51
	}
 80003fe:	e7e9      	b.n	80003d4 <TaskTry+0x8>

08000400 <TaskTry2>:
TaskTry2():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:56

}

taskptr_t TaskTry2(void *TaskArgs)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:63
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 8000408:	f240 0354 	movw	r3, #84	; 0x54
 800040c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000410:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000414:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:64
		counter2 = 150;
 8000416:	f240 0358 	movw	r3, #88	; 0x58
 800041a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800041e:	f04f 0296 	mov.w	r2, #150	; 0x96
 8000422:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:65
		counter3 = 175;
 8000424:	f240 035c 	movw	r3, #92	; 0x5c
 8000428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800042c:	f04f 02af 	mov.w	r2, #175	; 0xaf
 8000430:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:66
	}
 8000432:	e7e9      	b.n	8000408 <TaskTry2+0x8>

08000434 <TaskTry3>:
TaskTry3():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:71
}


taskptr_t TaskTry3(void *TaskArgs)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:75

	static uint32_t counter = 0;

	counter++;
 800043c:	f240 0350 	movw	r3, #80	; 0x50
 8000440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f103 0201 	add.w	r2, r3, #1
 800044a:	f240 0350 	movw	r3, #80	; 0x50
 800044e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000452:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:76
}
 8000454:	f107 070c 	add.w	r7, r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop

08000460 <TaskTry4>:
TaskTry4():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:79

taskptr_t TaskTry4(void *TaskArgs)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:83

	static uint32_t counter = 0;

	counter++;
 8000468:	f240 034c 	movw	r3, #76	; 0x4c
 800046c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f103 0201 	add.w	r2, r3, #1
 8000476:	f240 034c 	movw	r3, #76	; 0x4c
 800047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:84
}
 8000480:	f107 070c 	add.w	r7, r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <TaskTry5>:
TaskTry5():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:88


taskptr_t TaskTry5(void *TaskArgs)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:92

	static uint32_t counter = 0;

	counter++;
 8000494:	f240 0348 	movw	r3, #72	; 0x48
 8000498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f103 0201 	add.w	r2, r3, #1
 80004a2:	f240 0348 	movw	r3, #72	; 0x48
 80004a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004aa:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:93
}
 80004ac:	f107 070c 	add.w	r7, r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <TaskTry6>:
TaskTry6():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:96

taskptr_t TaskTry6(void *TaskArgs)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:100

	static uint32_t counter = 0;

	counter++;
 80004c0:	f240 0344 	movw	r3, #68	; 0x44
 80004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f103 0201 	add.w	r2, r3, #1
 80004ce:	f240 0344 	movw	r3, #68	; 0x44
 80004d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004d6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:101
}
 80004d8:	f107 070c 	add.w	r7, r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <TaskTry7>:
TaskTry7():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:105


taskptr_t TaskTry7(void *TaskArgs)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:109

	static uint32_t counter = 0;

	counter++;
 80004ec:	f240 0340 	movw	r3, #64	; 0x40
 80004f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f103 0201 	add.w	r2, r3, #1
 80004fa:	f240 0340 	movw	r3, #64	; 0x40
 80004fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000502:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:110
}
 8000504:	f107 070c 	add.w	r7, r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__libc_init_array>:
__libc_init_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000516:	f240 2288 	movw	r2, #648	; 0x288
 800051a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800051e:	f240 2384 	movw	r3, #644	; 0x284
 8000522:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800052c:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 800052e:	f04f 0300 	mov.w	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e00b      	b.n	800054e <__libc_init_array+0x3e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:185
    __preinit_array_start[i]();
 8000536:	f240 2384 	movw	r3, #644	; 0x284
 800053a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000544:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f103 0301 	add.w	r3, r3, #1
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d3ef      	bcc.n	8000536 <__libc_init_array+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 8000556:	f240 2288 	movw	r2, #648	; 0x288
 800055a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800055e:	f240 2388 	movw	r3, #648	; 0x288
 8000562:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800056c:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 800056e:	f04f 0300 	mov.w	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	e00b      	b.n	800058e <__libc_init_array+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:194
    __init_array_start[i]();
 8000576:	f240 2388 	movw	r3, #648	; 0x288
 800057a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000584:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f103 0301 	add.w	r3, r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	429a      	cmp	r2, r3
 8000594:	d3ef      	bcc.n	8000576 <__libc_init_array+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 8000596:	f107 0708 	add.w	r7, r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop

080005a0 <__libc_fini_array>:
__libc_fini_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 80005a6:	f240 2288 	movw	r2, #648	; 0x288
 80005aa:	f6c0 0200 	movt	r2, #2048	; 0x800
 80005ae:	f240 2388 	movw	r3, #648	; 0x288
 80005b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80005bc:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	e00d      	b.n	80005e0 <__libc_fini_array+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:206
    __fini_array_start[i - 1]();
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80005ca:	f240 2388 	movw	r3, #648	; 0x288
 80005ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005d6:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1ee      	bne.n	80005c4 <__libc_fini_array+0x24>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 80005e6:	f107 0708 	add.w	r7, r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop

080005f0 <_exit>:
_exit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:47
#if defined(DEBUG)
  while(1)
  ;
 80005f8:	e7fe      	b.n	80005f8 <_exit+0x8>
 80005fa:	bf00      	nop

080005fc <SystemInit>:
SystemInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:338
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:345
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000600:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000604:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000608:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800060c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000610:	6812      	ldr	r2, [r2, #0]
 8000612:	f042 0201 	orr.w	r2, r2, #1
 8000616:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:348

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800061c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000620:	f04f 0200 	mov.w	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:351

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000626:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800062a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800062e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000632:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800063c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000640:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:354

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000642:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064a:	f243 0210 	movw	r2, #12304	; 0x3010
 800064e:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000652:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:357

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000654:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000658:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800065c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000660:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800066a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:360

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800066c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:368
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800067a:	f000 f809 	bl	8000690 <SetSysClock>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:374

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800067e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000682:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800068a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:376
#endif
}
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop

08000690 <SetSysClock>:
SetSysClock():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:471
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:475
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:478
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006b8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:483
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c8:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:484
    StartUpCounter++;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 0301 	add.w	r3, r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:485
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d103      	bne.n	80006e0 <SetSysClock+0x50>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80006de:	d1ec      	bne.n	80006ba <SetSysClock+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:487

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80006e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <SetSysClock+0x6a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:489
  {
    HSEStatus = (uint32_t)0x01;
 80006f2:	f04f 0301 	mov.w	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	e002      	b.n	8000700 <SetSysClock+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:493
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:496
  }

  if (HSEStatus == (uint32_t)0x01)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	f040 8082 	bne.w	800080c <SetSysClock+0x17c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:499
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000708:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800070c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000710:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000714:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800071a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800071e:	641a      	str	r2, [r3, #64]	; 0x40
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:500
    PWR->CR |= PWR_CR_VOS;
 8000720:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000724:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000728:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800072c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000736:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:503

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000738:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800073c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000740:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000744:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000748:	6892      	ldr	r2, [r2, #8]
 800074a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:507

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800074c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000754:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000758:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800075c:	6892      	ldr	r2, [r2, #8]
 800075e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000762:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:510
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000764:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000768:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800076c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000770:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000774:	6892      	ldr	r2, [r2, #8]
 8000776:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800077a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:522
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800077c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000780:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000784:	f245 4219 	movw	r2, #21529	; 0x5419
 8000788:	f2c0 7240 	movt	r2, #1856	; 0x740
 800078c:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:526
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800078e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000792:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000796:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800079a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80007a4:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:529

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007a6:	bf00      	nop
 80007a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f6      	beq.n	80007a8 <SetSysClock+0x118>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:549
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80007ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80007be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007c2:	f240 7205 	movw	r2, #1797	; 0x705
 80007c6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:558
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007d8:	6892      	ldr	r2, [r2, #8]
 80007da:	f022 0203 	bic.w	r2, r2, #3
 80007de:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:559
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80007e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f0:	6892      	ldr	r2, [r2, #8]
 80007f2:	f042 0202 	orr.w	r2, r2, #2
 80007f6:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:562

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80007f8:	bf00      	nop
 80007fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 030c 	and.w	r3, r3, #12
 8000808:	2b08      	cmp	r3, #8
 800080a:	d1f6      	bne.n	80007fa <SetSysClock+0x16a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:571
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800080c:	f107 070c 	add.w	r7, r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <Asm_LowLevelTickInit>:
Asm_LowLevelTickInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:47
@************************************************************************
.thumb_func
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
 8000818:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
								@
		LDR  R1, =0xE000ED14	@SCB->CCR
 800081a:	4934      	ldr	r1, [pc, #208]	; (80008ec <SECOND_CHANGE+0x26>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:50
		LDR  R2, [R1]			@
 800081c:	680a      	ldr	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:51
		ORR  R2,R2,#0x200		@Enable double word aling
 800081e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:52
		STR	 R2,[R1]			@
 8000822:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
								@
		LDR  R1, =0xE000E010    @Load the systick control register contents
 8000824:	4932      	ldr	r1, [pc, #200]	; (80008f0 <SECOND_CHANGE+0x2a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:55
		MOVS R2, #0x00000000	@
 8000826:	2200      	movs	r2, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:56
		STR	 R2, [R1], #0x04	@
 8000828:	f841 2b04 	str.w	r2, [r1], #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:57
		STR  R0, [R1]			@Write the new value for load count
 800082c:	6008      	str	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:58
		SUBS R1, #0x04			@Points again to systick control gerister
 800082e:	3904      	subs	r1, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:61
								@
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
 8000830:	2203      	movs	r2, #3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:62
		STR  R2, [R1]		 	@Write back on the systick register, and points to
 8000832:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 8000834:	492f      	ldr	r1, [pc, #188]	; (80008f4 <SECOND_CHANGE+0x2e>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:66
		MOVS  R0, #0xFF			@
 8000836:	20ff      	movs	r0, #255	; 0xff
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:67
		STRB  R0,[R1]			@set pend sv priority
 8000838:	7008      	strb	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:69
								@
		CPSIE  I				@Enable global interrupts
 800083a:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:70
		BX	LR					@Return from sub
 800083c:	4770      	bx	lr

0800083e <Asm_CriticalIn>:
Asm_CriticalIn():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:85
@
@
@************************************************************************
.thumb_func
Asm_CriticalIn:
		MRS     R0, PRIMASK			@save status register
 800083e:	f3ef 8010 	mrs	r0, PRIMASK
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:86
		CPSID	I					@disables all interrupts
 8000842:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:87
		BX		LR					@Return from sub
 8000844:	4770      	bx	lr

08000846 <Asm_CriticalOut>:
Asm_CriticalOut():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:103
@
@************************************************************************
.thumb_func
Asm_CriticalOut:

		MSR	    PRIMASK,R0				@retrieve saved sr register
 8000846:	f380 8810 	msr	PRIMASK, r0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:104
		CPSIE	I					@enables all interrupts
 800084a:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:105
		BX		LR					@Return from sub
 800084c:	4770      	bx	lr

0800084e <Asm_IntLevelContextChange>:
Asm_IntLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:122
@
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
 800084e:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:123
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000850:	4829      	ldr	r0, [pc, #164]	; (80008f8 <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:124
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 8000852:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:127
									@exception
									@
		STR		R1,[R0]				@
 8000856:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:128
		CPSIE	I					@Enable interrupts
 8000858:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:130
									@
		BX LR 					  	@Return from sub
 800085a:	4770      	bx	lr

0800085c <Asm_TaskLevelContextChange>:
Asm_TaskLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:147
@
@************************************************************************
.thumb_func
Asm_TaskLevelContextChange:

		CPSID 	I					@Disables interrrupts
 800085c:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:148
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:149
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 8000860:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:152
									@exception
									@
		STR		R1,[R0]				@
 8000864:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:153
		CPSIE	I					@Enable interrupts
 8000866:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:156
									@
									@
		BX 		LR 					@Return from sub
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:172
@
@
@************************************************************************
.thumb_func
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
 800086a:	f01e 0f04 	tst.w	lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:173
		IT		EQ						@if, it from a MSP usage
 800086e:	bf08      	it	eq
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:174
		BEQ		FIRST_CHANGE			@
 8000870:	f000 b819 	beq.w	80008a6 <FIRST_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:176
										@
		LDR		R0, =HighReadyTaskBlock @if not,
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:177
		LDR		R0,[R0]					@
 8000876:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:178
		LDR		R1,[R0]					@Check the current taskFLag
 8000878:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:179
		TST		R1,#1					@Check if first time flag is set
 800087a:	f011 0f01 	tst.w	r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:180
		IT		NE						@
 800087e:	bf18      	it	ne
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:181
		BNE 	SECOND_CHANGE			@Jump for first context switch
 8000880:	f000 b821 	bne.w	80008c6 <SECOND_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:184
										@
										@if, not, runs context switch normally
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000884:	481e      	ldr	r0, [pc, #120]	; (8000900 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:185
		LDR		R0,[R0]					@
 8000886:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:186
		MRS		R1, PSP					@Get the current SP
 8000888:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:187
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 800088c:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:189
										@
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 8000890:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:191
										@
		LDR		R0,=HighReadyTaskBlock  @Get the first task from de queue
 8000892:	481a      	ldr	r0, [pc, #104]	; (80008fc <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:192
		LDR		R0,[R0]					@Get the new stack pointer
 8000894:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:193
		LDR		R1, [R0,#0x00000018]	@
 8000896:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:195
									    @
		LDMIA	R1!,{R4 - R11}			@Reload R4 -- R11
 8000898:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:196
		MSR		PSP , R1				@write the new stackpointer
 800089c:	f381 8809 	msr	PSP, r1

080008a0 <NO_SAVE>:
NO_SAVE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:198
NO_SAVE:								@
		ORR     LR,LR,#0x00000004		@ensures that return in PSP
 80008a0:	f04e 0e04 	orr.w	lr, lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:199
		BX		LR						@Return from sub
 80008a4:	4770      	bx	lr

080008a6 <FIRST_CHANGE>:
FIRST_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:202
										@
FIRST_CHANGE:							@
		MOVS    R4, #0x02				@if the first run
 80008a6:	2402      	movs	r4, #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:203
		MSR	    CONTROL, R4				@uses PSP always
 80008a8:	f384 8814 	msr	CONTROL, r4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:204
		ISB								@recommended after write control
 80008ac:	f3bf 8f6f 	isb	sy
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:205
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:206
		LDR		R0,[R0]					@Get the new stack pointer
 80008b2:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:207
		LDR		R1,[R0]					@Get task flags
 80008b4:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:208
		BIC		R1,R1,#1				@clear first time flag
 80008b6:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:209
		STR		R1,[R0]					@
 80008ba:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:210
		LDR		R1, [R0,#0x00000018]	@
 80008bc:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:211
		MSR     PSP,R1					@Load the first stack pointer
 80008be:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:212
		B		NO_SAVE					@
 80008c2:	f7ff bfed 	b.w	80008a0 <NO_SAVE>

080008c6 <SECOND_CHANGE>:
SECOND_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:215

SECOND_CHANGE:
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:216
		LDR		R0,[R0]					@
 80008c8:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:217
		MRS		R1, PSP					@Get the current SP
 80008ca:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:218
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 80008ce:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:219
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 80008d2:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:221
										@
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:222
		LDR		R0,[R0]					@Get the new stack pointer
 80008d6:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:223
		LDR		R1,[R0]					@Get task flags
 80008d8:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:224
		BIC		R1,R1,#1				@clear first time flag
 80008da:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:225
		STR		R1,[R0]					@
 80008de:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:226
		LDR		R1, [R0,#0x00000018]	@
 80008e0:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:227
		MSR     PSP,R1					@Load the first stack pointer
 80008e2:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:228
		B		NO_SAVE					@
 80008e6:	f7ff bfdb 	b.w	80008a0 <NO_SAVE>
 80008ea:	0000      	.short	0x0000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
								@
		LDR  R1, =0xE000ED14	@SCB->CCR
 80008ec:	e000ed14 	.word	0xe000ed14
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
		LDR  R2, [R1]			@
		ORR  R2,R2,#0x200		@Enable double word aling
		STR	 R2,[R1]			@
								@
		LDR  R1, =0xE000E010    @Load the systick control register contents
 80008f0:	e000e010 	.word	0xe000e010
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
		STR  R2, [R1]		 	@Write back on the systick register, and points to
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 80008f4:	e000ed22 	.word	0xe000ed22
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:123
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 80008f8:	e000ed04 	.word	0xe000ed04
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:176
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
		IT		EQ						@if, it from a MSP usage
		BEQ		FIRST_CHANGE			@
										@
		LDR		R0, =HighReadyTaskBlock @if not,
 80008fc:	20000070 	.word	0x20000070
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:184
		TST		R1,#1					@Check if first time flag is set
		IT		NE						@
		BNE 	SECOND_CHANGE			@Jump for first context switch
										@
										@if, not, runs context switch normally
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000900:	2000006c 	.word	0x2000006c

08000904 <uLipe_TaskEnqueue>:
uLipe_TaskEnqueue():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:254
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskEnqueue(taskTCB_t *CurrTask)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:256
	//check for queue full:
	if((NUMBER_OF_TASK + 1) <= TaskMainCtl.QueueSize)
 800090c:	f640 037c 	movw	r3, #2172	; 0x87c
 8000910:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000914:	7a9b      	ldrb	r3, [r3, #10]
 8000916:	2b07      	cmp	r3, #7
 8000918:	d902      	bls.n	8000920 <uLipe_TaskEnqueue+0x1c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:259
	{
		//return queue full error:
		return(OS_QUEUE_FULL);
 800091a:	f04f 0307 	mov.w	r3, #7
 800091e:	e03a      	b.n	8000996 <uLipe_TaskEnqueue+0x92>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:263
	}
	//Since the tail is pointing for a freelist put
	//TCB on its position:
	TaskMainCtl.Tail->TaskQueueData =
 8000920:	f640 037c 	movw	r3, #2172	; 0x87c
 8000924:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:268
			(taskTCB_t *)CurrTask;

	//advances the queue tail for next freelist:
	TaskMainCtl.Tail =
			(TaskQueue_t *)TaskMainCtl.Tail->NextNode;
 800092e:	f640 037c 	movw	r3, #2172	; 0x87c
 8000932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	689a      	ldr	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:267
	//TCB on its position:
	TaskMainCtl.Tail->TaskQueueData =
			(taskTCB_t *)CurrTask;

	//advances the queue tail for next freelist:
	TaskMainCtl.Tail =
 800093a:	f640 037c 	movw	r3, #2172	; 0x87c
 800093e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000942:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:271
			(TaskQueue_t *)TaskMainCtl.Tail->NextNode;

	//advances the counter:
	TaskMainCtl.QueueSize++;
 8000944:	f640 037c 	movw	r3, #2172	; 0x87c
 8000948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800094c:	7a9b      	ldrb	r3, [r3, #10]
 800094e:	f103 0301 	add.w	r3, r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	f640 037c 	movw	r3, #2172	; 0x87c
 8000958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800095c:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:274

	//advances tail index:
	TaskMainCtl.TailCurrIndex = (TaskMainCtl.TailCurrIndex + 1)
 800095e:	f640 037c 	movw	r3, #2172	; 0x87c
 8000962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000966:	7a5b      	ldrb	r3, [r3, #9]
 8000968:	f103 0201 	add.w	r2, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:275
			% (NUMBER_OF_TASK + 1);
 800096c:	f04f 0307 	mov.w	r3, #7
 8000970:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000974:	4013      	ands	r3, r2
 8000976:	2b00      	cmp	r3, #0
 8000978:	da05      	bge.n	8000986 <uLipe_TaskEnqueue+0x82>
 800097a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800097e:	f063 0307 	orn	r3, r3, #7
 8000982:	f103 0301 	add.w	r3, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:274

	//advances the counter:
	TaskMainCtl.QueueSize++;

	//advances tail index:
	TaskMainCtl.TailCurrIndex = (TaskMainCtl.TailCurrIndex + 1)
 8000986:	b2da      	uxtb	r2, r3
 8000988:	f640 037c 	movw	r3, #2172	; 0x87c
 800098c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000990:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:278
			% (NUMBER_OF_TASK + 1);

	//return ok:
	return(OS_OK);
 8000992:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:280

}
 8000996:	4618      	mov	r0, r3
 8000998:	f107 070c 	add.w	r7, r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <uLipe_TaskDequeue>:
uLipe_TaskDequeue():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:293
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskDequeue(taskTCB_t *CurrTask)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:295
	//check if queue is empty first:
	if(NULL >= TaskMainCtl.QueueSize)
 80009ac:	f640 037c 	movw	r3, #2172	; 0x87c
 80009b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009b4:	7a9b      	ldrb	r3, [r3, #10]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <uLipe_TaskDequeue+0x1c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:298
	{
		//return the error:
		return(OS_QUEUE_EMPTY);
 80009ba:	f04f 0308 	mov.w	r3, #8
 80009be:	e03a      	b.n	8000a36 <uLipe_TaskDequeue+0x92>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:303
	}

	//if not lets remove the TCB is in
	//top of queue:
	CurrTask = (taskTCB_t *)TaskMainCtl.Head->TaskQueueData;
 80009c0:	f640 037c 	movw	r3, #2172	; 0x87c
 80009c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:306

	//Move Head for new top of queue:
	TaskMainCtl.Head = (TaskQueue_t *)TaskMainCtl.Head->NextNode;
 80009ce:	f640 037c 	movw	r3, #2172	; 0x87c
 80009d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	f640 037c 	movw	r3, #2172	; 0x87c
 80009de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009e2:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:310

	//Decrement the size,since a element was removed from
	//queue:
	TaskMainCtl.QueueSize--;
 80009e4:	f640 037c 	movw	r3, #2172	; 0x87c
 80009e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009ec:	7a9b      	ldrb	r3, [r3, #10]
 80009ee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	f640 037c 	movw	r3, #2172	; 0x87c
 80009f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009fc:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:313

	//Advances de the current index:
	TaskMainCtl.HeadCurrIndex = (TaskMainCtl.HeadCurrIndex + 1)
 80009fe:	f640 037c 	movw	r3, #2172	; 0x87c
 8000a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a06:	7a1b      	ldrb	r3, [r3, #8]
 8000a08:	f103 0201 	add.w	r2, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:314
			% (NUMBER_OF_TASK + 1);
 8000a0c:	f04f 0307 	mov.w	r3, #7
 8000a10:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da05      	bge.n	8000a26 <uLipe_TaskDequeue+0x82>
 8000a1a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000a1e:	f063 0307 	orn	r3, r3, #7
 8000a22:	f103 0301 	add.w	r3, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:313
	//Decrement the size,since a element was removed from
	//queue:
	TaskMainCtl.QueueSize--;

	//Advances de the current index:
	TaskMainCtl.HeadCurrIndex = (TaskMainCtl.HeadCurrIndex + 1)
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	f640 037c 	movw	r3, #2172	; 0x87c
 8000a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a30:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:317
			% (NUMBER_OF_TASK + 1);

	//return a ok:
	return(OS_OK);
 8000a32:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:318
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	f107 0714 	add.w	r7, r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <uLipe_TaskQueryByIndex>:
uLipe_TaskQueryByIndex():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:357
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskQueryByIndex(uint8_t Index, taskTCB_t *DesiredTask)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:362


	//check if the current index comports a
	//ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000a50:	f640 037c 	movw	r3, #2172	; 0x87c
 8000a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a58:	7a1b      	ldrb	r3, [r3, #8]
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d20d      	bcs.n	8000a7c <uLipe_TaskQueryByIndex+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:363
			(Index > TaskMainCtl.TailCurrIndex ))
 8000a60:	f640 037c 	movw	r3, #2172	; 0x87c
 8000a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a68:	7a5b      	ldrb	r3, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:362
{


	//check if the current index comports a
	//ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d905      	bls.n	8000a7c <uLipe_TaskQueryByIndex+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:366
			(Index > TaskMainCtl.TailCurrIndex ))
	{
		//put a null pointer on TCB:
		DesiredTask = (taskTCB_t*)NULL;
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:369

		//and return error
		return(OS_INDEX_OUT_OF_RANGE);
 8000a76:	f04f 030b 	mov.w	r3, #11
 8000a7a:	e00e      	b.n	8000a9a <uLipe_TaskQueryByIndex+0x56>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:376

	//since the index is in range and corresponds directly
	//to ready list table only indexes it with the passed
	//index.

	DesiredTask = (taskTCB_t*)&TaskMainQueue[Index].TaskQueueData;
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	189b      	adds	r3, r3, r2
 8000a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a8a:	f640 0288 	movw	r2, #2184	; 0x888
 8000a8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a92:	189b      	adds	r3, r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:379

	//return succefull action..
	return(OS_OK);
 8000a96:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:380
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f107 0714 	add.w	r7, r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <uLipe_TaskDropByIndex>:
uLipe_TaskDropByIndex():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:394
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskDropByIndex(uint8_t Index)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:396
	//Auxiliaries:
	uint8_t LoopCntr = 0;
 8000ab2:	f04f 0300 	mov.w	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:399

	//check if index corresponds to a ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000ab8:	f640 037c 	movw	r3, #2172	; 0x87c
 8000abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ac0:	7a1b      	ldrb	r3, [r3, #8]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d20a      	bcs.n	8000ade <uLipe_TaskDropByIndex+0x36>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:400
			(Index > TaskMainCtl.TailCurrIndex ))
 8000ac8:	f640 037c 	movw	r3, #2172	; 0x87c
 8000acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ad0:	7a5b      	ldrb	r3, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:399
{
	//Auxiliaries:
	uint8_t LoopCntr = 0;

	//check if index corresponds to a ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d902      	bls.n	8000ade <uLipe_TaskDropByIndex+0x36>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:403
			(Index > TaskMainCtl.TailCurrIndex ))
	{
		//return a error of index
		return(OS_INDEX_OUT_OF_RANGE);
 8000ad8:	f04f 030b 	mov.w	r3, #11
 8000adc:	e07a      	b.n	8000bd4 <uLipe_TaskDropByIndex+0x12c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:407
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e03a      	b.n	8000b5a <uLipe_TaskDropByIndex+0xb2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:411
			LoopCntr = (LoopCntr + 1)% (NUMBER_OF_TASK + 1))
	{
		//we simply overwrite the current tcbs in one previous position:
		TaskMainQueue[LoopCntr].TaskQueueData =
 8000ae4:	7bf9      	ldrb	r1, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:412
				TaskMainQueue[(LoopCntr + 1)%(NUMBER_OF_TASK + 1)].TaskQueueData;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	f103 0201 	add.w	r2, r3, #1
 8000aec:	f04f 0307 	mov.w	r3, #7
 8000af0:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da05      	bge.n	8000b06 <uLipe_TaskDropByIndex+0x5e>
 8000afa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000afe:	f063 0307 	orn	r3, r3, #7
 8000b02:	f103 0301 	add.w	r3, r3, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f640 0288 	movw	r2, #2184	; 0x888
 8000b0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b10:	4603      	mov	r3, r0
 8000b12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b16:	181b      	adds	r3, r3, r0
 8000b18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	6818      	ldr	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:411
	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
			LoopCntr = (LoopCntr + 1)% (NUMBER_OF_TASK + 1))
	{
		//we simply overwrite the current tcbs in one previous position:
		TaskMainQueue[LoopCntr].TaskQueueData =
 8000b20:	f640 0288 	movw	r2, #2184	; 0x888
 8000b24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b28:	460b      	mov	r3, r1
 8000b2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2e:	185b      	adds	r3, r3, r1
 8000b30:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b34:	18d3      	adds	r3, r2, r3
 8000b36:	6018      	str	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:408
		return(OS_INDEX_OUT_OF_RANGE);
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
			LoopCntr = (LoopCntr + 1)% (NUMBER_OF_TASK + 1))
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	f103 0201 	add.w	r2, r3, #1
 8000b3e:	f04f 0307 	mov.w	r3, #7
 8000b42:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	da05      	bge.n	8000b58 <uLipe_TaskDropByIndex+0xb0>
 8000b4c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000b50:	f063 0307 	orn	r3, r3, #7
 8000b54:	f103 0301 	add.w	r3, r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:407
		//return a error of index
		return(OS_INDEX_OUT_OF_RANGE);
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
 8000b5a:	f640 037c 	movw	r3, #2172	; 0x87c
 8000b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b62:	7a5b      	ldrb	r3, [r3, #9]
 8000b64:	7bfa      	ldrb	r2, [r7, #15]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d9bc      	bls.n	8000ae4 <uLipe_TaskDropByIndex+0x3c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:416
		TaskMainQueue[LoopCntr].TaskQueueData =
				TaskMainQueue[(LoopCntr + 1)%(NUMBER_OF_TASK + 1)].TaskQueueData;

	}
	//updates the Tail
	TaskMainCtl.Tail = TaskMainCtl.Tail->PrevNode;
 8000b6a:	f640 037c 	movw	r3, #2172	; 0x87c
 8000b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	f640 037c 	movw	r3, #2172	; 0x87c
 8000b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b7e:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:419

	//updates the tail index:
	TaskMainCtl.TailCurrIndex--;
 8000b80:	f640 037c 	movw	r3, #2172	; 0x87c
 8000b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b88:	7a5b      	ldrb	r3, [r3, #9]
 8000b8a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	f640 037c 	movw	r3, #2172	; 0x87c
 8000b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b98:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:422

	//wraps to maximum queue table length:
	if(TaskMainCtl.TailCurrIndex > NUMBER_OF_TASK)
 8000b9a:	f640 037c 	movw	r3, #2172	; 0x87c
 8000b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba2:	7a5b      	ldrb	r3, [r3, #9]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d906      	bls.n	8000bb6 <uLipe_TaskDropByIndex+0x10e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:424
	{
		TaskMainCtl.TailCurrIndex = NUMBER_OF_TASK;
 8000ba8:	f640 037c 	movw	r3, #2172	; 0x87c
 8000bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bb0:	f04f 0207 	mov.w	r2, #7
 8000bb4:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:429
	}

	//decrements the queue size, since a "middle data"
	//was dequeued
	TaskMainCtl.QueueSize--;
 8000bb6:	f640 037c 	movw	r3, #2172	; 0x87c
 8000bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bbe:	7a9b      	ldrb	r3, [r3, #10]
 8000bc0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	f640 037c 	movw	r3, #2172	; 0x87c
 8000bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bce:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:432

	//Return ok!
	return(OS_OK);
 8000bd0:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:433
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f107 0714 	add.w	r7, r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <uLipe_Schedule>:
uLipe_Schedule():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:478
 	 return:	TODO


 ************************************************************************/
void  uLipe_Schedule(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:480
	//auxiliar tcb pointer:
	taskTCB_t *AuxiliarTcb = NULL;
 8000be6:	f04f 0300 	mov.w	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:483

	//create a temporary status register:
	uint32_t StatusReg = 0;
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:486

	//a auxiliar index for search tasks:
	uint8_t  Index = 0, AuxiliarIndex = 0;
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	73bb      	strb	r3, [r7, #14]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:491


    //only schedule if queue is
	//not empty
    if(NULL != TaskMainCtl.QueueSize)
 8000bfe:	f640 037c 	movw	r3, #2172	; 0x87c
 8000c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c06:	7a9b      	ldrb	r3, [r3, #10]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d05e      	beq.n	8000cca <uLipe_Schedule+0xea>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:497
    {
    	//if not empty search for ready tasks:

    	//make head queue as a start point
    	//to queury a queue:
    	Index = TaskMainCtl.HeadCurrIndex;
 8000c0c:	f640 037c 	movw	r3, #2172	; 0x87c
 8000c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c14:	7a1b      	ldrb	r3, [r3, #8]
 8000c16:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:500

    	//perform a search:
    	while(Index < TaskMainCtl.TailCurrIndex)
 8000c18:	e02e      	b.n	8000c78 <uLipe_Schedule+0x98>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:503
    	{
    		//create a critical code section:
    		StatusReg = Asm_CriticalIn();
 8000c1a:	f7ff fe10 	bl	800083e <Asm_CriticalIn>
 8000c1e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:506

    		//query for current index task:
    		uLipe_TaskQueryByIndex(Index, AuxiliarTcb);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4618      	mov	r0, r3
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	f7ff ff0d 	bl	8000a44 <uLipe_TaskQueryByIndex>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:509

    		//check for invalid value in HighPriorityReady:
    		if((taskTCB_t *)NULL == HighReadyTaskBlock)
 8000c2a:	f240 0370 	movw	r3, #112	; 0x70
 8000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <uLipe_Schedule+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:512
    		{
    			//assign a valid value on it
    			HighReadyTaskBlock = (taskTCB_t*)AuxiliarTcb;
 8000c38:	f240 0370 	movw	r3, #112	; 0x70
 8000c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e011      	b.n	8000c6a <uLipe_Schedule+0x8a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:519
    		else
    		{
    			//check which priority is higher, remember
    			//that less value of priority most high is it:

    			if(HighReadyTaskBlock->TaskPriority > AuxiliarTcb->TaskPriority)
 8000c46:	f240 0370 	movw	r3, #112	; 0x70
 8000c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	7b5a      	ldrb	r2, [r3, #13]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	7b5b      	ldrb	r3, [r3, #13]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d907      	bls.n	8000c6a <uLipe_Schedule+0x8a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:523
    			{
    				//if a new high priority is appeared
    				//get it
    				HighReadyTaskBlock = (taskTCB_t *)AuxiliarTcb;
 8000c5a:	f240 0370 	movw	r3, #112	; 0x70
 8000c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:526

    				//Save the candidate of most priority task on queue index:
    				AuxiliarIndex = Index;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	73bb      	strb	r3, [r7, #14]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:532

    			}
    		}

    		//go to next task in queue
    		Index++;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	f103 0301 	add.w	r3, r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:535

    		//end of critical section.
    		Asm_CriticalOut(StatusReg);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fde7 	bl	8000846 <Asm_CriticalOut>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:500
    	//make head queue as a start point
    	//to queury a queue:
    	Index = TaskMainCtl.HeadCurrIndex;

    	//perform a search:
    	while(Index < TaskMainCtl.TailCurrIndex)
 8000c78:	f640 037c 	movw	r3, #2172	; 0x87c
 8000c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c80:	7a5b      	ldrb	r3, [r3, #9]
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3c8      	bcc.n	8000c1a <uLipe_Schedule+0x3a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:541

    	}


    	//check if the most priority task is in top of queue:
    	if(AuxiliarIndex == TaskMainCtl.TailCurrIndex)
 8000c88:	f640 037c 	movw	r3, #2172	; 0x87c
 8000c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c90:	7a5b      	ldrb	r3, [r3, #9]
 8000c92:	7bba      	ldrb	r2, [r7, #14]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d103      	bne.n	8000ca0 <uLipe_Schedule+0xc0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:544
    	{
    		//The only dequeues it:
    		uLipe_TaskDequeue(AuxiliarTcb);
 8000c98:	68b8      	ldr	r0, [r7, #8]
 8000c9a:	f7ff fe83 	bl	80009a4 <uLipe_TaskDequeue>
 8000c9e:	e003      	b.n	8000ca8 <uLipe_Schedule+0xc8>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:550
    	}
    	else
    	{
    		//if task is other position inside of queue
    		//drop it
    		uLipe_TaskDropByIndex(AuxiliarIndex);
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff00 	bl	8000aa8 <uLipe_TaskDropByIndex>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:554
    	}

    	//create a critical code section:
    	StatusReg = Asm_CriticalIn();
 8000ca8:	f7ff fdc9 	bl	800083e <Asm_CriticalIn>
 8000cac:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:557

    	//Set task as running:
    	HighReadyTaskBlock->TaskState = TASK_RUNNING;
 8000cae:	f240 0370 	movw	r3, #112	; 0x70
 8000cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f04f 0203 	mov.w	r2, #3
 8000cbc:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:560

    	//Perform a context switching:
    	Asm_IntLevelContextChange();
 8000cbe:	f7ff fdc6 	bl	800084e <Asm_IntLevelContextChange>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:563

    	//ends the critical section:
    	Asm_CriticalOut(StatusReg);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fdbf 	bl	8000846 <Asm_CriticalOut>
 8000cc8:	e011      	b.n	8000cee <uLipe_Schedule+0x10e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:570
    }
    else
    {

    	//if no tasks ready, execute again the current task
    	CurrentTaskBlock->TaskState = TASK_RUNNING;
 8000cca:	f240 036c 	movw	r3, #108	; 0x6c
 8000cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f04f 0203 	mov.w	r2, #3
 8000cd8:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:573

       	//make HighPriorityReady = CurrentTaskBlock:
        HighReadyTaskBlock = (taskTCB_t*)CurrentTaskBlock;
 8000cda:	f240 036c 	movw	r3, #108	; 0x6c
 8000cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f240 0370 	movw	r3, #112	; 0x70
 8000ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cec:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:592
    	//perform a context switch:
    	Asm_TaskLevelContextChange();
        */
    }

}
 8000cee:	f107 0710 	add.w	r7, r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop

08000cf8 <SysTick_Handler>:
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:660
 	 return:	TODO


 ************************************************************************/
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:662
	//points to tasklist:
	taskTCB_t *TaskList = (taskTCB_t *) NULL;
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:665

	//allocates a status register:
	uint32_t StatusReg = 0;
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:668

	//Enable critical section:
	StatusReg = Asm_CriticalIn();
 8000d0a:	f7ff fd98 	bl	800083e <Asm_CriticalIn>
 8000d0e:	6038      	str	r0, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:671

	//First of all, update the current Tick:
	TickCounter++;
 8000d10:	f240 0374 	movw	r3, #116	; 0x74
 8000d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f103 0201 	add.w	r2, r3, #1
 8000d1e:	f240 0374 	movw	r3, #116	; 0x74
 8000d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d26:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:674

	//Disable critical section:
	Asm_CriticalOut(StatusReg);
 8000d28:	6838      	ldr	r0, [r7, #0]
 8000d2a:	f7ff fd8c 	bl	8000846 <Asm_CriticalOut>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:677

	//Get the head of tasklist:
	TaskList = (taskTCB_t*)Task_GetList;
 8000d2e:	f640 7399 	movw	r3, #3993	; 0xf99
 8000d32:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000d36:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:680

	//Suspend the current task:
	CurrentTaskBlock->TaskState = TASK_SUSPEND;
 8000d38:	f240 036c 	movw	r3, #108	; 0x6c
 8000d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f04f 0201 	mov.w	r2, #1
 8000d46:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:683

	//Store the current tick counter:
	CurrentTaskBlock->TaskElapsedTime = TickCounter;
 8000d48:	f240 036c 	movw	r3, #108	; 0x6c
 8000d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	f240 0374 	movw	r3, #116	; 0x74
 8000d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6093      	str	r3, [r2, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:687

	//go trhough task list and executes
	//the admission control:
	while((taskTCB_t*)NULL != TaskList)
 8000d5e:	e01d      	b.n	8000d9c <SysTick_Handler+0xa4>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:691
	{

		//check if task is not in ready state:
		if(TASK_READY != TaskList->TaskState)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7bdb      	ldrb	r3, [r3, #15]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d016      	beq.n	8000d96 <SysTick_Handler+0x9e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:694
		{
			//search if a tick already occurred:
			if(OS_RATE <= (TickCounter - TaskList->TaskElapsedTime))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	f240 0374 	movw	r3, #116	; 0x74
 8000d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d00d      	beq.n	8000d96 <SysTick_Handler+0x9e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:697
			{
				//then set this task as a ready:
				TaskList->TaskState = TASK_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:700

				//Read current tick counter:
				TaskList->TaskElapsedTime = TickCounter;
 8000d82:	f240 0374 	movw	r3, #116	; 0x74
 8000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:704

				//Put this task control block on
				//ready list:
				uLipe_TaskEnqueue((taskTCB_t*) TaskList);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fdb7 	bl	8000904 <uLipe_TaskEnqueue>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:709
			}

		}
		//in other cases, go to next task:
		TaskList = TaskList->NextTask;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:687
	//Store the current tick counter:
	CurrentTaskBlock->TaskElapsedTime = TickCounter;

	//go trhough task list and executes
	//the admission control:
	while((taskTCB_t*)NULL != TaskList)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1de      	bne.n	8000d60 <SysTick_Handler+0x68>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:714
		TaskList = TaskList->NextTask;
	}

	//after proccess tick counter,
	//its time to schedule the next ready task:
	uLipe_Schedule();
 8000da2:	f7ff ff1d 	bl	8000be0 <uLipe_Schedule>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:716

}
 8000da6:	f107 0708 	add.w	r7, r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop

08000db0 <Task_Create>:
Task_Create():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:110
 ************************************************************************/
os_error_t 	Task_Create
			(taskptr_t (*TaskAction), os_stack_t *TaskStack,
			uint8_t TaskPriority, os_taskname_t *TaskName,
			uint8_t NameSize,os_stack_t StackSize)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:111
	taskTCB_t *TaskList 		= &TaskBlockList,
 8000dc0:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8000dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dc8:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:112
			  *TaskToBeLinked	= &TaskBlockList;
 8000dca:	f640 13e8 	movw	r3, #2536	; 0x9e8
 8000dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dd2:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:114

	uint8_t    LoopCntr = 0;
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	76fb      	strb	r3, [r7, #27]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:117

	//check for size of taskname:
	if(NameSize > 32)
 8000dda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d902      	bls.n	8000de8 <Task_Create+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:120
	{
		//return error if too long
		return(OS_NAME_TOO_LONG);
 8000de2:	f04f 0305 	mov.w	r3, #5
 8000de6:	e0cc      	b.n	8000f82 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:124
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	76fb      	strb	r3, [r7, #27]
 8000dee:	e051      	b.n	8000e94 <Task_Create+0xe4>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:127
	{
		//check if current TCB is empty
		if(EMPTY == TaskList->EmptyTCB)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d136      	bne.n	8000e66 <Task_Create+0xb6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:132
		{
			//if yes,fill the task TCB

			//put the task function
			TaskList->TaskAction =(taskptr_t *)TaskAction;
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:136

			//put the task stack, and points to its top.
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
								  (StackSize>>2) - 1);
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	ea4f 0393 	mov.w	r3, r3, lsr #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:135

			//put the task function
			TaskList->TaskAction =(taskptr_t *)TaskAction;

			//put the task stack, and points to its top.
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
 8000e04:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000e08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	18d2      	adds	r2, r2, r3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:139
								  (StackSize>>2) - 1);

			//check for priority given
			if(TaskPriority < MAX_PRIORITY || TaskPriority > LESS_PRIORITY)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b1f      	cmp	r3, #31
 8000e18:	d902      	bls.n	8000e20 <Task_Create+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:142
			{
				//return if the priority is invalid
				return(OS_PRIORITY_OUT_OF_RANGE);
 8000e1a:	f04f 0303 	mov.w	r3, #3
 8000e1e:	e0b0      	b.n	8000f82 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:149

			//if priority is ok, continues to fill
			//the TCB

			//mask, and put the priority
			TaskList->TaskPriority = TaskPriority & 0x1F;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:152

			//Points to the task name
			TaskList->TaskName = TaskName;
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	615a      	str	r2, [r3, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:155

			//puts the calculated ID
			TaskList->TaskID   = LoopCntr;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	7efa      	ldrb	r2, [r7, #27]
 8000e36:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:158

			//reset the time elapsed counter
			TaskList->TaskElapsedTime = 0;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:162

			//calculate its deadline, based on
			//its priority
			TaskList->TaskTime = 1;
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f04f 0201 	mov.w	r2, #1
 8000e46:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:165

			//Put the initial TCB state
			TaskList->TaskState   = TASK_READY;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:168

			//if all gone well, occupies the TCB
			TaskList->EmptyTCB    =  FILLED;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000e56:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:171

			//Set the first time execution flag.
			TaskList->TaskFlags  |= TASK_FLAG_IS_FIRST_TIME;
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f043 0201 	orr.w	r2, r3, #1
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:174

			//filled TCB, break this loop
			break;
 8000e64:	e019      	b.n	8000e9a <Task_Create+0xea>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:180

		}
		else
		{
			//else, try next TCB
			TaskList = &TaskBlockList[LoopCntr];
 8000e66:	7efa      	ldrb	r2, [r7, #27]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000e74:	f640 12e8 	movw	r2, #2536	; 0x9e8
 8000e78:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e7c:	189b      	adds	r3, r3, r2
 8000e7e:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:183

			//check for tasklist full
			if(NUMBER_OF_TASK - 1  <  LoopCntr)
 8000e80:	7efb      	ldrb	r3, [r7, #27]
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <Task_Create+0xdc>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:186
			{
				//if yes, return error
				return(OS_TASKLIST_FULL);
 8000e86:	f04f 0302 	mov.w	r3, #2
 8000e8a:	e07a      	b.n	8000f82 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:124
		//return error if too long
		return(OS_NAME_TOO_LONG);
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8000e8c:	7efb      	ldrb	r3, [r7, #27]
 8000e8e:	f103 0301 	add.w	r3, r3, #1
 8000e92:	76fb      	strb	r3, [r7, #27]
 8000e94:	7efb      	ldrb	r3, [r7, #27]
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	d9aa      	bls.n	8000df0 <Task_Create+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:195
	}
	//after fill the taskblock is time to insert it on the
	//tasklist linked list

	//Points first to the last TCB in Table(is head)
	TaskList = &TaskBlockList[NUMBER_OF_TASK];
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <Task_Create+0x1e0>)
 8000e9c:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:198

	//check if Idle TCB was already initialized:
	if(EMPTY == TaskList->EmptyTCB)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d149      	bne.n	8000f3a <Task_Create+0x18a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:203
	{
		//if not, initialize it.

		//Put the task function (Task Idle)
		TaskList->TaskAction = (taskptr_t *)& Task_Idle;
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	f640 73ad 	movw	r3, #4013	; 0xfad
 8000eac:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000eb0:	61d3      	str	r3, [r2, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:206

		//Points to task stack
		TaskList->TaskStack  = (os_stack_t *)(IdleTaskStack +
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <Task_Create+0x1e4>)
 8000eb6:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:210
							   (sizeof(IdleTaskStack) >> 2) - 1);

		//Assign its priority(is the least)
		TaskList->TaskPriority = LESS_PRIORITY + 1;
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f04f 0220 	mov.w	r2, #32
 8000ebe:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:213

		//Assign its name pointing to it
		TaskList->TaskName = (os_taskname_t *) &IdleName;
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	f240 0338 	movw	r3, #56	; 0x38
 8000ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eca:	6153      	str	r3, [r2, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:216

		//Its ID is always the greater on tasklist
		TaskList->TaskID = NUMBER_OF_TASK + 1;
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f04f 0208 	mov.w	r2, #8
 8000ed2:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:219

		//Reset its time counter
		TaskList->TaskElapsedTime = 0;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:222

		//Assign its Deadline based on its priority
		TaskList->TaskTime = 1;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f04f 0201 	mov.w	r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:225

		//Set the initial state
		TaskList->TaskState   = TASK_READY;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:228

		//Occupie its TCB
		TaskList->EmptyTCB    =  FILLED;
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000ef2:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:231

		//Additionally, attach its as head of tasklist
		TaskList->NextTask    = &TaskBlockList[LoopCntr];
 8000ef4:	7efa      	ldrb	r2, [r7, #27]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000f02:	f640 12e8 	movw	r2, #2536	; 0x9e8
 8000f06:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000f0a:	189a      	adds	r2, r3, r2
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:234

		//attach next task...
		TaskList = TaskList->NextTask;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:237

		//...and the previous task
		TaskList->PrevTask = &TaskBlockList[NUMBER_OF_TASK];
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <Task_Create+0x1e0>)
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:240

		//marks the end of list
		TaskList->NextTask = END_LIST;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:243

		//Declare that task has never executed
		TaskList->TaskFlags |= TASK_FLAG_IS_FIRST_TIME;
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f043 0201 	orr.w	r2, r3, #1
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	e025      	b.n	8000f7e <Task_Create+0x1ce>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:255
	{

		while(END_LIST != TaskList->NextTask)
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	e000      	b.n	8000f3c <Task_Create+0x18c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:252
	//if Head of list exists, then attach the
	//TCB desired on it.
	else
	{

		while(END_LIST != TaskList->NextTask)
 8000f3a:	bf00      	nop
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f6      	bne.n	8000f32 <Task_Create+0x182>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:261
		}

		//when the end of list is found

		//The last item of list points to our new TCB
		TaskList->NextTask = &TaskBlockList[LoopCntr - 1];
 8000f44:	7efb      	ldrb	r3, [r7, #27]
 8000f46:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f50:	189b      	adds	r3, r3, r2
 8000f52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000f56:	f640 12e8 	movw	r2, #2536	; 0x9e8
 8000f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000f5e:	189a      	adds	r2, r3, r2
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:264

		//and our new TCB...
		TaskToBeLinked     = TaskList->NextTask;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:267

		//...points to the ex-last item as previous task
		TaskToBeLinked->PrevTask = TaskList;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:270

		//marks the new end of list
		TaskList = TaskList->NextTask;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:273


		TaskList->NextTask = END_LIST;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:278

	}

	//return a ok, if all gone well :)
	return(OS_OK);
 8000f7e:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:279
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000b00 	.word	0x20000b00
 8000f94:	200009e4 	.word	0x200009e4

08000f98 <Task_GetList>:
Task_GetList():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:644
 	 return:	TODO


 ************************************************************************/
taskTCB_t* Task_GetList(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:646
	//simply get the tasklist from idle task:
	return((taskTCB_t *)&TaskBlockList[NUMBER_OF_TASK]);
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <Task_GetList+0x10>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:648

}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000b00 	.word	0x20000b00

08000fac <Task_Idle>:
Task_Idle():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:663
 	 return:	TODO


 ************************************************************************/
void Task_Idle(void *TaskArgs)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:664
	while(1);
 8000fb4:	e7fe      	b.n	8000fb4 <Task_Idle+0x8>
 8000fb6:	bf00      	nop
