
uLipeRTOS.elf:     file format elf32-littlearm
uLipeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00000d44 memsz 0x00000d44 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08000d44 align 2**15
         filesz 0x00000038 memsz 0x00000b94 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   0000027c  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  0800027c  0800027c  0000827c  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00000ac4  08000280  08000280  00008280  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000038  20000000  08000d44  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000a5c  20000038  08000d7c  00010038  2**2  ALLOC
  5 ._check_stack 00000100  20000a94  080017d8  00010038  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  00010038  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  000100a8  2**0  CONTENTS, READONLY
  8 .debug_aranges 000001f0  00000000  00000000  000100e0  2**3  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000184d  00000000  00000000  000102d0  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000743  00000000  00000000  00011b1d  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001bda  00000000  00000000  00012260  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000494  00000000  00000000  00013e3c  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ff08  00000000  00000000  000142d0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000770  00000000  00000000  000741d8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00074948  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f4a6  00000000  00000000  00074aa8  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800027c l    d  ._inits	00000000 ._inits
08000280 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000038 l    d  .bss	00000000 .bss
20000a94 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
20000040 l     O .bss	00000004 uwTimingDelay
0800040c l     F .text	00000030 TimingDelay_Decrement
00000000 l    df *ABS*	00000000 tasks.c
20000064 l     O .bss	00000004 counter1.4193
20000068 l     O .bss	00000004 counter2.4194
2000006c l     O .bss	00000004 counter3.4195
20000058 l     O .bss	00000004 counter1.4199
2000005c l     O .bss	00000004 counter2.4200
20000060 l     O .bss	00000004 counter3.4201
20000054 l     O .bss	00000004 counter.4205
20000050 l     O .bss	00000004 counter.4209
2000004c l     O .bss	00000004 counter.4213
20000048 l     O .bss	00000004 counter.4217
20000044 l     O .bss	00000004 counter.4221
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
08000770 l     F .text	00000186 SetSysClock
00000000 l    df *ABS*	00000000 uLipe_Task.c
00000000 l    df *ABS*	00000000 memset.c
08000280 l       ._inits	00000000 __fini_array_end
08000280 l       ._inits	00000000 __fini_array_start
08000280 l       ._inits	00000000 __init_array_end
08000280 l       ._inits	00000000 __preinit_array_end
08000280 l       ._inits	00000000 __init_array_start
0800027c l       ._inits	00000000 __preinit_array_start
0800022c  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
0800022c  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI2_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08000514 g     F .text	0000002a TaskTry3
08000264  w    F .isr_vector	00000006 DebugMon_Handler
0800027c g     O ._inits	00000004 p_system_init
20000000 g     O .data	00000007 Try
20000000 g       .data	00000000 __data_start__
2001fc00 g       *ABS*	00000000 _Heap_Limit
20000174 g     O .bss	00000100 TaskTryStack8
0800022c  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
0800023c  w    F .isr_vector	00000006 HardFault_Handler
0800022c  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
08000598 g     F .text	0000002a TaskTry6
0800043c g     F .text	0000000a SysTick_Handler
0800022c  w    F .isr_vector	00000006 PVD_IRQHandler
0800022c  w    F .isr_vector	00000006 SDIO_IRQHandler
0800022c  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
00000400 g       *ABS*	00000000 _Main_Stack_Size
08000d44 g       *ABS*	00000000 _sidata
0800026c  w    F .isr_vector	00000006 PendSV_Handler
08000234  w    F .isr_vector	00000006 NMI_Handler
08000d44 g       *ABS*	00000000 __exidx_end
080001d4 g     F .isr_vector	00000056 system_init
0800022c  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI3_IRQHandler
08000968 g     F .text	000001c0 Task_Create
20000a94 g       ._check_stack	00000000 _Heap_Begin
0800022c  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
08000d44 g       *ABS*	00000000 _etext
20000038 g       .bss	00000000 _sbss
2001fc00 g       *ABS*	00000000 __Main_Stack_Limit
0800022c  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
20000274 g     O .bss	00000100 TaskTryStack6
20000018 g     O .data	00000008 Try4
0800022c  w    F .isr_vector	00000006 EXTI0_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000a94 g       ._check_stack	00000000 _noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
0800022c  w    F .isr_vector	00000006 FPU_IRQHandler
20000070 g     O .bss	00000001 ID
0800022c  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
08000254  w    F .isr_vector	00000006 UsageFault_Handler
0800022c  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
20000038 g       .bss	00000000 __bss_start__
20000038 g     O .bss	00000004 TestTCB
20000000 g       .data	00000000 _sdata
0800022c  w    F .isr_vector	00000006 SPI1_IRQHandler
20000874 g     O .bss	00000100 IdleTaskStack
20000374 g     O .bss	00000100 TaskTryStack7
0800022c  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
0800022c  w    F .isr_vector	00000006 DCMI_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20000010 g     O .data	00000008 Try3
08000d44 g       *ABS*	00000000 __exidx_start
08000540 g     F .text	0000002a TaskTry4
0800022c  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
080005f0 g     F .text	0000008e __libc_init_array
00000400 g       *ABS*	00000000 __Main_Stack_Size
0800022c  w    F .isr_vector	00000006 USART6_IRQHandler
08000d3c g     O .text	00000008 IdleName
0800022c  w    F .isr_vector	00000006 USART3_IRQHandler
20000474 g     O .bss	00000100 TaskTryStack2
0800022c  w    F .isr_vector	00000006 CRYP_IRQHandler
08000680 g     F .text	0000004e __libc_fini_array
20000a94 g       .bss	00000000 _ebss
08000188  w    F .isr_vector	0000004c Reset_Handler
0800022c  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
080004b8 g     F .text	0000005a TaskTry2
0800022c  w    F .isr_vector	00000006 UART5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM4_IRQHandler
20000574 g     O .bss	00000100 TaskTryStack4
0800022c  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
20000038 g       .data	00000000 __data_end__
0800022c  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 UART4_IRQHandler
20000a94 g       .bss	00000000 __bss_end__
0800022c  w    F .isr_vector	00000006 TIM3_IRQHandler
0800022c  w    F .isr_vector	00000006 RCC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
0800022c  w    F .isr_vector	00000006 Default_Handler
08000bc8 g     F .text	00000048 Task_Query
2000003c g     O .bss	00000004 AnotherTCB
0800022c  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
0800022c  w    F .isr_vector	00000006 ADC_IRQHandler
20000974 g     O .bss	00000120 TaskBlockList
20000020 g     O .data	00000008 Try5
20000a94 g       ._check_stack	00000000 _end_noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
0800094c g     F .text	0000001a Task_InitBlocks
0800022c  w    F .isr_vector	00000006 TIM7_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
20000028 g     O .data	00000008 Try6
0800022c  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
0800022c  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 SPI2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
08000c10 g     F .text	0000012c memset
08000244  w    F .isr_vector	00000006 MemManage_Handler
08000280 g     F .text	00000184 main
0800022c  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
080008f8 g       .text	00000000 Asm_LowLevelTickInit
0800025c  w    F .isr_vector	00000006 SVC_Handler
20000674 g     O .bss	00000100 TaskTryStack3
0800022c  w    F .isr_vector	00000006 EXTI4_IRQHandler
080005c4 g     F .text	0000002a TaskTry7
080006dc g     F .text	00000092 SystemInit
08000448 g     F .text	00000012 Task_Idle
0800022c  w    F .isr_vector	00000006 FSMC_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
0800022c  w    F .isr_vector	00000006 WWDG_IRQHandler
20000074 g     O .bss	00000100 TaskTryStack
0800045c g     F .text	0000005a TaskTry
0800022c  w    F .isr_vector	00000006 TIM2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
20020000 g       *ABS*	00000000 __stack
0800022c  w    F .isr_vector	00000006 EXTI1_IRQHandler
20000038 g       .data	00000000 _edata
08000b28 g     F .text	000000a0 Task_GetID
0800022c  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	00000188 g_pfnVectors
0800022c  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
20000774 g     O .bss	00000100 TaskTryStack5
0800022c  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 FLASH_IRQHandler
080006d0  w    F .text	0000000a _exit
0800022c  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
0800024c  w    F .isr_vector	00000006 BusFault_Handler
0800022c  w    F .isr_vector	00000006 USART1_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_IRQHandler
20000030 g     O .data	00000008 Try7
0800022c  w    F .isr_vector	00000006 SPI3_IRQHandler
08000932 g       .text	00000000 Asm_ContextChange
0800022c  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
00000000         *UND*	00000000 TaskQuery
0800022c  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
0800056c g     F .text	0000002a TaskTry5
20000008 g     O .data	00000008 Try2
0800022c  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 89 01 00 08 35 02 00 08 3d 02 00 08     ... ....5...=...
 8000010:	45 02 00 08 4d 02 00 08 55 02 00 08 00 00 00 00     E...M...U.......
	...
 800002c:	5d 02 00 08 65 02 00 08 00 00 00 00 6d 02 00 08     ]...e.......m...
 800003c:	3d 04 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     =...-...-...-...
 800004c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800005c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800006c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800007c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800008c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800009c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ac:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000bc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000cc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000dc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ec:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000fc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800010c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800011c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800012c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800013c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800014c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800015c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800016c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800017c:	2d 02 00 08 2d 02 00 08 2d 02 00 08                 -...-...-...

08000188 <Reset_Handler>:
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	f240 0338 	movw	r3, #56	; 0x38
 8000192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	f640 2394 	movw	r3, #2708	; 0xa94
 800019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001a0:	607b      	str	r3, [r7, #4]
bss_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	e007      	b.n	80001b8 <Reset_Handler+0x30>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	f04f 0200 	mov.w	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f103 0304 	add.w	r3, r3, #4
 80001b6:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d8f3      	bhi.n	80001a8 <Reset_Handler+0x20>
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001c0:	f000 fa16 	bl	80005f0 <__libc_init_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001c4:	f000 f85c 	bl	8000280 <__fini_array_end>
 80001c8:	60f8      	str	r0, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001ca:	f000 fa59 	bl	8000680 <__libc_fini_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f000 fa7e 	bl	80006d0 <_exit>

080001d4 <system_init>:
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	f640 5344 	movw	r3, #3396	; 0xd44
 80001de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	f240 0300 	movw	r3, #0
 80001e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	f240 0338 	movw	r3, #56	; 0x38
 80001f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001f6:	607b      	str	r3, [r7, #4]
data_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	e00b      	b.n	8000216 <system_init+0x42>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	f103 0304 	add.w	r3, r3, #4
 800020c:	603b      	str	r3, [r7, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f103 0304 	add.w	r3, r3, #4
 8000214:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d8ef      	bhi.n	80001fe <system_init+0x2a>
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 800021e:	f000 fa5d 	bl	80006dc <SystemInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000222:	f107 0710 	add.w	r7, r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop

0800022c <ADC_IRQHandler>:
Default_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:432
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:435
  while (1)
    {
    }
 8000230:	e7fe      	b.n	8000230 <ADC_IRQHandler+0x4>
DMA1_Stream3_IRQHandler():
 8000232:	bf00      	nop

08000234 <NMI_Handler>:
NMI_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:444
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:447
  while (1)
    {
    }
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>
 800023a:	bf00      	nop

0800023c <HardFault_Handler>:
HardFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:452
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:455
  while (1)
    {
    }
 8000240:	e7fe      	b.n	8000240 <HardFault_Handler+0x4>
 8000242:	bf00      	nop

08000244 <MemManage_Handler>:
MemManage_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:460
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:463
  while (1)
    {
    }
 8000248:	e7fe      	b.n	8000248 <MemManage_Handler+0x4>
 800024a:	bf00      	nop

0800024c <BusFault_Handler>:
BusFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:471
  while (1)
    {
    }
 8000250:	e7fe      	b.n	8000250 <BusFault_Handler+0x4>
 8000252:	bf00      	nop

08000254 <UsageFault_Handler>:
UsageFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:479
  while (1)
    {
    }
 8000258:	e7fe      	b.n	8000258 <UsageFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <SVC_Handler>:
SVC_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:487
  while (1)
    {
    }
 8000260:	e7fe      	b.n	8000260 <SVC_Handler+0x4>
 8000262:	bf00      	nop

08000264 <DebugMon_Handler>:
DebugMon_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:495
  while (1)
    {
    }
 8000268:	e7fe      	b.n	8000268 <DebugMon_Handler+0x4>
 800026a:	bf00      	nop

0800026c <PendSV_Handler>:
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:503
  while (1)
    {
    }
 8000270:	e7fe      	b.n	8000270 <PendSV_Handler+0x4>
 8000272:	bf00      	nop
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:511
  while (1)
    {
    }
 8000278:	e7fe      	b.n	8000278 <PendSV_Handler+0xc>
PendSV_Handler():
 800027a:	bf00      	nop

Disassembly of section .text:

08000280 <main>:
main():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:67

volatile os_error_t  Error = OS_OK; //cria um handles de erro

int
main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:69

	Asm_LowLevelTickInit(16800); //vamos testar!
 8000286:	f244 10a0 	movw	r0, #16800	; 0x41a0
 800028a:	f000 fb35 	bl	80008f8 <Asm_LowLevelTickInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:71

	Task_InitBlocks();
 800028e:	f000 fb5d 	bl	800094c <Task_InitBlocks>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:73

	Task_Create(&TaskTry, &TaskTryStack, 0 , &Try, sizeof(Try));
 8000292:	f04f 0307 	mov.w	r3, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	f240 405d 	movw	r0, #1117	; 0x45d
 800029c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002a0:	f240 0174 	movw	r1, #116	; 0x74
 80002a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002a8:	f04f 0200 	mov.w	r2, #0
 80002ac:	f240 0300 	movw	r3, #0
 80002b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b4:	f000 fb58 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:74
	Task_Create(&TaskTry2, &TaskTryStack2, 1 , &Try2, sizeof(Try2));
 80002b8:	f04f 0308 	mov.w	r3, #8
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	f240 40b9 	movw	r0, #1209	; 0x4b9
 80002c2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002c6:	f240 4174 	movw	r1, #1140	; 0x474
 80002ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002ce:	f04f 0201 	mov.w	r2, #1
 80002d2:	f240 0308 	movw	r3, #8
 80002d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002da:	f000 fb45 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:75
	Task_Create(&TaskTry3, &TaskTryStack3, 3 , &Try3, sizeof(Try2));
 80002de:	f04f 0308 	mov.w	r3, #8
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	f240 5015 	movw	r0, #1301	; 0x515
 80002e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002ec:	f240 6174 	movw	r1, #1652	; 0x674
 80002f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002f4:	f04f 0203 	mov.w	r2, #3
 80002f8:	f240 0310 	movw	r3, #16
 80002fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000300:	f000 fb32 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:76
	Task_Create(&TaskTry4, &TaskTryStack4, 9 , &Try4, sizeof(Try2));
 8000304:	f04f 0308 	mov.w	r3, #8
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	f240 5041 	movw	r0, #1345	; 0x541
 800030e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000312:	f240 5174 	movw	r1, #1396	; 0x574
 8000316:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800031a:	f04f 0209 	mov.w	r2, #9
 800031e:	f240 0318 	movw	r3, #24
 8000322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000326:	f000 fb1f 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:77
	Task_Create(&TaskTry5, &TaskTryStack5, 7 , &Try5, sizeof(Try2));
 800032a:	f04f 0308 	mov.w	r3, #8
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	f240 506d 	movw	r0, #1389	; 0x56d
 8000334:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000338:	f240 7174 	movw	r1, #1908	; 0x774
 800033c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000340:	f04f 0207 	mov.w	r2, #7
 8000344:	f240 0320 	movw	r3, #32
 8000348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800034c:	f000 fb0c 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:78
	Task_Create(&TaskTry6, &TaskTryStack6, 2 , &Try6, sizeof(Try2));
 8000350:	f04f 0308 	mov.w	r3, #8
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	f240 5099 	movw	r0, #1433	; 0x599
 800035a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800035e:	f240 2174 	movw	r1, #628	; 0x274
 8000362:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000366:	f04f 0202 	mov.w	r2, #2
 800036a:	f240 0328 	movw	r3, #40	; 0x28
 800036e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000372:	f000 faf9 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:79
	Task_Create(&TaskTry7, &TaskTryStack7, 12 , &Try7, sizeof(Try2));
 8000376:	f04f 0308 	mov.w	r3, #8
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	f240 50c5 	movw	r0, #1477	; 0x5c5
 8000380:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000384:	f240 3174 	movw	r1, #884	; 0x374
 8000388:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800038c:	f04f 020c 	mov.w	r2, #12
 8000390:	f240 0330 	movw	r3, #48	; 0x30
 8000394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000398:	f000 fae6 	bl	8000968 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:81

	TestTCB	   = Task_Query(Task_GetID(&Try, sizeof(Try)));
 800039c:	f240 0000 	movw	r0, #0
 80003a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003a4:	f04f 0107 	mov.w	r1, #7
 80003a8:	f000 fbbe 	bl	8000b28 <Task_GetID>
 80003ac:	4603      	mov	r3, r0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fc0a 	bl	8000bc8 <Task_Query>
 80003b4:	4602      	mov	r2, r0
 80003b6:	f240 0338 	movw	r3, #56	; 0x38
 80003ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003be:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:82
	AnotherTCB = Task_Query(Task_GetID(&Try2, sizeof(Try2)));
 80003c0:	f240 0008 	movw	r0, #8
 80003c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003c8:	f04f 0108 	mov.w	r1, #8
 80003cc:	f000 fbac 	bl	8000b28 <Task_GetID>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fbf8 	bl	8000bc8 <Task_Query>
 80003d8:	4602      	mov	r2, r0
 80003da:	f240 033c 	movw	r3, #60	; 0x3c
 80003de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003e2:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:87




	TestTCB->TaskAction(NULL); //executa a task
 80003e4:	f240 0338 	movw	r3, #56	; 0x38
 80003e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:90

	//aqui vai trocar o contexto
	asm volatile
 80003f6:	4c03      	ldr	r4, [pc, #12]	; (8000404 <__fini_array_end+0x184>)
 80003f8:	4d03      	ldr	r5, [pc, #12]	; (8000408 <__fini_array_end+0x188>)
 80003fa:	6820      	ldr	r0, [r4, #0]
 80003fc:	6829      	ldr	r1, [r5, #0]
 80003fe:	f000 fa98 	bl	8000932 <Asm_ContextChange>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:102
	);




	while (1);
 8000402:	e7fe      	b.n	8000402 <main+0x182>
 8000404:	20000038 	.word	0x20000038
 8000408:	2000003c 	.word	0x2000003c

0800040c <TimingDelay_Decrement>:
TimingDelay_Decrement():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:131
 * @param  None
 * @retval None
 */
void
TimingDelay_Decrement(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:132
  if (uwTimingDelay != 0x00)
 8000410:	f240 0340 	movw	r3, #64	; 0x40
 8000414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00b      	beq.n	8000436 <TimingDelay_Decrement+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:134
    {
      uwTimingDelay--;
 800041e:	f240 0340 	movw	r3, #64	; 0x40
 8000422:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800042c:	f240 0340 	movw	r3, #64	; 0x40
 8000430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000434:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:136
    }
}
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:147
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:148
  TimingDelay_Decrement();
 8000440:	f7ff ffe4 	bl	800040c <TimingDelay_Decrement>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:149
}
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop

08000448 <Task_Idle>:
Task_Idle():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:153


void Task_Idle(void *TaskArgs)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:155

}
 8000450:	f107 070c 	add.w	r7, r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop

0800045c <TaskTry>:
TaskTry():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:40
os_stack_t TaskTryStack8[64];
os_taskname_t Try8[8] = {"TaskTry8"};


taskptr_t TaskTry(void *TaskArgs)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:47
	static uint32_t counter1 = 0,
					counter2 = 0,
					counter3 = 0;


	counter1++;
 8000464:	f240 0364 	movw	r3, #100	; 0x64
 8000468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f103 0201 	add.w	r2, r3, #1
 8000472:	f240 0364 	movw	r3, #100	; 0x64
 8000476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:48
	counter2--;
 800047c:	f240 0368 	movw	r3, #104	; 0x68
 8000480:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800048a:	f240 0368 	movw	r3, #104	; 0x68
 800048e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000492:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:49
	counter3++;
 8000494:	f240 036c 	movw	r3, #108	; 0x6c
 8000498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f103 0201 	add.w	r2, r3, #1
 80004a2:	f240 036c 	movw	r3, #108	; 0x6c
 80004a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004aa:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:52


}
 80004ac:	f107 070c 	add.w	r7, r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <TaskTry2>:
TaskTry2():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:55

taskptr_t TaskTry2(void *TaskArgs)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:61
	static uint32_t counter1 = 0,
					counter2 = 0,
					counter3 = 0;


	counter1++;
 80004c0:	f240 0358 	movw	r3, #88	; 0x58
 80004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f103 0201 	add.w	r2, r3, #1
 80004ce:	f240 0358 	movw	r3, #88	; 0x58
 80004d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004d6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:62
	counter2--;
 80004d8:	f240 035c 	movw	r3, #92	; 0x5c
 80004dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80004e6:	f240 035c 	movw	r3, #92	; 0x5c
 80004ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ee:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:63
	counter3++;
 80004f0:	f240 0360 	movw	r3, #96	; 0x60
 80004f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f103 0201 	add.w	r2, r3, #1
 80004fe:	f240 0360 	movw	r3, #96	; 0x60
 8000502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000506:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:64
}
 8000508:	f107 070c 	add.w	r7, r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <TaskTry3>:
TaskTry3():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:68


taskptr_t TaskTry3(void *TaskArgs)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:72

	static uint32_t counter = 0;

	counter++;
 800051c:	f240 0354 	movw	r3, #84	; 0x54
 8000520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f103 0201 	add.w	r2, r3, #1
 800052a:	f240 0354 	movw	r3, #84	; 0x54
 800052e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000532:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:73
}
 8000534:	f107 070c 	add.w	r7, r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <TaskTry4>:
TaskTry4():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:76

taskptr_t TaskTry4(void *TaskArgs)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:80

	static uint32_t counter = 0;

	counter++;
 8000548:	f240 0350 	movw	r3, #80	; 0x50
 800054c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f103 0201 	add.w	r2, r3, #1
 8000556:	f240 0350 	movw	r3, #80	; 0x50
 800055a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800055e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:81
}
 8000560:	f107 070c 	add.w	r7, r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <TaskTry5>:
TaskTry5():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:85


taskptr_t TaskTry5(void *TaskArgs)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:89

	static uint32_t counter = 0;

	counter++;
 8000574:	f240 034c 	movw	r3, #76	; 0x4c
 8000578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f103 0201 	add.w	r2, r3, #1
 8000582:	f240 034c 	movw	r3, #76	; 0x4c
 8000586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:90
}
 800058c:	f107 070c 	add.w	r7, r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <TaskTry6>:
TaskTry6():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:93

taskptr_t TaskTry6(void *TaskArgs)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:97

	static uint32_t counter = 0;

	counter++;
 80005a0:	f240 0348 	movw	r3, #72	; 0x48
 80005a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f103 0201 	add.w	r2, r3, #1
 80005ae:	f240 0348 	movw	r3, #72	; 0x48
 80005b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005b6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:98
}
 80005b8:	f107 070c 	add.w	r7, r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <TaskTry7>:
TaskTry7():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:102


taskptr_t TaskTry7(void *TaskArgs)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:106

	static uint32_t counter = 0;

	counter++;
 80005cc:	f240 0344 	movw	r3, #68	; 0x44
 80005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f103 0201 	add.w	r2, r3, #1
 80005da:	f240 0344 	movw	r3, #68	; 0x44
 80005de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e2:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:107
}
 80005e4:	f107 070c 	add.w	r7, r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__libc_init_array>:
__libc_init_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 80005f6:	f240 2280 	movw	r2, #640	; 0x280
 80005fa:	f6c0 0200 	movt	r2, #2048	; 0x800
 80005fe:	f240 237c 	movw	r3, #636	; 0x27c
 8000602:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800060c:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 800060e:	f04f 0300 	mov.w	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	e00b      	b.n	800062e <__libc_init_array+0x3e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:185
    __preinit_array_start[i]();
 8000616:	f240 237c 	movw	r3, #636	; 0x27c
 800061a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000624:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f103 0301 	add.w	r3, r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d3ef      	bcc.n	8000616 <__libc_init_array+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 8000636:	f240 2280 	movw	r2, #640	; 0x280
 800063a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800063e:	f240 2380 	movw	r3, #640	; 0x280
 8000642:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800064c:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	e00b      	b.n	800066e <__libc_init_array+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:194
    __init_array_start[i]();
 8000656:	f240 2380 	movw	r3, #640	; 0x280
 800065a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000664:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f103 0301 	add.w	r3, r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3ef      	bcc.n	8000656 <__libc_init_array+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 8000676:	f107 0708 	add.w	r7, r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop

08000680 <__libc_fini_array>:
__libc_fini_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 8000686:	f240 2280 	movw	r2, #640	; 0x280
 800068a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800068e:	f240 2380 	movw	r3, #640	; 0x280
 8000692:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800069c:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e00d      	b.n	80006c0 <__libc_fini_array+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:206
    __fini_array_start[i - 1]();
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80006aa:	f240 2380 	movw	r3, #640	; 0x280
 80006ae:	f6c0 0300 	movt	r3, #2048	; 0x800
 80006b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006b6:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1ee      	bne.n	80006a4 <__libc_fini_array+0x24>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 80006c6:	f107 0708 	add.w	r7, r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop

080006d0 <_exit>:
_exit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:47
#if defined(DEBUG)
  while(1)
  ;
 80006d8:	e7fe      	b.n	80006d8 <_exit+0x8>
 80006da:	bf00      	nop

080006dc <SystemInit>:
SystemInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:338
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:345
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006f0:	6812      	ldr	r2, [r2, #0]
 80006f2:	f042 0201 	orr.w	r2, r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:348

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:351

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000706:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800070a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800070e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000712:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800071c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000720:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:354

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800072a:	f243 0210 	movw	r2, #12304	; 0x3010
 800072e:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000732:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:357

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000734:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000738:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800073c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000740:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800074a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:360

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800074c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000750:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:368
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800075a:	f000 f809 	bl	8000770 <SetSysClock>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:374

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800075e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000762:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800076a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:376
#endif
}
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop

08000770 <SetSysClock>:
SetSysClock():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:471
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:475
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000776:	f04f 0300 	mov.w	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:478
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000782:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000786:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800078a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800078e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000798:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:483
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800079a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800079e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a8:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:484
    StartUpCounter++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f103 0301 	add.w	r3, r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:485
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <SetSysClock+0x50>
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80007be:	d1ec      	bne.n	800079a <SetSysClock+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:487

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d003      	beq.n	80007da <SetSysClock+0x6a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:489
  {
    HSEStatus = (uint32_t)0x01;
 80007d2:	f04f 0301 	mov.w	r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	e002      	b.n	80007e0 <SetSysClock+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:493
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007da:	f04f 0300 	mov.w	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:496
  }

  if (HSEStatus == (uint32_t)0x01)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	f040 8082 	bne.w	80008ec <SetSysClock+0x17c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:499
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80007fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007fe:	641a      	str	r2, [r3, #64]	; 0x40
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:500
    PWR->CR |= PWR_CR_VOS;
 8000800:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000804:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000808:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800080c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000816:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:503

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000818:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800081c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000820:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000824:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000828:	6892      	ldr	r2, [r2, #8]
 800082a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:507

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800082c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000830:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000834:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000838:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800083c:	6892      	ldr	r2, [r2, #8]
 800083e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000842:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:510
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000844:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000848:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800084c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000850:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000854:	6892      	ldr	r2, [r2, #8]
 8000856:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800085a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:522
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800085c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000860:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000864:	f245 4219 	movw	r2, #21529	; 0x5419
 8000868:	f2c0 7240 	movt	r2, #1856	; 0x740
 800086c:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:526
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800086e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000872:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000876:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800087a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000884:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:529

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000886:	bf00      	nop
 8000888:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800088c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f6      	beq.n	8000888 <SetSysClock+0x118>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:549
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800089a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800089e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008a2:	f240 7205 	movw	r2, #1797	; 0x705
 80008a6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:558
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80008a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80008b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008b8:	6892      	ldr	r2, [r2, #8]
 80008ba:	f022 0203 	bic.w	r2, r2, #3
 80008be:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:559
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80008c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80008cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008d0:	6892      	ldr	r2, [r2, #8]
 80008d2:	f042 0202 	orr.w	r2, r2, #2
 80008d6:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:562

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80008d8:	bf00      	nop
 80008da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f003 030c 	and.w	r3, r3, #12
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	d1f6      	bne.n	80008da <SetSysClock+0x16a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:571
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80008ec:	f107 070c 	add.w	r7, r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <Asm_LowLevelTickInit>:
Asm_LowLevelTickInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:37
@
@
@************************************************************************
Asm_LowLevelTickInit:

		PUSH {R4,R5 - R11} @;save context
 80008f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:40


		MOV  R1,R0 	 			@;Copies the desired tick
 80008fc:	4601      	mov	r1, r0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:41
		PUSH {R1}
 80008fe:	b402      	push	{r1}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:42
		MRS	 R2,MSP				@;save current sp
 8000900:	f3ef 8208 	mrs	r2, MSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:44

		MOV  R0, #0x00000002 	@;Control, use PSP
 8000904:	f04f 0002 	mov.w	r0, #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:45
		MSR  CONTROL, R0		@;Write the new value
 8000908:	f380 8814 	msr	CONTROL, r0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:46
		ISB						@;recommended
 800090c:	f3bf 8f6f 	isb	sy
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:48

		MSR  PSP,R2				@load PSP with current MSP
 8000910:	f382 8809 	msr	PSP, r2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:50

		LDR  R0, =0xE000E010    @;Load the systick control register contents
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <Asm_ContextChange+0x16>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:51
		MOV  R1, #0x00000000	@;
 8000916:	f04f 0100 	mov.w	r1, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:52
		STR	 R1, [R0], #0x04	@;
 800091a:	f840 1b04 	str.w	r1, [r0], #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:53
		POP  {R1}				@;retrieve Tick Value
 800091e:	bc02      	pop	{r1}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
		STR  R1, [R0]			@;Write the new value for load count
 8000920:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:55
		SUBS R0, #0x04			@;Pints again to systick control gerister
 8000922:	3804      	subs	r0, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:58
								@;
								@;
		MOV  R1, #0x00000003    @;Enable systick timer and its interrupt
 8000924:	f04f 0103 	mov.w	r1, #3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:59
		STR  R1, [R0],#0x04 	@;Write back on the systick register, and points to
 8000928:	f840 1b04 	str.w	r1, [r0], #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:62
							    @;Load register
								@;
		POP	{R4,R5 - R11}		@;
 800092c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:63
		BX	LR					@;Return from sub
 8000930:	4770      	bx	lr

08000932 <Asm_ContextChange>:
Asm_ContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:81
@;
@;
@;************************************************************************
Asm_ContextChange:

		MRS		R2, PSP				@;Get the current SP
 8000932:	f3ef 8209 	mrs	r2, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:82
		STMDB	R2!,{R4 - R11}		@;save R4 - R11 on the current stack
 8000936:	e922 0ff0 	stmdb	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:84
									@;
		STR		R2,[R0,#0x00000014] @;Save the current stack pointer
 800093a:	6142      	str	r2, [r0, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:86
									@;
		LDR		R2,[R1,#0x00000014]	@;Get the new stack pointer
 800093c:	694a      	ldr	r2, [r1, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:88
									@;
		LDMIA	R2!,{R4 - R11}		@;Change the context
 800093e:	e8b2 0ff0 	ldmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:89
		MSR		PSP , R2			@;write the new stackpointer
 8000942:	f382 8809 	msr	PSP, r2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:91

		BX		LR					@;Return from sub
 8000946:	4770      	bx	lr
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:50
		MSR  CONTROL, R0		@;Write the new value
		ISB						@;recommended

		MSR  PSP,R2				@load PSP with current MSP

		LDR  R0, =0xE000E010    @;Load the systick control register contents
 8000948:	e000e010 	.word	0xe000e010

0800094c <Task_InitBlocks>:
Task_InitBlocks():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:75
 	 return:	TODO


 ************************************************************************/
void Task_InitBlocks(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:77
	//fill with zeros all TCBS!
	memset(&TaskBlockList, NULL, sizeof(TaskBlockList));
 8000950:	f640 1074 	movw	r0, #2420	; 0x974
 8000954:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000958:	f04f 0100 	mov.w	r1, #0
 800095c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000960:	f000 f956 	bl	8000c10 <memset>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:78
}
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop

08000968 <Task_Create>:
Task_Create():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:94


 ************************************************************************/
os_error_t 	Task_Create(taskptr_t (*TaskAction), os_stack_t *TaskStack,
						uint8_t TaskPriority, os_taskname_t *TaskName, uint8_t NameSize)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:95
	taskTCB_t *TaskList 		= &TaskBlockList,
 8000978:	f640 1374 	movw	r3, #2420	; 0x974
 800097c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000980:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:96
			  *TaskToBeLinked	= &TaskBlockList; //points to tasklist
 8000982:	f640 1374 	movw	r3, #2420	; 0x974
 8000986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800098a:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:98

	uint8_t    LoopCntr = 0; //simple loop coounter
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	76fb      	strb	r3, [r7, #27]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:101

	//check for size of taskname:
	if(NameSize > 32)
 8000992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000996:	2b20      	cmp	r3, #32
 8000998:	d902      	bls.n	80009a0 <Task_Create+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:103
	{
		return(OS_NAME_TOO_LONG);
 800099a:	f04f 0305 	mov.w	r3, #5
 800099e:	e0bb      	b.n	8000b18 <Task_Create+0x1b0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:107
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	76fb      	strb	r3, [r7, #27]
 80009a6:	e043      	b.n	8000a30 <Task_Create+0xc8>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:110
	{
		//check if current TCB is empty
		if(EMPTY == TaskList->EmptyTCB)
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d128      	bne.n	8000a02 <Task_Create+0x9a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:113
		{
			//fill te task TCB
			TaskList->TaskAction = TaskAction; //the task method
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:114
			TaskList->TaskStack  = TaskStack; //the task stack
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	615a      	str	r2, [r3, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:117

			//check for priority given
			if(TaskPriority < MAX_PRIORITY || TaskPriority > LESS_PRIORITY)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b1f      	cmp	r3, #31
 80009c0:	d902      	bls.n	80009c8 <Task_Create+0x60>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:120
			{
				//return the system error
				return(OS_PRIORITY_OUT_OF_RANGE);
 80009c2:	f04f 0303 	mov.w	r3, #3
 80009c6:	e0a7      	b.n	8000b18 <Task_Create+0x1b0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:122
			}
			TaskList->TaskPriority = TaskPriority & 0x1F; //the task priority
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:123
			TaskList->TaskName = TaskName; 				  //gives name for task
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:124
			TaskList->TaskID   = LoopCntr;				  //gives an ID for Task
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	7efa      	ldrb	r2, [r7, #27]
 80009de:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:125
			TaskList->TaskElapsedTime = 0;                //zero the elapsed time
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:126
			TaskList->TaskDelayed = OS_TICKS;			  //byDefault the task is executed
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f04f 02e8 	mov.w	r2, #232	; 0xe8
 80009ee:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:128
														  //after 1 OS_TICKS
			TaskList->TaskState   = TASK_READY;			  //task initial state
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	72da      	strb	r2, [r3, #11]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:130

			TaskList->EmptyTCB    =  FILLED;				  //occupies the TCB
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80009fe:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:134



			break; //break the loop
 8000a00:	e019      	b.n	8000a36 <Task_Create+0xce>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:139

		}
		else
		{
			TaskList = &TaskBlockList[LoopCntr]; //if not check for next TCB
 8000a02:	7efa      	ldrb	r2, [r7, #27]
 8000a04:	4613      	mov	r3, r2
 8000a06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a10:	f640 1274 	movw	r2, #2420	; 0x974
 8000a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a18:	189b      	adds	r3, r3, r2
 8000a1a:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:140
			if(NUMBER_OF_TASK - 1  <  LoopCntr)
 8000a1c:	7efb      	ldrb	r3, [r7, #27]
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <Task_Create+0xc0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:142
			{
				return(OS_TASKLIST_FULL);
 8000a22:	f04f 0302 	mov.w	r3, #2
 8000a26:	e077      	b.n	8000b18 <Task_Create+0x1b0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:107
	{
		return(OS_NAME_TOO_LONG);
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8000a28:	7efb      	ldrb	r3, [r7, #27]
 8000a2a:	f103 0301 	add.w	r3, r3, #1
 8000a2e:	76fb      	strb	r3, [r7, #27]
 8000a30:	7efb      	ldrb	r3, [r7, #27]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d9b8      	bls.n	80009a8 <Task_Create+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:149
		}

	}
	//after fill the taskblock is time to insert it on the
	//tasklist linked list
	TaskList = &TaskBlockList[NUMBER_OF_TASK]; //first points to the TCB Head
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <Task_Create+0x1bc>)
 8000a38:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:152

	//check if Idle TCB was already initialized:
	if(EMPTY == TaskList->EmptyTCB)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d146      	bne.n	8000ad0 <Task_Create+0x168>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:155
	{
		//if not, initialize it.
		TaskList->TaskAction = (taskptr_t *)& Task_Idle; //assign the idle task
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	f240 4349 	movw	r3, #1097	; 0x449
 8000a48:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a4c:	6193      	str	r3, [r2, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:156
		TaskList->TaskStack  = &IdleTaskStack;			//assign a stack
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	f640 0374 	movw	r3, #2164	; 0x874
 8000a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a58:	6153      	str	r3, [r2, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:157
		TaskList->TaskPriority = LESS_PRIORITY + 1; 	// Idletask has the least priority
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	f04f 0220 	mov.w	r2, #32
 8000a60:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:158
		TaskList->TaskName = (os_taskname_t *) &IdleName;//gives name for task
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	f640 533c 	movw	r3, #3388	; 0xd3c
 8000a68:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a6c:	6113      	str	r3, [r2, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:159
		TaskList->TaskID   = NUMBER_OF_TASK + 1;		 //gives an ID for Task
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	f04f 0208 	mov.w	r2, #8
 8000a74:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:160
		TaskList->TaskElapsedTime = 0;                //zero the elapsed time
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	f04f 0200 	mov.w	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:161
		TaskList->TaskTime 		  = OS_TICKS;		  //byDefault the task time slot offset
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a84:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:163
													  // is 1 Tick
		TaskList->TaskState   = TASK_READY;			  //task initial state
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	72da      	strb	r2, [r3, #11]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:165

		TaskList->EmptyTCB    =  FILLED;				  //occupies the TCB
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000a94:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:167

		TaskList->NextTask    = &TaskBlockList[LoopCntr]; //aditionally attach the desired task on the linked list
 8000a96:	7efa      	ldrb	r2, [r7, #27]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a9e:	189b      	adds	r3, r3, r2
 8000aa0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000aa4:	f640 1274 	movw	r2, #2420	; 0x974
 8000aa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000aac:	189a      	adds	r2, r3, r2
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:169

		TaskList = TaskList->NextTask;
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:171

		TaskList->PrevTask = &TaskBlockList[NUMBER_OF_TASK];
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <Task_Create+0x1bc>)
 8000abc:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:173

		TaskList->NextTask = END_LIST; //marks the end of list
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
 8000ac6:	e025      	b.n	8000b14 <Task_Create+0x1ac>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:181
	else	//else only uses it as a start of the linked list
	{
		while(END_LIST != TaskList->NextTask)
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	e000      	b.n	8000ad2 <Task_Create+0x16a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:178
		TaskList->NextTask = END_LIST; //marks the end of list

	}
	else	//else only uses it as a start of the linked list
	{
		while(END_LIST != TaskList->NextTask)
 8000ad0:	bf00      	nop
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1f6      	bne.n	8000ac8 <Task_Create+0x160>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:184
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
		}
		//when the end of list is found
		TaskList->NextTask = &TaskBlockList[LoopCntr - 1]; //attach the new task in the linked list
 8000ada:	7efb      	ldrb	r3, [r7, #27]
 8000adc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000aec:	f640 1274 	movw	r2, #2420	; 0x974
 8000af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000af4:	189a      	adds	r2, r3, r2
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:185
		TaskToBeLinked     = TaskList->NextTask;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:188

		//attach the previous task
		TaskToBeLinked->PrevTask = TaskList;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:191

		//marks the new end of list
		TaskList = TaskList->NextTask;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:193

		TaskList->NextTask = END_LIST;
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f04f 0200 	mov.w	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:197

	}

	return(OS_OK);
 8000b14:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:198
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000a70 	.word	0x20000a70

08000b28 <Task_GetID>:
Task_GetID():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:288
 	 return:	TODO


 ************************************************************************/
os_taskID_t Task_GetID(os_taskname_t *TaskName, uint8_t NameSize)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:289
	taskTCB_t *TaskList = &TaskBlockList[NUMBER_OF_TASK]; //a pointer to the head of tasklist
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <Task_GetID+0x9c>)
 8000b36:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:291

	uint8_t LoopCntr = 0;									  //a loop counter
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	74fb      	strb	r3, [r7, #19]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:293

	os_taskname_t *ReferenceName = NULL; 				 //Reference Name
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:296

	//check name size:
	if(NameSize > 32)
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2b20      	cmp	r3, #32
 8000b48:	d902      	bls.n	8000b50 <Task_GetID+0x28>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:298
	{
		return(OS_NAME_TOO_LONG);
 8000b4a:	f04f 0305 	mov.w	r3, #5
 8000b4e:	e033      	b.n	8000bb8 <Task_GetID+0x90>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:302
	}

	//The current TCB is the idle block, well points to next:
	TaskList = TaskList->NextTask;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:305

	//start the loopcounter:
	LoopCntr = 0;
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	74fb      	strb	r3, [r7, #19]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:308

	//receive the poiter to name:
	ReferenceName = TaskList->TaskName;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:315
	//go through the tasklist:
	do
	{

		//compare their names
		while(NameSize >= LoopCntr)
 8000b62:	e01a      	b.n	8000b9a <Task_GetID+0x72>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:317
		{
			if(TaskName == ReferenceName)
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d10c      	bne.n	8000b86 <Task_GetID+0x5e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:320
			{
				//test the next character
				TaskName++;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f103 0301 	add.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:321
				ReferenceName++;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f103 0301 	add.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:324

				//increments the loop counter:
				LoopCntr++;
 8000b7c:	7cfb      	ldrb	r3, [r7, #19]
 8000b7e:	f103 0301 	add.w	r3, r3, #1
 8000b82:	74fb      	strb	r3, [r7, #19]
 8000b84:	e009      	b.n	8000b9a <Task_GetID+0x72>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:330

			}
			else
			{
				//well, try the next task
				TaskList = TaskList->NextTask;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:332
				//restarts the counter:
				LoopCntr = 0;
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	74fb      	strb	r3, [r7, #19]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:334
				//re-initialize the name pointer:
				ReferenceName = TaskList->TaskName;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:337

				//breaks the loop
				break;
 8000b98:	e003      	b.n	8000ba2 <Task_GetID+0x7a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:315
	//go through the tasklist:
	do
	{

		//compare their names
		while(NameSize >= LoopCntr)
 8000b9a:	78fa      	ldrb	r2, [r7, #3]
 8000b9c:	7cfb      	ldrb	r3, [r7, #19]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d2e0      	bcs.n	8000b64 <Task_GetID+0x3c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:343
			}

		}

		//check if the compare waas succefull:
		if(0 != LoopCntr)
 8000ba2:	7cfb      	ldrb	r3, [r7, #19]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <Task_GetID+0x86>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:346
		{
			//yep, then read the task ID of this TCB and return it:
			return(TaskList->TaskID);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	7a1b      	ldrb	r3, [r3, #8]
 8000bac:	e004      	b.n	8000bb8 <Task_GetID+0x90>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:351
		}

		//else restarts a new loop.

	}while(END_LIST != TaskList);
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f2      	bne.n	8000b9a <Task_GetID+0x72>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:354

	//if the task doesnt exist return a undefined ID
	return(UNDEFINED_ID);
 8000bb4:	f04f 0309 	mov.w	r3, #9
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:356

}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f107 071c 	add.w	r7, r7, #28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000a70 	.word	0x20000a70

08000bc8 <Task_Query>:
Task_Query():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:370
 	 return:	TODO


 ************************************************************************/
taskTCB_t* 	Task_Query(os_taskID_t TaskID)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:371
	taskTCB_t *TaskList = &TaskBlockList[NUMBER_OF_TASK]; 	//a TCB that points to a registered tasklist
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <Task_Query+0x44>)
 8000bd4:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:374

	//check for a undefined ID:
	if(UNDEFINED_ID == TaskID)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b09      	cmp	r3, #9
 8000bda:	d102      	bne.n	8000be2 <Task_Query+0x1a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:376
	{
		return(NULL); //returns a null pointer
 8000bdc:	f04f 0300 	mov.w	r3, #0
 8000be0:	e00e      	b.n	8000c00 <Task_Query+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:383

	//the alghoritm i very simple:
	do
	{
		//go trhough tasklist and compares by ID:
		if(TaskID == TaskList->TaskID)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	7a1b      	ldrb	r3, [r3, #8]
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d101      	bne.n	8000bf0 <Task_Query+0x28>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:386
		{
			//if the IDs was matched, return this TCB
			return (TaskList);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	e007      	b.n	8000c00 <Task_Query+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:390
		}

		//if not, go to next task
		TaskList = TaskList->NextTask;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:391
	}while(END_LIST != TaskList);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f2      	bne.n	8000be2 <Task_Query+0x1a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:394

	//if the ID is not match to any registered task, returns a null pointer
	return(NULL);
 8000bfc:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:395
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	f107 0714 	add.w	r7, r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000a70 	.word	0x20000a70

08000c10 <memset>:
memset():
 8000c10:	b4f0      	push	{r4, r5, r6, r7}
 8000c12:	0784      	lsls	r4, r0, #30
 8000c14:	4603      	mov	r3, r0
 8000c16:	f000 808e 	beq.w	8000d36 <memset+0x126>
 8000c1a:	1e54      	subs	r4, r2, #1
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f000 8088 	beq.w	8000d32 <memset+0x122>
 8000c22:	07e5      	lsls	r5, r4, #31
 8000c24:	b2ce      	uxtb	r6, r1
 8000c26:	d411      	bmi.n	8000c4c <memset+0x3c>
 8000c28:	461a      	mov	r2, r3
 8000c2a:	1e67      	subs	r7, r4, #1
 8000c2c:	f802 6b01 	strb.w	r6, [r2], #1
 8000c30:	4613      	mov	r3, r2
 8000c32:	4615      	mov	r5, r2
 8000c34:	0792      	lsls	r2, r2, #30
 8000c36:	d00f      	beq.n	8000c58 <memset+0x48>
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d07a      	beq.n	8000d32 <memset+0x122>
 8000c3c:	f803 6b01 	strb.w	r6, [r3], #1
 8000c40:	079a      	lsls	r2, r3, #30
 8000c42:	463c      	mov	r4, r7
 8000c44:	461d      	mov	r5, r3
 8000c46:	d007      	beq.n	8000c58 <memset+0x48>
 8000c48:	3c01      	subs	r4, #1
 8000c4a:	e7ed      	b.n	8000c28 <memset+0x18>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f803 6b01 	strb.w	r6, [r3], #1
 8000c52:	079a      	lsls	r2, r3, #30
 8000c54:	461d      	mov	r5, r3
 8000c56:	d1f7      	bne.n	8000c48 <memset+0x38>
 8000c58:	2c03      	cmp	r4, #3
 8000c5a:	d952      	bls.n	8000d02 <memset+0xf2>
 8000c5c:	b2ce      	uxtb	r6, r1
 8000c5e:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8000c62:	2c0f      	cmp	r4, #15
 8000c64:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8000c68:	d92d      	bls.n	8000cc6 <memset+0xb6>
 8000c6a:	f1a4 0210 	sub.w	r2, r4, #16
 8000c6e:	4617      	mov	r7, r2
 8000c70:	2f0f      	cmp	r7, #15
 8000c72:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000c76:	602b      	str	r3, [r5, #0]
 8000c78:	606b      	str	r3, [r5, #4]
 8000c7a:	60ab      	str	r3, [r5, #8]
 8000c7c:	60eb      	str	r3, [r5, #12]
 8000c7e:	f105 0210 	add.w	r2, r5, #16
 8000c82:	d916      	bls.n	8000cb2 <memset+0xa2>
 8000c84:	b13e      	cbz	r6, 8000c96 <memset+0x86>
 8000c86:	3f10      	subs	r7, #16
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	6053      	str	r3, [r2, #4]
 8000c8c:	6093      	str	r3, [r2, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
 8000c90:	3210      	adds	r2, #16
 8000c92:	2f0f      	cmp	r7, #15
 8000c94:	d90d      	bls.n	8000cb2 <memset+0xa2>
 8000c96:	3f20      	subs	r7, #32
 8000c98:	f102 0610 	add.w	r6, r2, #16
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	6053      	str	r3, [r2, #4]
 8000ca0:	6093      	str	r3, [r2, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
 8000ca4:	6113      	str	r3, [r2, #16]
 8000ca6:	6153      	str	r3, [r2, #20]
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	61d3      	str	r3, [r2, #28]
 8000cac:	3220      	adds	r2, #32
 8000cae:	2f0f      	cmp	r7, #15
 8000cb0:	d8f1      	bhi.n	8000c96 <memset+0x86>
 8000cb2:	f1a4 0210 	sub.w	r2, r4, #16
 8000cb6:	f022 020f 	bic.w	r2, r2, #15
 8000cba:	f004 040f 	and.w	r4, r4, #15
 8000cbe:	3210      	adds	r2, #16
 8000cc0:	2c03      	cmp	r4, #3
 8000cc2:	4415      	add	r5, r2
 8000cc4:	d91d      	bls.n	8000d02 <memset+0xf2>
 8000cc6:	1f27      	subs	r7, r4, #4
 8000cc8:	463e      	mov	r6, r7
 8000cca:	462a      	mov	r2, r5
 8000ccc:	2e03      	cmp	r6, #3
 8000cce:	f842 3b04 	str.w	r3, [r2], #4
 8000cd2:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8000cd6:	d90d      	bls.n	8000cf4 <memset+0xe4>
 8000cd8:	b127      	cbz	r7, 8000ce4 <memset+0xd4>
 8000cda:	3e04      	subs	r6, #4
 8000cdc:	2e03      	cmp	r6, #3
 8000cde:	f842 3b04 	str.w	r3, [r2], #4
 8000ce2:	d907      	bls.n	8000cf4 <memset+0xe4>
 8000ce4:	4617      	mov	r7, r2
 8000ce6:	3e08      	subs	r6, #8
 8000ce8:	f847 3b04 	str.w	r3, [r7], #4
 8000cec:	6053      	str	r3, [r2, #4]
 8000cee:	1d3a      	adds	r2, r7, #4
 8000cf0:	2e03      	cmp	r6, #3
 8000cf2:	d8f7      	bhi.n	8000ce4 <memset+0xd4>
 8000cf4:	1f23      	subs	r3, r4, #4
 8000cf6:	f023 0203 	bic.w	r2, r3, #3
 8000cfa:	1d13      	adds	r3, r2, #4
 8000cfc:	f004 0403 	and.w	r4, r4, #3
 8000d00:	18ed      	adds	r5, r5, r3
 8000d02:	b1b4      	cbz	r4, 8000d32 <memset+0x122>
 8000d04:	462b      	mov	r3, r5
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	f803 1b01 	strb.w	r1, [r3], #1
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	43ed      	mvns	r5, r5
 8000d10:	1962      	adds	r2, r4, r5
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	f002 0501 	and.w	r5, r2, #1
 8000d18:	d00b      	beq.n	8000d32 <memset+0x122>
 8000d1a:	b11d      	cbz	r5, 8000d24 <memset+0x114>
 8000d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8000d20:	42a3      	cmp	r3, r4
 8000d22:	d006      	beq.n	8000d32 <memset+0x122>
 8000d24:	461a      	mov	r2, r3
 8000d26:	f802 1b01 	strb.w	r1, [r2], #1
 8000d2a:	7059      	strb	r1, [r3, #1]
 8000d2c:	1c53      	adds	r3, r2, #1
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	d1f8      	bne.n	8000d24 <memset+0x114>
 8000d32:	bcf0      	pop	{r4, r5, r6, r7}
 8000d34:	4770      	bx	lr
 8000d36:	4605      	mov	r5, r0
 8000d38:	4614      	mov	r4, r2
 8000d3a:	e78d      	b.n	8000c58 <memset+0x48>

08000d3c <IdleName>:
 8000d3c:	6154 6b73 6449 656c                         TaskIdle
