
uLipeRTOS.elf:     file format elf32-littlearm
uLipeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x000013a0 memsz 0x000013a0 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x080013a0 align 2**15
         filesz 0x0000004c memsz 0x00000d40 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000284  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  08000284  08000284  00008284  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00001118  08000288  08000288  00008288  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         0000004c  20000000  080013a0  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000bf4  2000004c  080013ec  0001004c  2**2  ALLOC
  5 ._check_stack 00000100  20000c40  08001fe0  0001004c  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  0001004c  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  000100bc  2**0  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  000100f0  2**3  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001de8  00000000  00000000  00010378  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000093c  00000000  00000000  00012160  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000021e8  00000000  00000000  00012a9c  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000678  00000000  00000000  00014c84  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000602cc  00000000  00000000  000152fc  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ab6  00000000  00000000  000755c8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e8  00000000  00000000  0007607e  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f646  00000000  00000000  00076266  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000284 l    d  ._inits	00000000 ._inits
08000288 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
2000004c l    d  .bss	00000000 .bss
20000c40 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tasks.c
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
08000638 l     F .text	00000186 SetSysClock
08000856 l       .text	00000000 FIRST_CHANGE
08000876 l       .text	00000000 SECOND_CHANGE
08000848 l       .text	00000000 NO_SAVE
00000000 l    df *ABS*	00000000 uLipe_Core.c
00000000 l    df *ABS*	00000000 uLipe_Task.c
00000000 l    df *ABS*	00000000 memset.c
08000288 l       ._inits	00000000 __fini_array_end
08000288 l       ._inits	00000000 __fini_array_start
08000288 l       ._inits	00000000 __init_array_end
08000288 l       ._inits	00000000 __preinit_array_end
08000288 l       ._inits	00000000 __init_array_start
08000284 l       ._inits	00000000 __preinit_array_start
0800022c  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
0800022c  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI2_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08000428 g     F .text	00000018 TaskTry3
0800026c  w    F .isr_vector	00000006 DebugMon_Handler
08000284 g     O ._inits	00000004 p_system_init
20000000 g     O .data	00000007 Try
20000000 g       .data	00000000 __data_start__
2001fc00 g       *ABS*	00000000 _Heap_Limit
20000160 g     O .bss	00000100 TaskTryStack8
0800022c  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
0800023c  w    F .isr_vector	00000010 HardFault_Handler
0800022c  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
08000470 g     F .text	00000018 TaskTry6
2000004c g     O .bss	00000004 CurrentTaskBlock
0800027c  w    F .isr_vector	00000006 SysTick_Handler
08000c18 g     F .text	00000024 uLipe_EmptyQueue
0800022c  w    F .isr_vector	00000006 PVD_IRQHandler
0800022c  w    F .isr_vector	00000006 SDIO_IRQHandler
0800022c  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
00000400 g       *ABS*	00000000 _Main_Stack_Size
080013a0 g       *ABS*	00000000 _sidata
08000812 g     F .text	00000006 PendSV_Handler
08000234  w    F .isr_vector	00000006 NMI_Handler
080013a0 g       *ABS*	00000000 __exidx_end
080001d4 g     F .isr_vector	00000056 system_init
0800022c  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI3_IRQHandler
08001030 g     F .text	00000204 Task_Create
080007e6 g     F .text	00000000 Asm_CriticalIn
08000978 g     F .text	000001ec uLipe_TaskQueueInit
20000c40 g       ._check_stack	00000000 _Heap_Begin
0800022c  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
080013a0 g       *ABS*	00000000 _etext
2000004c g       .bss	00000000 _sbss
20000960 g     O .bss	0000000c TaskMainCtl
2001fc00 g       *ABS*	00000000 __Main_Stack_Limit
0800022c  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
08000ffc g     F .text	00000016 uLipe_GetCurrentTick
20000260 g     O .bss	00000100 TaskTryStack6
20000018 g     O .data	00000008 Try4
0800022c  w    F .isr_vector	00000006 EXTI0_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000c40 g       ._check_stack	00000000 _noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
0800022c  w    F .isr_vector	00000006 FPU_IRQHandler
2000005c g     O .bss	00000001 ID
0800022c  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
0800025c  w    F .isr_vector	00000006 UsageFault_Handler
0800022c  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
20000038 g     O .data	00000008 Try8
0800022c  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
2000004c g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
0800022c  w    F .isr_vector	00000006 SPI1_IRQHandler
20000054 g     O .bss	00000004 TickCounter
200009d8 g     O .bss	00000100 IdleTaskStack
20000360 g     O .bss	00000100 TaskTryStack7
0800022c  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
0800022c  w    F .isr_vector	00000006 DCMI_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20000010 g     O .data	00000008 Try3
08001234 g     F .text	00000014 Task_GetList
080007ee g     F .text	00000000 Asm_CriticalOut
080013a0 g       *ABS*	00000000 __exidx_start
08000440 g     F .text	00000018 TaskTry4
0800022c  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
080004b8 g     F .text	0000008e __libc_init_array
00000400 g       *ABS*	00000000 __Main_Stack_Size
080007f6 g     F .text	00000000 Asm_IntLevelContextChange
08000c3c g     F .text	00000088 uLipe_TaskQueryByIndex
0800022c  w    F .isr_vector	00000006 USART6_IRQHandler
20000044 g     O .data	00000008 IdleName
0800022c  w    F .isr_vector	00000006 USART3_IRQHandler
20000460 g     O .bss	00000100 TaskTryStack2
0800022c  w    F .isr_vector	00000006 CRYP_IRQHandler
08000548 g     F .text	0000004e __libc_fini_array
20000c40 g       .bss	00000000 _ebss
08000188  w    F .isr_vector	0000004c Reset_Handler
0800022c  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
08000410 g     F .text	00000018 TaskTry2
0800022c  w    F .isr_vector	00000006 UART5_IRQHandler
080008b4 g     F .text	000000c2 uLipe_StackFrameCreate
0800022c  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM4_IRQHandler
20000560 g     O .bss	00000100 TaskTryStack4
0800022c  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
2000004c g       .data	00000000 __data_end__
08000e20 g     F .text	0000001e uLipe_Init
08000f94 g     F .text	00000066 uLipe_Start
08000cc4 g     F .text	0000015a uLipe_TaskDropByIndex
0800022c  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 UART4_IRQHandler
20000c40 g       .bss	00000000 __bss_end__
0800022c  w    F .isr_vector	00000006 TIM3_IRQHandler
0800022c  w    F .isr_vector	00000006 RCC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
0800022c  w    F .isr_vector	00000006 Default_Handler
0800022c  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
0800022c  w    F .isr_vector	00000006 ADC_IRQHandler
20000ad8 g     O .bss	00000168 TaskBlockList
20000020 g     O .data	00000008 Try5
20000c40 g       ._check_stack	00000000 _end_noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
08001014 g     F .text	0000001a Task_InitBlocks
0800022c  w    F .isr_vector	00000006 TIM7_IRQHandler
08000b64 g     F .text	000000b2 uLipe_TaskDequeue
0800022c  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM5_IRQHandler
20000058 g     O .bss	00000001 TaskInstalledCounter
0800022c  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
20000028 g     O .data	00000008 Try6
08000e40 g     F .text	00000154 uLipe_Schedule
0800022c  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
0800022c  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 SPI2_IRQHandler
2000096c g     O .bss	0000006c TaskMainQueue
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
08001274 g     F .text	0000012c memset
0800024c  w    F .isr_vector	00000006 MemManage_Handler
08000288 g     F .text	00000170 main
0800022c  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
080007c0 g     F .text	00000000 Asm_LowLevelTickInit
08000264  w    F .isr_vector	00000006 SVC_Handler
20000040 g     O .data	00000001 ScheduleFlag
20000660 g     O .bss	00000100 TaskTryStack3
0800022c  w    F .isr_vector	00000006 EXTI4_IRQHandler
08000488 g     F .text	00000018 TaskTry7
080005a4 g     F .text	00000092 SystemInit
08001248 g     F .text	0000002a Task_Idle
0800022c  w    F .isr_vector	00000006 FSMC_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_IRQHandler
20000050 g     O .bss	00000004 HighReadyTaskBlock
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
0800022c  w    F .isr_vector	00000006 WWDG_IRQHandler
20000060 g     O .bss	00000100 TaskTryStack
080003f8 g     F .text	00000018 TaskTry
0800022c  w    F .isr_vector	00000006 TIM2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
20020000 g       *ABS*	00000000 __stack
0800022c  w    F .isr_vector	00000006 EXTI1_IRQHandler
2000004c g       .data	00000000 _edata
20000760 g     O .bss	00000100 TaskTryStcack
080004a0 g     F .text	00000018 TaskTry8
08000804 g     F .text	00000000 Asm_TaskLevelContextChange
0800022c  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	00000188 g_pfnVectors
0800022c  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
20000860 g     O .bss	00000100 TaskTryStack5
0800022c  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 FLASH_IRQHandler
08000598  w    F .text	0000000a _exit
0800022c  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000254  w    F .isr_vector	00000006 BusFault_Handler
0800022c  w    F .isr_vector	00000006 USART1_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_IRQHandler
20000030 g     O .data	00000008 Try7
0800022c  w    F .isr_vector	00000006 SPI3_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
00000000         *UND*	00000000 TaskQuery
0800022c  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
08000458 g     F .text	00000018 TaskTry5
20000008 g     O .data	00000008 Try2
0800022c  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 89 01 00 08 35 02 00 08 3d 02 00 08     ... ....5...=...
 8000010:	4d 02 00 08 55 02 00 08 5d 02 00 08 00 00 00 00     M...U...].......
	...
 800002c:	65 02 00 08 6d 02 00 08 00 00 00 00 13 08 00 08     e...m...........
 800003c:	7d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     }...-...-...-...
 800004c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800005c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800006c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800007c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800008c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800009c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ac:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000bc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000cc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000dc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ec:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000fc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800010c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800011c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800012c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800013c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800014c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800015c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800016c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800017c:	2d 02 00 08 2d 02 00 08 2d 02 00 08                 -...-...-...

08000188 <Reset_Handler>:
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	f240 034c 	movw	r3, #76	; 0x4c
 8000192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	f640 4340 	movw	r3, #3136	; 0xc40
 800019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001a0:	607b      	str	r3, [r7, #4]
bss_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	e007      	b.n	80001b8 <Reset_Handler+0x30>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	f04f 0200 	mov.w	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f103 0304 	add.w	r3, r3, #4
 80001b6:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d8f3      	bhi.n	80001a8 <Reset_Handler+0x20>
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001c0:	f000 f97a 	bl	80004b8 <__libc_init_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001c4:	f000 f860 	bl	8000288 <__fini_array_end>
 80001c8:	60f8      	str	r0, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001ca:	f000 f9bd 	bl	8000548 <__libc_fini_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f000 f9e2 	bl	8000598 <_exit>

080001d4 <system_init>:
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	f241 33a0 	movw	r3, #5024	; 0x13a0
 80001de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	f240 0300 	movw	r3, #0
 80001e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	f240 034c 	movw	r3, #76	; 0x4c
 80001f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001f6:	607b      	str	r3, [r7, #4]
data_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	e00b      	b.n	8000216 <system_init+0x42>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	f103 0304 	add.w	r3, r3, #4
 800020c:	603b      	str	r3, [r7, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f103 0304 	add.w	r3, r3, #4
 8000214:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d8ef      	bhi.n	80001fe <system_init+0x2a>
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 800021e:	f000 f9c1 	bl	80005a4 <SystemInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000222:	f107 0710 	add.w	r7, r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop

0800022c <ADC_IRQHandler>:
Default_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:433
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:436
  while (1)
    {
    }
 8000230:	e7fe      	b.n	8000230 <ADC_IRQHandler+0x4>
DMA1_Stream3_IRQHandler():
 8000232:	bf00      	nop

08000234 <NMI_Handler>:
NMI_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:445
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:448
  while (1)
    {
    }
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>
 800023a:	bf00      	nop

0800023c <HardFault_Handler>:
HardFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:453
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b0c3      	sub	sp, #268	; 0x10c
 8000240:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:458
  //debuggers:

 unsigned long  FaultStack[64];
 unsigned long *StackPointer;
 unsigned long  i= 0;
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:463

 while (1)
    {

    }
 800024a:	e7fe      	b.n	800024a <HardFault_Handler+0xe>

0800024c <MemManage_Handler>:
MemManage_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:471
  while (1)
    {
    }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
BusFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:479
  while (1)
    {
    }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
UsageFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:487
  while (1)
    {
    }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
SVC_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:495
  while (1)
    {
    }
 8000268:	e7fe      	b.n	8000268 <SVC_Handler+0x4>
 800026a:	bf00      	nop

0800026c <DebugMon_Handler>:
DebugMon_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:503
  while (1)
    {
    }
 8000270:	e7fe      	b.n	8000270 <DebugMon_Handler+0x4>
 8000272:	bf00      	nop
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:511
  while (1)
    {
    }
 8000278:	e7fe      	b.n	8000278 <DebugMon_Handler+0xc>
DebugMon_Handler():
 800027a:	bf00      	nop

0800027c <SysTick_Handler>:
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:516
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:519
  while (1)
    {
    }
 8000280:	e7fe      	b.n	8000280 <SysTick_Handler+0x4>
 8000282:	bf00      	nop

Disassembly of section .text:

08000288 <main>:
main():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:63
volatile os_taskID_t ID;


int
main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af02      	add	r7, sp, #8
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:66


	uLipe_Init();
 800028e:	f000 fdc7 	bl	8000e20 <uLipe_Init>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:68

	Task_Create(&TaskTry, &TaskTryStack, 0 , &Try, sizeof(Try),sizeof(TaskTryStack));
 8000292:	f04f 0307 	mov.w	r3, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	f240 30f9 	movw	r0, #1017	; 0x3f9
 80002a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002a6:	f240 0160 	movw	r1, #96	; 0x60
 80002aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002ae:	f04f 0200 	mov.w	r2, #0
 80002b2:	f240 0300 	movw	r3, #0
 80002b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ba:	f000 feb9 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:69
	Task_Create(&TaskTry2, &TaskTryStack2, 1 , &Try2, sizeof(Try2),sizeof(TaskTryStack));
 80002be:	f04f 0308 	mov.w	r3, #8
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	f240 4011 	movw	r0, #1041	; 0x411
 80002ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002d2:	f240 4160 	movw	r1, #1120	; 0x460
 80002d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002da:	f04f 0201 	mov.w	r2, #1
 80002de:	f240 0308 	movw	r3, #8
 80002e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e6:	f000 fea3 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:70
	Task_Create(&TaskTry3, &TaskTryStack3, 3 , &Try3, sizeof(Try2),sizeof(TaskTryStack));
 80002ea:	f04f 0308 	mov.w	r3, #8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	f240 4029 	movw	r0, #1065	; 0x429
 80002fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002fe:	f240 6160 	movw	r1, #1632	; 0x660
 8000302:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000306:	f04f 0203 	mov.w	r2, #3
 800030a:	f240 0310 	movw	r3, #16
 800030e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000312:	f000 fe8d 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:71
	Task_Create(&TaskTry4, &TaskTryStack4, 9 , &Try4, sizeof(Try2),sizeof(TaskTryStack));
 8000316:	f04f 0308 	mov.w	r3, #8
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	f240 4041 	movw	r0, #1089	; 0x441
 8000326:	f6c0 0000 	movt	r0, #2048	; 0x800
 800032a:	f240 5160 	movw	r1, #1376	; 0x560
 800032e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000332:	f04f 0209 	mov.w	r2, #9
 8000336:	f240 0318 	movw	r3, #24
 800033a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800033e:	f000 fe77 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:72
	Task_Create(&TaskTry5, &TaskTryStack5, 7 , &Try5, sizeof(Try2),sizeof(TaskTryStack));
 8000342:	f04f 0308 	mov.w	r3, #8
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	f240 4059 	movw	r0, #1113	; 0x459
 8000352:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000356:	f640 0160 	movw	r1, #2144	; 0x860
 800035a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800035e:	f04f 0207 	mov.w	r2, #7
 8000362:	f240 0320 	movw	r3, #32
 8000366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800036a:	f000 fe61 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:73
	Task_Create(&TaskTry6, &TaskTryStack6, 2 , &Try6, sizeof(Try2),sizeof(TaskTryStack));
 800036e:	f04f 0308 	mov.w	r3, #8
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	f240 4071 	movw	r0, #1137	; 0x471
 800037e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000382:	f240 2160 	movw	r1, #608	; 0x260
 8000386:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800038a:	f04f 0202 	mov.w	r2, #2
 800038e:	f240 0328 	movw	r3, #40	; 0x28
 8000392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000396:	f000 fe4b 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:74
	Task_Create(&TaskTry7, &TaskTryStack7, 12 , &Try7, sizeof(Try2),sizeof(TaskTryStack));
 800039a:	f04f 0308 	mov.w	r3, #8
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	f240 4089 	movw	r0, #1161	; 0x489
 80003aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003ae:	f240 3160 	movw	r1, #864	; 0x360
 80003b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003b6:	f04f 020c 	mov.w	r2, #12
 80003ba:	f240 0330 	movw	r3, #48	; 0x30
 80003be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003c2:	f000 fe35 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:75
	Task_Create(&TaskTry8, &TaskTryStack8, 8 , &Try8, sizeof(Try2),sizeof(TaskTryStack));
 80003c6:	f04f 0308 	mov.w	r3, #8
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	f240 40a1 	movw	r0, #1185	; 0x4a1
 80003d6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003da:	f240 1160 	movw	r1, #352	; 0x160
 80003de:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003e2:	f04f 0208 	mov.w	r2, #8
 80003e6:	f240 0338 	movw	r3, #56	; 0x38
 80003ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ee:	f000 fe1f 	bl	8001030 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:77

	uLipe_Start();
 80003f2:	f000 fdcf 	bl	8000f94 <uLipe_Start>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:84





	while (1);
 80003f6:	e7fe      	b.n	80003f6 <main+0x16e>

080003f8 <TaskTry>:
TaskTry():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:40
os_stack_t TaskTryStack8[64];
os_taskname_t Try8[8] = {"TaskTry8"};


taskptr_t TaskTry(void *TaskArgs)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:43

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:49

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	f103 0301 	add.w	r3, r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:51

	}
 800040e:	e7fa      	b.n	8000406 <TaskTry+0xe>

08000410 <TaskTry2>:
TaskTry2():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:56

}

taskptr_t TaskTry2(void *TaskArgs)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:58
	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:64

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	f103 0301 	add.w	r3, r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:66

	}
 8000426:	e7fa      	b.n	800041e <TaskTry2+0xe>

08000428 <TaskTry3>:
TaskTry3():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:71
}


taskptr_t TaskTry3(void *TaskArgs)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:74

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:80

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f103 0301 	add.w	r3, r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:82

	}
 800043e:	e7fa      	b.n	8000436 <TaskTry3+0xe>

08000440 <TaskTry4>:
TaskTry4():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:86
}

taskptr_t TaskTry4(void *TaskArgs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:89

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000448:	f04f 0300 	mov.w	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:95

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	f103 0301 	add.w	r3, r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:97

	}
 8000456:	e7fa      	b.n	800044e <TaskTry4+0xe>

08000458 <TaskTry5>:
TaskTry5():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:102
}


taskptr_t TaskTry5(void *TaskArgs)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:105

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000460:	f04f 0300 	mov.w	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:111

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	f103 0301 	add.w	r3, r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:113

	}
 800046e:	e7fa      	b.n	8000466 <TaskTry5+0xe>

08000470 <TaskTry6>:
TaskTry6():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:117
}

taskptr_t TaskTry6(void *TaskArgs)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:120

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:126

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f103 0301 	add.w	r3, r3, #1
 8000484:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:128

	}
 8000486:	e7fa      	b.n	800047e <TaskTry6+0xe>

08000488 <TaskTry7>:
TaskTry7():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:133
}


taskptr_t TaskTry7(void *TaskArgs)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:136

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8000490:	f04f 0300 	mov.w	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:142

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f103 0301 	add.w	r3, r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:144

	}
 800049e:	e7fa      	b.n	8000496 <TaskTry7+0xe>

080004a0 <TaskTry8>:
TaskTry8():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:149
}


taskptr_t TaskTry8(void *TaskArgs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:152

	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 80004a8:	f04f 0300 	mov.w	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:158

	while(1)
	{

		//each task execution this counter is incremented
		ExecutionCounter++;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f103 0301 	add.w	r3, r3, #1
 80004b4:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:160

	}
 80004b6:	e7fa      	b.n	80004ae <TaskTry8+0xe>

080004b8 <__libc_init_array>:
__libc_init_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 80004be:	f240 2288 	movw	r2, #648	; 0x288
 80004c2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80004c6:	f240 2384 	movw	r3, #644	; 0x284
 80004ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80004d4:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 80004d6:	f04f 0300 	mov.w	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	e00b      	b.n	80004f6 <__libc_init_array+0x3e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:185
    __preinit_array_start[i]();
 80004de:	f240 2384 	movw	r3, #644	; 0x284
 80004e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ec:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f103 0301 	add.w	r3, r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d3ef      	bcc.n	80004de <__libc_init_array+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 80004fe:	f240 2288 	movw	r2, #648	; 0x288
 8000502:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000506:	f240 2388 	movw	r3, #648	; 0x288
 800050a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000514:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 8000516:	f04f 0300 	mov.w	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e00b      	b.n	8000536 <__libc_init_array+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:194
    __init_array_start[i]();
 800051e:	f240 2388 	movw	r3, #648	; 0x288
 8000522:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800052c:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f103 0301 	add.w	r3, r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3ef      	bcc.n	800051e <__libc_init_array+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 800053e:	f107 0708 	add.w	r7, r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop

08000548 <__libc_fini_array>:
__libc_fini_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 800054e:	f240 2288 	movw	r2, #648	; 0x288
 8000552:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000556:	f240 2388 	movw	r3, #648	; 0x288
 800055a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000564:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e00d      	b.n	8000588 <__libc_fini_array+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:206
    __fini_array_start[i - 1]();
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000572:	f240 2388 	movw	r3, #648	; 0x288
 8000576:	f6c0 0300 	movt	r3, #2048	; 0x800
 800057a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800057e:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1ee      	bne.n	800056c <__libc_fini_array+0x24>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 800058e:	f107 0708 	add.w	r7, r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop

08000598 <_exit>:
_exit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:47
#if defined(DEBUG)
  while(1)
  ;
 80005a0:	e7fe      	b.n	80005a0 <_exit+0x8>
 80005a2:	bf00      	nop

080005a4 <SystemInit>:
SystemInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:338
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:345
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005b8:	6812      	ldr	r2, [r2, #0]
 80005ba:	f042 0201 	orr.w	r2, r2, #1
 80005be:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:348

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:351

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005de:	6812      	ldr	r2, [r2, #0]
 80005e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005e8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:354

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005f2:	f243 0210 	movw	r2, #12304	; 0x3010
 80005f6:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80005fa:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:357

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000604:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000608:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000612:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:360

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000614:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000618:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800061c:	f04f 0200 	mov.w	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:368
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000622:	f000 f809 	bl	8000638 <SetSysClock>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:374

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000626:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800062a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800062e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000632:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:376
#endif
}
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop

08000638 <SetSysClock>:
SetSysClock():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:471
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:475
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:478
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800064a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800064e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000652:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000656:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000660:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:483
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000662:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000666:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000670:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:484
    StartUpCounter++;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f103 0301 	add.w	r3, r3, #1
 8000678:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:485
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d103      	bne.n	8000688 <SetSysClock+0x50>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000686:	d1ec      	bne.n	8000662 <SetSysClock+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:487

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000688:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800068c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <SetSysClock+0x6a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:489
  {
    HSEStatus = (uint32_t)0x01;
 800069a:	f04f 0301 	mov.w	r3, #1
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	e002      	b.n	80006a8 <SetSysClock+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:493
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:496
  }

  if (HSEStatus == (uint32_t)0x01)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	f040 8082 	bne.w	80007b4 <SetSysClock+0x17c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:499
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:500
    PWR->CR |= PWR_CR_VOS;
 80006c8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80006cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80006d0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80006d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006de:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:503

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006f0:	6892      	ldr	r2, [r2, #8]
 80006f2:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:507

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000700:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000704:	6892      	ldr	r2, [r2, #8]
 8000706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800070a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:510
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800070c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000714:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000718:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800071c:	6892      	ldr	r2, [r2, #8]
 800071e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000722:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:522
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000724:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800072c:	f245 4219 	movw	r2, #21529	; 0x5419
 8000730:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000734:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:526
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000736:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800073a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800073e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000742:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800074c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:529

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800074e:	bf00      	nop
 8000750:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000754:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f6      	beq.n	8000750 <SetSysClock+0x118>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:549
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000762:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000766:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800076a:	f240 7205 	movw	r2, #1797	; 0x705
 800076e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:558
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000770:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000774:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000778:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800077c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000780:	6892      	ldr	r2, [r2, #8]
 8000782:	f022 0203 	bic.w	r2, r2, #3
 8000786:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:559
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000788:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800078c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000790:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000794:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000798:	6892      	ldr	r2, [r2, #8]
 800079a:	f042 0202 	orr.w	r2, r2, #2
 800079e:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:562

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80007a0:	bf00      	nop
 80007a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 030c 	and.w	r3, r3, #12
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d1f6      	bne.n	80007a2 <SetSysClock+0x16a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:571
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80007b4:	f107 070c 	add.w	r7, r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <Asm_LowLevelTickInit>:
Asm_LowLevelTickInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:47
@************************************************************************
.thumb_func
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
 80007c0:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
								@
		LDR  R1, =0xE000ED14	@SCB->CCR
 80007c2:	4936      	ldr	r1, [pc, #216]	; (800089c <SECOND_CHANGE+0x26>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:50
		LDR  R2, [R1]			@
 80007c4:	680a      	ldr	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:51
		ORR  R2,R2,#0x200		@Enable double word aling
 80007c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:52
		STR	 R2,[R1]			@
 80007ca:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
								@
		LDR  R1, =0xE000E010    @Load the systick control register contents
 80007cc:	4934      	ldr	r1, [pc, #208]	; (80008a0 <SECOND_CHANGE+0x2a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:55
		MOVS R2, #0x00000000	@
 80007ce:	2200      	movs	r2, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:56
		STR	 R2, [R1], #0x04	@
 80007d0:	f841 2b04 	str.w	r2, [r1], #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:57
		STR  R0, [R1]			@Write the new value for load count
 80007d4:	6008      	str	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:58
		SUBS R1, #0x04			@Points again to systick control gerister
 80007d6:	3904      	subs	r1, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:61
								@
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
 80007d8:	2203      	movs	r2, #3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:62
		STR  R2, [R1]		 	@Write back on the systick register, and points to
 80007da:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 80007dc:	4931      	ldr	r1, [pc, #196]	; (80008a4 <SECOND_CHANGE+0x2e>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:66
		MOVS  R0, #0xFF			@
 80007de:	20ff      	movs	r0, #255	; 0xff
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:67
		STRB  R0,[R1]			@set pend sv priority
 80007e0:	7008      	strb	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:69
								@
		CPSIE  I				@Enable global interrupts
 80007e2:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:70
		BX	LR					@Return from sub
 80007e4:	4770      	bx	lr

080007e6 <Asm_CriticalIn>:
Asm_CriticalIn():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:86
@							 APSR value
@
@************************************************************************
.thumb_func
Asm_CriticalIn:
		MRS     R0, PRIMASK			@save status register
 80007e6:	f3ef 8010 	mrs	r0, PRIMASK
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:87
		CPSID	I					@disables all interrupts
 80007ea:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:88
		BX		LR					@Return from sub
 80007ec:	4770      	bx	lr

080007ee <Asm_CriticalOut>:
Asm_CriticalOut():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:105
@
@************************************************************************
.thumb_func
Asm_CriticalOut:

		MSR	    PRIMASK,R0				@retrieve saved sr register
 80007ee:	f380 8810 	msr	PRIMASK, r0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:106
		CPSIE	I					@enables all interrupts
 80007f2:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:107
		BX		LR					@Return from sub
 80007f4:	4770      	bx	lr

080007f6 <Asm_IntLevelContextChange>:
Asm_IntLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:125
@
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
 80007f6:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:126
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:127
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 80007fa:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:130
									@exception
									@
		STR		R1,[R0]				@
 80007fe:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:131
		CPSIE	I					@Enable interrupts
 8000800:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:133
									@
		BX LR 					  	@Return from sub
 8000802:	4770      	bx	lr

08000804 <Asm_TaskLevelContextChange>:
Asm_TaskLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:151
@
@************************************************************************
.thumb_func
Asm_TaskLevelContextChange:

		CPSID 	I					@Disables interrrupts
 8000804:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:152
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000806:	4828      	ldr	r0, [pc, #160]	; (80008a8 <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:153
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 8000808:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:156
									@exception
									@
		STR		R1,[R0]				@
 800080c:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:157
		CPSIE	I					@Enable interrupts
 800080e:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:160
									@
									@
		BX 		LR 					@Return from sub
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:178
@
@
@************************************************************************
.thumb_func
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
 8000812:	f01e 0f04 	tst.w	lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:179
		IT		EQ						@if, it from a MSP usage
 8000816:	bf08      	it	eq
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:180
		BEQ		FIRST_CHANGE			@
 8000818:	f000 b81d 	beq.w	8000856 <FIRST_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:182
										@
		LDR		R0, =HighReadyTaskBlock @if not,
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:183
		LDR		R0,[R0]					@
 800081e:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:184
		LDR		R1,[R0]					@Check the current taskFLag
 8000820:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:185
		TST		R1,#1					@Check if first time flag is set
 8000822:	f011 0f01 	tst.w	r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:186
		IT		NE						@
 8000826:	bf18      	it	ne
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:187
		BNE 	SECOND_CHANGE			@Jump for first context switch
 8000828:	f000 b825 	bne.w	8000876 <SECOND_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:190
										@
										@if, not, runs context switch normally
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 800082c:	4820      	ldr	r0, [pc, #128]	; (80008b0 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:191
		LDR		R0,[R0]					@
 800082e:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:192
		MRS		R1, PSP					@Get the current SP
 8000830:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:193
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 8000834:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:195
										@
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 8000838:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:197
										@
		LDR		R0,=HighReadyTaskBlock  @Get the first task from de queue
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:198
		LDR		R0,[R0]					@Get the new stack pointer
 800083c:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:199
		LDR		R1, [R0,#0x00000018]	@
 800083e:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:201
									    @
		LDMIA	R1!,{R4 - R11}			@Reload R4 -- R11
 8000840:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:202
		MSR		PSP , R1				@write the new stackpointer
 8000844:	f381 8809 	msr	PSP, r1

08000848 <NO_SAVE>:
NO_SAVE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:205
NO_SAVE:								@
										@update the new current tcb
		LDR     R0, =HighReadyTaskBlock	@
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:206
		LDR		R0, [R0]				@
 800084a:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:207
		LDR		R1,=CurrentTaskBlock	@
 800084c:	4918      	ldr	r1, [pc, #96]	; (80008b0 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:208
		STR		R0, [R1]				@
 800084e:	6008      	str	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:209
		ORR     LR,LR,#0x00000004		@ensures that return in PSP
 8000850:	f04e 0e04 	orr.w	lr, lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:210
		BX		LR						@Return from sub
 8000854:	4770      	bx	lr

08000856 <FIRST_CHANGE>:
FIRST_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:213
										@
FIRST_CHANGE:							@
		MOVS    R4, #0x02				@if the first run
 8000856:	2402      	movs	r4, #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:214
		MSR	    CONTROL, R4				@uses PSP always
 8000858:	f384 8814 	msr	CONTROL, r4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:215
		ISB								@recommended after write control
 800085c:	f3bf 8f6f 	isb	sy
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:216
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:217
		LDR		R0,[R0]					@Get the new stack pointer
 8000862:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:218
		LDR		R1,[R0]					@Get task flags
 8000864:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:219
		BIC		R1,R1,#1				@clear first time flag
 8000866:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:220
		STR		R1,[R0]					@
 800086a:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:221
		LDR		R1, [R0,#0x00000018]	@
 800086c:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:222
		MSR     PSP,R1					@Load the first stack pointer
 800086e:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:223
		B		NO_SAVE					@
 8000872:	f7ff bfe9 	b.w	8000848 <NO_SAVE>

08000876 <SECOND_CHANGE>:
SECOND_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:226

SECOND_CHANGE:
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:227
		LDR		R0,[R0]					@
 8000878:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:228
		MRS		R1, PSP					@Get the current SP
 800087a:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:229
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 800087e:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:230
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 8000882:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:232
										@
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:233
		LDR		R0,[R0]					@Get the new stack pointer
 8000886:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:234
		LDR		R1,[R0]					@Get task flags
 8000888:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:235
		BIC		R1,R1,#1				@clear first time flag
 800088a:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:236
		STR		R1,[R0]					@
 800088e:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:237
		LDR		R1, [R0,#0x00000018]	@
 8000890:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:238
		MSR     PSP,R1					@Load the first stack pointer
 8000892:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:239
		B		NO_SAVE					@
 8000896:	f7ff bfd7 	b.w	8000848 <NO_SAVE>
 800089a:	0000      	.short	0x0000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
								@
		LDR  R1, =0xE000ED14	@SCB->CCR
 800089c:	e000ed14 	.word	0xe000ed14
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
		LDR  R2, [R1]			@
		ORR  R2,R2,#0x200		@Enable double word aling
		STR	 R2,[R1]			@
								@
		LDR  R1, =0xE000E010    @Load the systick control register contents
 80008a0:	e000e010 	.word	0xe000e010
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
		STR  R2, [R1]		 	@Write back on the systick register, and points to
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 80008a4:	e000ed22 	.word	0xe000ed22
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:126
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 80008a8:	e000ed04 	.word	0xe000ed04
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:182
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
		IT		EQ						@if, it from a MSP usage
		BEQ		FIRST_CHANGE			@
										@
		LDR		R0, =HighReadyTaskBlock @if not,
 80008ac:	20000050 	.word	0x20000050
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:190
		TST		R1,#1					@Check if first time flag is set
		IT		NE						@
		BNE 	SECOND_CHANGE			@Jump for first context switch
										@
										@if, not, runs context switch normally
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 80008b0:	2000004c 	.word	0x2000004c

080008b4 <uLipe_StackFrameCreate>:
uLipe_StackFrameCreate():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:139
 	 return:	N/A


 ************************************************************************/
void uLipe_StackFrameCreate(taskTCB_t *CurrTask)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:143
	//create a stack frame for this TCB:

	//first the APSR register
	*--CurrTask->TaskStack = 0x01000000;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f1a3 0204 	sub.w	r2, r3, #4
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	619a      	str	r2, [r3, #24]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008d0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:145
	//Now the current PC (first address of task method)
	*--CurrTask->TaskStack = (uint32_t)CurrTask->TaskAction;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f1a3 0204 	sub.w	r2, r3, #4
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	69d2      	ldr	r2, [r2, #28]
 80008e6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:147
	//The LR register with exc_return with PSP
	*--CurrTask->TaskStack = 0xFFFFFFFD;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f1a3 0204 	sub.w	r2, r3, #4
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f06f 0202 	mvn.w	r2, #2
 80008fc:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:149
	//R12
	*--CurrTask->TaskStack = 0x00;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f1a3 0204 	sub.w	r2, r3, #4
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	619a      	str	r2, [r3, #24]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:151
	//R3
	*--CurrTask->TaskStack = 0x00;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f1a3 0204 	sub.w	r2, r3, #4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	619a      	str	r2, [r3, #24]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:153
	//R2
	*--CurrTask->TaskStack = 0x00;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f1a3 0204 	sub.w	r2, r3, #4
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	619a      	str	r2, [r3, #24]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:155
	//R1
	*--CurrTask->TaskStack = 0x00;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f1a3 0204 	sub.w	r2, r3, #4
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	619a      	str	r2, [r3, #24]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f04f 0200 	mov.w	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:157
	//R0
	*--CurrTask->TaskStack = 0x00;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f1a3 0204 	sub.w	r2, r3, #4
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	619a      	str	r2, [r3, #24]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:158
}
 800096c:	f107 070c 	add.w	r7, r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <uLipe_TaskQueueInit>:
uLipe_TaskQueueInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:172
 	 return:	N/A


 ************************************************************************/
os_error_t uLipe_TaskQueueInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:174
	//create a temporary TCB
	taskTCB_t *CurrTask = NULL;
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:176

	uint8_t LoopCntr = 0;
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:181

	//initializes the QueueControl block:

	//first the head
	TaskMainCtl.Head = (TaskQueue_t *) &TaskMainQueue[0];
 800098a:	f640 1360 	movw	r3, #2400	; 0x960
 800098e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000992:	f640 126c 	movw	r2, #2412	; 0x96c
 8000996:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800099a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:184

	//Now the tail:
	TaskMainCtl.Tail = (TaskQueue_t *) &TaskMainQueue[0];
 800099c:	f640 1360 	movw	r3, #2400	; 0x960
 80009a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009a4:	f640 126c 	movw	r2, #2412	; 0x96c
 80009a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:187

	//The queue size:
	TaskMainCtl.QueueSize = 0;
 80009ae:	f640 1360 	movw	r3, #2400	; 0x960
 80009b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009b6:	f04f 0200 	mov.w	r2, #0
 80009ba:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:190

	//Initialize indexes:
	TaskMainCtl.HeadCurrIndex = TaskMainCtl.TailCurrIndex = 0;
 80009bc:	f640 1360 	movw	r3, #2400	; 0x960
 80009c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	725a      	strb	r2, [r3, #9]
 80009ca:	f640 1360 	movw	r3, #2400	; 0x960
 80009ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d2:	7a5a      	ldrb	r2, [r3, #9]
 80009d4:	f640 1360 	movw	r3, #2400	; 0x960
 80009d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009dc:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:193

	//mount a circular queue:
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK; LoopCntr++)
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	70fb      	strb	r3, [r7, #3]
 80009e4:	e077      	b.n	8000ad6 <uLipe_TaskQueueInit+0x15e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:196
	{
		//for last iteration we should to wrap next fillment:
		if(NUMBER_OF_TASK == LoopCntr)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b08      	cmp	r3, #8
 80009ea:	d113      	bne.n	8000a14 <uLipe_TaskQueueInit+0x9c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:199
		{
			//attach a new queue cell on the list:
			TaskMainQueue[LoopCntr].NextNode =
 80009ec:	78f9      	ldrb	r1, [r7, #3]
 80009ee:	f640 126c 	movw	r2, #2412	; 0x96c
 80009f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80009f6:	460b      	mov	r3, r1
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	185b      	adds	r3, r3, r1
 80009fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a02:	18d3      	adds	r3, r2, r3
 8000a04:	f103 0208 	add.w	r2, r3, #8
 8000a08:	f640 136c 	movw	r3, #2412	; 0x96c
 8000a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e01c      	b.n	8000a4e <uLipe_TaskQueueInit+0xd6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:205
					&TaskMainQueue[0];
		}
		else
		{
			//attach a new queue cell on the list:
			TaskMainQueue[LoopCntr].NextNode =
 8000a14:	78f9      	ldrb	r1, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:206
					&TaskMainQueue[LoopCntr + 1];
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	f103 0201 	add.w	r2, r3, #1
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a22:	189b      	adds	r3, r3, r2
 8000a24:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a28:	f640 126c 	movw	r2, #2412	; 0x96c
 8000a2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a30:	1898      	adds	r0, r3, r2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:205
					&TaskMainQueue[0];
		}
		else
		{
			//attach a new queue cell on the list:
			TaskMainQueue[LoopCntr].NextNode =
 8000a32:	f640 126c 	movw	r2, #2412	; 0x96c
 8000a36:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a40:	185b      	adds	r3, r3, r1
 8000a42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a46:	18d3      	adds	r3, r2, r3
 8000a48:	f103 0308 	add.w	r3, r3, #8
 8000a4c:	6018      	str	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:210
					&TaskMainQueue[LoopCntr + 1];
		}

		//Fill the data with null pointer:
		TaskMainQueue[LoopCntr].TaskQueueData = NULL;
 8000a4e:	78f9      	ldrb	r1, [r7, #3]
 8000a50:	f640 126c 	movw	r2, #2412	; 0x96c
 8000a54:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a58:	460b      	mov	r3, r1
 8000a5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5e:	185b      	adds	r3, r3, r1
 8000a60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	f04f 0200 	mov.w	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:214


		//For first iteration we should wrap previos fillment
		if(LoopCntr == 0)
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d110      	bne.n	8000a94 <uLipe_TaskQueueInit+0x11c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:217
		{
			//and attach the previous elements:
			TaskMainQueue[LoopCntr].PrevNode =
 8000a72:	78f9      	ldrb	r1, [r7, #3]
 8000a74:	f640 126c 	movw	r2, #2412	; 0x96c
 8000a78:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a82:	185b      	adds	r3, r3, r1
 8000a84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	f103 0304 	add.w	r3, r3, #4
 8000a8e:	4a34      	ldr	r2, [pc, #208]	; (8000b60 <uLipe_TaskQueueInit+0x1e8>)
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e01c      	b.n	8000ace <uLipe_TaskQueueInit+0x156>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:223
					&TaskMainQueue[NUMBER_OF_TASK];
		}
		else
		{
			//and attach the previous elements:
			TaskMainQueue[LoopCntr].PrevNode =
 8000a94:	78f9      	ldrb	r1, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:224
					&TaskMainQueue[LoopCntr - 1];
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000aa8:	f640 126c 	movw	r2, #2412	; 0x96c
 8000aac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ab0:	1898      	adds	r0, r3, r2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:223
					&TaskMainQueue[NUMBER_OF_TASK];
		}
		else
		{
			//and attach the previous elements:
			TaskMainQueue[LoopCntr].PrevNode =
 8000ab2:	f640 126c 	movw	r2, #2412	; 0x96c
 8000ab6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000aba:	460b      	mov	r3, r1
 8000abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac0:	185b      	adds	r3, r3, r1
 8000ac2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	f103 0304 	add.w	r3, r3, #4
 8000acc:	6018      	str	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:193

	//Initialize indexes:
	TaskMainCtl.HeadCurrIndex = TaskMainCtl.TailCurrIndex = 0;

	//mount a circular queue:
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK; LoopCntr++)
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	f103 0301 	add.w	r3, r3, #1
 8000ad4:	70fb      	strb	r3, [r7, #3]
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d984      	bls.n	80009e6 <uLipe_TaskQueueInit+0x6e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:231
		}
	}
	//since queue is mounted, let take the tasklist:

	//get the idle task address:
	CurrTask = (taskTCB_t *)Task_GetList();
 8000adc:	f000 fbaa 	bl	8001234 <Task_GetList>
 8000ae0:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:234

	//searches the queue for ready tasks:
	while(END_LIST != CurrTask)
 8000ae2:	e032      	b.n	8000b4a <uLipe_TaskQueueInit+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:237
	{
		//check for ready task:
		if(TASK_READY == CurrTask->TaskState)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7bdb      	ldrb	r3, [r3, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d12b      	bne.n	8000b44 <uLipe_TaskQueueInit+0x1cc>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:240
		{
			//if it ready the put into queue:
			TaskMainCtl.Tail->TaskQueueData = (taskTCB_t *)CurrTask;
 8000aec:	f640 1360 	movw	r3, #2400	; 0x960
 8000af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:243

			//advances the queue for next free list:
			TaskMainCtl.Tail = (TaskQueue_t *)TaskMainCtl.Tail->NextNode;
 8000afa:	f640 1360 	movw	r3, #2400	; 0x960
 8000afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	f640 1360 	movw	r3, #2400	; 0x960
 8000b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b0e:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:246

			//Increments the bottom queue current index:
			TaskMainCtl.TailCurrIndex++;
 8000b10:	f640 1360 	movw	r3, #2400	; 0x960
 8000b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b18:	7a5b      	ldrb	r3, [r3, #9]
 8000b1a:	f103 0301 	add.w	r3, r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	f640 1360 	movw	r3, #2400	; 0x960
 8000b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b28:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:249

			//increments the queue size:
			TaskMainCtl.QueueSize++;
 8000b2a:	f640 1360 	movw	r3, #2400	; 0x960
 8000b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b32:	7a9b      	ldrb	r3, [r3, #10]
 8000b34:	f103 0301 	add.w	r3, r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	f640 1360 	movw	r3, #2400	; 0x960
 8000b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b42:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:254

			/**THE QUEUE WILL NEVER OVERFLOWS**/
		}
		//go to next task:
		CurrTask = (taskTCB_t *)CurrTask->NextTask;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:234

	//get the idle task address:
	CurrTask = (taskTCB_t *)Task_GetList();

	//searches the queue for ready tasks:
	while(END_LIST != CurrTask)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1c9      	bne.n	8000ae4 <uLipe_TaskQueueInit+0x16c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:261

	/* At this point we get:
	   TaskMainCtl.Head = TaskMainQueue[0] and
	   TaskMainCtl.Tail = TaskMainQueue[LoopCntr]
	 */
	return(OS_OK);
 8000b50:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:263

}
 8000b54:	4618      	mov	r0, r3
 8000b56:	f107 0708 	add.w	r7, r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200009cc 	.word	0x200009cc

08000b64 <uLipe_TaskDequeue>:
uLipe_TaskDequeue():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:335
							   null pointer will returned if queue is
							   empty.

 ************************************************************************/
taskTCB_t* uLipe_TaskDequeue(os_error_t *Err)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:338
	//TemporaryTCB:
	taskTCB_t* pTCB = (taskTCB_t *)
			TaskMainCtl.Head->TaskQueueData;
 8000b6c:	f640 1360 	movw	r3, #2400	; 0x960
 8000b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b74:	681b      	ldr	r3, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:337

 ************************************************************************/
taskTCB_t* uLipe_TaskDequeue(os_error_t *Err)
{
	//TemporaryTCB:
	taskTCB_t* pTCB = (taskTCB_t *)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:341
			TaskMainCtl.Head->TaskQueueData;

	//check if queue is empty first:
	if(NULL == TaskMainCtl.QueueSize)
 8000b7a:	f640 1360 	movw	r3, #2400	; 0x960
 8000b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b82:	7a9b      	ldrb	r3, [r3, #10]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <uLipe_TaskDequeue+0x32>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:344
	{
		//Assign the error:
		*Err = OS_QUEUE_EMPTY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f04f 0208 	mov.w	r2, #8
 8000b8e:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:347

		//return the error:
		return(NULL);
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e039      	b.n	8000c0a <uLipe_TaskDequeue+0xa6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:355
	//if not lets remove the TCB is in
	//top of queue:
	//CurrTask = (taskTCB_t *)&pTCB;

	//Move Head for new top of queue:
	TaskMainCtl.Head = (TaskQueue_t *)TaskMainCtl.Head->NextNode;
 8000b96:	f640 1360 	movw	r3, #2400	; 0x960
 8000b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	f640 1360 	movw	r3, #2400	; 0x960
 8000ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000baa:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:359

	//Decrement the size,since a element was removed from
	//queue:
	TaskMainCtl.QueueSize--;
 8000bac:	f640 1360 	movw	r3, #2400	; 0x960
 8000bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bb4:	7a9b      	ldrb	r3, [r3, #10]
 8000bb6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	f640 1360 	movw	r3, #2400	; 0x960
 8000bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc4:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:362

	//Advances de the current index:
	TaskMainCtl.HeadCurrIndex = (TaskMainCtl.HeadCurrIndex + 1)
 8000bc6:	f640 1360 	movw	r3, #2400	; 0x960
 8000bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bce:	7a1b      	ldrb	r3, [r3, #8]
 8000bd0:	f103 0101 	add.w	r1, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:363
			% (NUMBER_OF_TASK + 1);
 8000bd4:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000bd8:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000bdc:	fb83 2301 	smull	r2, r3, r3, r1
 8000be0:	ea4f 0263 	mov.w	r2, r3, asr #1
 8000be4:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8000be8:	1ad2      	subs	r2, r2, r3
 8000bea:	4613      	mov	r3, r2
 8000bec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bf0:	189b      	adds	r3, r3, r2
 8000bf2:	1aca      	subs	r2, r1, r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:362
	//Decrement the size,since a element was removed from
	//queue:
	TaskMainCtl.QueueSize--;

	//Advances de the current index:
	TaskMainCtl.HeadCurrIndex = (TaskMainCtl.HeadCurrIndex + 1)
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	f640 1360 	movw	r3, #2400	; 0x960
 8000bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bfe:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:366
			% (NUMBER_OF_TASK + 1);

	//Assign no error:
	*Err = OS_OK;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:369

	//return a ok:
	return(pTCB);
 8000c08:	68fb      	ldr	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:370
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f107 0714 	add.w	r7, r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <uLipe_EmptyQueue>:
uLipe_EmptyQueue():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:388
 	 	 	 	 	 	 	 	 	  can be retrieved.


 ************************************************************************/
os_error_t  uLipe_EmptyQueue(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:390
	//check the current queue size
	if(NULL != TaskMainCtl.QueueSize)
 8000c1c:	f640 1360 	movw	r3, #2400	; 0x960
 8000c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c24:	7a9b      	ldrb	r3, [r3, #10]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <uLipe_EmptyQueue+0x18>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:393
	{
		//return is not empty
		return(OS_QUEUE_NOT_EMPTY);
 8000c2a:	f04f 030a 	mov.w	r3, #10
 8000c2e:	e001      	b.n	8000c34 <uLipe_EmptyQueue+0x1c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:397
	}
	else
	{
		return(OS_QUEUE_EMPTY);
 8000c30:	f04f 0308 	mov.w	r3, #8
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:399
	}
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <uLipe_TaskQueryByIndex>:
uLipe_TaskQueryByIndex():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:428



 ************************************************************************/
taskTCB_t* uLipe_TaskQueryByIndex(uint8_t Index, os_error_t *Err)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:430

	taskTCB_t * DesiredTask = NULL;
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:433

	//check if queue is empty:
	if(OS_QUEUE_EMPTY == uLipe_EmptyQueue())
 8000c4e:	f7ff ffe3 	bl	8000c18 <uLipe_EmptyQueue>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d106      	bne.n	8000c66 <uLipe_TaskQueryByIndex+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:436
	{
		//Assign error
		*Err = OS_QUEUE_EMPTY;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f04f 0208 	mov.w	r2, #8
 8000c5e:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:439

		//return a null pointer:
		return(NULL);
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e029      	b.n	8000cba <uLipe_TaskQueryByIndex+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:443
	}
	//check if the current index comports a
	//ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000c66:	f640 1360 	movw	r3, #2400	; 0x960
 8000c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c6e:	7a1b      	ldrb	r3, [r3, #8]
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d20e      	bcs.n	8000c94 <uLipe_TaskQueryByIndex+0x58>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:444
			(Index > TaskMainCtl.TailCurrIndex ))
 8000c76:	f640 1360 	movw	r3, #2400	; 0x960
 8000c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c7e:	7a5b      	ldrb	r3, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:443
		//return a null pointer:
		return(NULL);
	}
	//check if the current index comports a
	//ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d906      	bls.n	8000c94 <uLipe_TaskQueryByIndex+0x58>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:447
			(Index > TaskMainCtl.TailCurrIndex ))
	{
		//Assign error:
		*Err = OS_QUEUE_OUT_OF_RANGE;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f04f 0209 	mov.w	r2, #9
 8000c8c:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:450

		//and return Null pointer
		return(NULL);
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e012      	b.n	8000cba <uLipe_TaskQueryByIndex+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:457

	//since the index is in range and corresponds directly
	//to ready list table only indexes it with the passed
	//index.

	DesiredTask = (taskTCB_t*) TaskMainQueue[Index].TaskQueueData;
 8000c94:	79f9      	ldrb	r1, [r7, #7]
 8000c96:	f640 126c 	movw	r2, #2412	; 0x96c
 8000c9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca4:	185b      	adds	r3, r3, r1
 8000ca6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:460

	//Assign system ok:
	*Err = OS_OK;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:463

	//return succefull action..
	return((taskTCB_t *)DesiredTask);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:464
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f107 0710 	add.w	r7, r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <uLipe_TaskDropByIndex>:
uLipe_TaskDropByIndex():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:489
 	 	 	 	  	  	  	  	   removed.


 ************************************************************************/
os_error_t uLipe_TaskDropByIndex(uint8_t Index)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:491
	//Auxiliaries:
	uint8_t LoopCntr = 0;
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:494

	//check if queue is empty:
	if(OS_QUEUE_EMPTY == uLipe_EmptyQueue())
 8000cd4:	f7ff ffa0 	bl	8000c18 <uLipe_EmptyQueue>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d102      	bne.n	8000ce4 <uLipe_TaskDropByIndex+0x20>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:498
	{

		//return error:
		return(OS_QUEUE_EMPTY);
 8000cde:	f04f 0308 	mov.w	r3, #8
 8000ce2:	e097      	b.n	8000e14 <uLipe_TaskDropByIndex+0x150>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:502
	}

	//check if index corresponds to a ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000ce4:	f640 1360 	movw	r3, #2400	; 0x960
 8000ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cec:	7a1b      	ldrb	r3, [r3, #8]
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d20a      	bcs.n	8000d0a <uLipe_TaskDropByIndex+0x46>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:503
			(Index > TaskMainCtl.TailCurrIndex ))
 8000cf4:	f640 1360 	movw	r3, #2400	; 0x960
 8000cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfc:	7a5b      	ldrb	r3, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:502
		//return error:
		return(OS_QUEUE_EMPTY);
	}

	//check if index corresponds to a ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d902      	bls.n	8000d0a <uLipe_TaskDropByIndex+0x46>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:506
			(Index > TaskMainCtl.TailCurrIndex ))
	{
		//return a error of index
		return(OS_INDEX_OUT_OF_RANGE);
 8000d04:	f04f 030b 	mov.w	r3, #11
 8000d08:	e084      	b.n	8000e14 <uLipe_TaskDropByIndex+0x150>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:510
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e044      	b.n	8000d9a <uLipe_TaskDropByIndex+0xd6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:514
			LoopCntr++, Index = (Index + 1)% (NUMBER_OF_TASK + 1))
	{
		//we simply overwrite the current tcbs in one previous position:
		TaskMainQueue[LoopCntr].TaskQueueData =
 8000d10:	7bf8      	ldrb	r0, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:515
				TaskMainQueue[(LoopCntr + 1)%(NUMBER_OF_TASK + 1)].TaskQueueData;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f103 0101 	add.w	r1, r3, #1
 8000d18:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000d1c:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000d20:	fb83 2301 	smull	r2, r3, r3, r1
 8000d24:	ea4f 0263 	mov.w	r2, r3, asr #1
 8000d28:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8000d2c:	1ad2      	subs	r2, r2, r3
 8000d2e:	4613      	mov	r3, r2
 8000d30:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d34:	189b      	adds	r3, r3, r2
 8000d36:	1aca      	subs	r2, r1, r3
 8000d38:	f640 116c 	movw	r1, #2412	; 0x96c
 8000d3c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000d40:	4613      	mov	r3, r2
 8000d42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d46:	189b      	adds	r3, r3, r2
 8000d48:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d4c:	18cb      	adds	r3, r1, r3
 8000d4e:	6819      	ldr	r1, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:514
	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
			LoopCntr++, Index = (Index + 1)% (NUMBER_OF_TASK + 1))
	{
		//we simply overwrite the current tcbs in one previous position:
		TaskMainQueue[LoopCntr].TaskQueueData =
 8000d50:	f640 126c 	movw	r2, #2412	; 0x96c
 8000d54:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d58:	4603      	mov	r3, r0
 8000d5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d5e:	181b      	adds	r3, r3, r0
 8000d60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	6019      	str	r1, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:511
		return(OS_INDEX_OUT_OF_RANGE);
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
			LoopCntr++, Index = (Index + 1)% (NUMBER_OF_TASK + 1))
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	f103 0301 	add.w	r3, r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f103 0101 	add.w	r1, r3, #1
 8000d76:	f648 6339 	movw	r3, #36409	; 0x8e39
 8000d7a:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8000d7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d82:	ea4f 0263 	mov.w	r2, r3, asr #1
 8000d86:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	1aca      	subs	r2, r1, r3
 8000d96:	4613      	mov	r3, r2
 8000d98:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:510
		//return a error of index
		return(OS_INDEX_OUT_OF_RANGE);
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
 8000d9a:	f640 1360 	movw	r3, #2400	; 0x960
 8000d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000da2:	7a5b      	ldrb	r3, [r3, #9]
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d9b2      	bls.n	8000d10 <uLipe_TaskDropByIndex+0x4c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:519
		TaskMainQueue[LoopCntr].TaskQueueData =
				TaskMainQueue[(LoopCntr + 1)%(NUMBER_OF_TASK + 1)].TaskQueueData;

	}
	//updates the Tail
	TaskMainCtl.Tail = TaskMainCtl.Tail->PrevNode;
 8000daa:	f640 1360 	movw	r3, #2400	; 0x960
 8000dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	f640 1360 	movw	r3, #2400	; 0x960
 8000dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:522

	//updates the tail index:
	TaskMainCtl.TailCurrIndex--;
 8000dc0:	f640 1360 	movw	r3, #2400	; 0x960
 8000dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dc8:	7a5b      	ldrb	r3, [r3, #9]
 8000dca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	f640 1360 	movw	r3, #2400	; 0x960
 8000dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dd8:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:525

	//wraps to maximum queue table length:
	if(TaskMainCtl.TailCurrIndex > NUMBER_OF_TASK)
 8000dda:	f640 1360 	movw	r3, #2400	; 0x960
 8000dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000de2:	7a5b      	ldrb	r3, [r3, #9]
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d906      	bls.n	8000df6 <uLipe_TaskDropByIndex+0x132>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:527
	{
		TaskMainCtl.TailCurrIndex = NUMBER_OF_TASK;
 8000de8:	f640 1360 	movw	r3, #2400	; 0x960
 8000dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000df0:	f04f 0208 	mov.w	r2, #8
 8000df4:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:532
	}

	//decrements the queue size, since a "middle data"
	//was dequeued
	TaskMainCtl.QueueSize--;
 8000df6:	f640 1360 	movw	r3, #2400	; 0x960
 8000dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dfe:	7a9b      	ldrb	r3, [r3, #10]
 8000e00:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	f640 1360 	movw	r3, #2400	; 0x960
 8000e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e0e:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:535

	//Return ok!
	return(OS_OK);
 8000e10:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:536
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	f107 0710 	add.w	r7, r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <uLipe_Init>:
uLipe_Init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:549
 	 return:	 OS_OK - System ok, all objects were initialized.


 ************************************************************************/
os_error_t uLipe_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:551
	//Initialize the tasks control blocks:
	Task_InitBlocks();
 8000e24:	f000 f8f6 	bl	8001014 <Task_InitBlocks>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:564
	//Timers

	//Semaphores

	//reset the tick counter:
	TickCounter = 0;
 8000e28:	f240 0354 	movw	r3, #84	; 0x54
 8000e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:567

	//return ok
	return(OS_OK);
 8000e36:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:568
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop

08000e40 <uLipe_Schedule>:
uLipe_Schedule():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:584
 	 return:	 N/A


 ************************************************************************/
void  uLipe_Schedule(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:586
	//auxiliar tcb pointer:
	taskTCB_t *AuxiliarTcb = NULL;
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:589

	//create a temporary status register:
	uint32_t StatusReg = 0;
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:592

	//a auxiliar index for search tasks:
	uint8_t  Index = 0, AuxiliarIndex = 0, Err = OS_OK;
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	73bb      	strb	r3, [r7, #14]
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:595

	//High priority task pointer must be 0 in first iteration:
	HighReadyTaskBlock = (taskTCB_t*)0;
 8000e64:	f240 0350 	movw	r3, #80	; 0x50
 8000e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:598

	//check if scheduler is not locked:
	if(SCHED_EN == ScheduleFlag)
 8000e72:	f240 0340 	movw	r3, #64	; 0x40
 8000e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f040 8085 	bne.w	8000f8c <uLipe_Schedule+0x14c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:602
	{
		//only schedule if queue is
		//not empty
		if(NULL != TaskMainCtl.QueueSize)
 8000e82:	f640 1360 	movw	r3, #2400	; 0x960
 8000e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e8a:	7a9b      	ldrb	r3, [r3, #10]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d06b      	beq.n	8000f68 <uLipe_Schedule+0x128>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:608
		{
			//if not empty search for ready tasks:

			//make head queue as a start point
			//to queury a queue:
			Index = TaskMainCtl.HeadCurrIndex;
 8000e90:	f640 1360 	movw	r3, #2400	; 0x960
 8000e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e98:	7a1b      	ldrb	r3, [r3, #8]
 8000e9a:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:611

			//perform a search:
			while(Index < TaskMainCtl.TailCurrIndex)
 8000e9c:	e031      	b.n	8000f02 <uLipe_Schedule+0xc2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:614
			{
				//create a critical code section:
				StatusReg = Asm_CriticalIn();
 8000e9e:	f7ff fca2 	bl	80007e6 <Asm_CriticalIn>
 8000ea2:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:617

				//query for current index task:
				AuxiliarTcb = (taskTCB_t*)uLipe_TaskQueryByIndex(Index, &Err);
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	f107 0303 	add.w	r3, r7, #3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fec5 	bl	8000c3c <uLipe_TaskQueryByIndex>
 8000eb2:	60b8      	str	r0, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:620

				//check for invalid value in HighPriorityReady:
				if((taskTCB_t *)NULL == HighReadyTaskBlock)
 8000eb4:	f240 0350 	movw	r3, #80	; 0x50
 8000eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d106      	bne.n	8000ed0 <uLipe_Schedule+0x90>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:623
				{
					//assign a valid value on it
					HighReadyTaskBlock = (taskTCB_t*)AuxiliarTcb;
 8000ec2:	f240 0350 	movw	r3, #80	; 0x50
 8000ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e011      	b.n	8000ef4 <uLipe_Schedule+0xb4>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:630
				else
				{
					//check which priority is higher, remember
					//that less value of priority most high is it:

					if(HighReadyTaskBlock->TaskPriority > AuxiliarTcb->TaskPriority)
 8000ed0:	f240 0350 	movw	r3, #80	; 0x50
 8000ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	7b5a      	ldrb	r2, [r3, #13]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	7b5b      	ldrb	r3, [r3, #13]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d907      	bls.n	8000ef4 <uLipe_Schedule+0xb4>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:634
					{
						//if a new high priority is appeared
						//get it
						HighReadyTaskBlock = (taskTCB_t *)AuxiliarTcb;
 8000ee4:	f240 0350 	movw	r3, #80	; 0x50
 8000ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:637

						//Save the candidate of most priority task on queue index:
						AuxiliarIndex = Index;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	73bb      	strb	r3, [r7, #14]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:643

					}
				}

				//go to next task in queue
				Index++;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f103 0301 	add.w	r3, r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:646

				//end of critical section.
				Asm_CriticalOut(StatusReg);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fc76 	bl	80007ee <Asm_CriticalOut>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:611
			//make head queue as a start point
			//to queury a queue:
			Index = TaskMainCtl.HeadCurrIndex;

			//perform a search:
			while(Index < TaskMainCtl.TailCurrIndex)
 8000f02:	f640 1360 	movw	r3, #2400	; 0x960
 8000f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f0a:	7a5b      	ldrb	r3, [r3, #9]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3c5      	bcc.n	8000e9e <uLipe_Schedule+0x5e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:652

			}


			//check if the most priority task is in top of queue:
			if(AuxiliarIndex == TaskMainCtl.HeadCurrIndex)
 8000f12:	f640 1360 	movw	r3, #2400	; 0x960
 8000f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f1a:	7a1b      	ldrb	r3, [r3, #8]
 8000f1c:	7bba      	ldrb	r2, [r7, #14]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d106      	bne.n	8000f30 <uLipe_Schedule+0xf0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:655
			{
				//The only dequeues it:
				AuxiliarTcb = (taskTCB_t*)uLipe_TaskDequeue(&Err);
 8000f22:	f107 0303 	add.w	r3, r7, #3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fe1c 	bl	8000b64 <uLipe_TaskDequeue>
 8000f2c:	60b8      	str	r0, [r7, #8]
 8000f2e:	e003      	b.n	8000f38 <uLipe_Schedule+0xf8>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:661
			}
			else
			{
				//if task is other position inside of queue
				//drop it
				uLipe_TaskDropByIndex(AuxiliarIndex);
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fec6 	bl	8000cc4 <uLipe_TaskDropByIndex>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:665
			}

			//create a critical code section:
			StatusReg = Asm_CriticalIn();
 8000f38:	f7ff fc55 	bl	80007e6 <Asm_CriticalIn>
 8000f3c:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:668

			//Disable scheduler:
			ScheduleFlag = SCHED_DIS;
 8000f3e:	f240 0340 	movw	r3, #64	; 0x40
 8000f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f46:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 8000f4a:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:671

			//Set task as running:
			HighReadyTaskBlock->TaskState = TASK_RUNNING;
 8000f4c:	f240 0350 	movw	r3, #80	; 0x50
 8000f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f04f 0203 	mov.w	r2, #3
 8000f5a:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:674

			//Perform a context switching:
			Asm_IntLevelContextChange();
 8000f5c:	f7ff fc4b 	bl	80007f6 <Asm_IntLevelContextChange>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:679



			//ends the critical section:
			Asm_CriticalOut(StatusReg);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fc44 	bl	80007ee <Asm_CriticalOut>
 8000f66:	e011      	b.n	8000f8c <uLipe_Schedule+0x14c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:686
		}
		else
		{

			//if no tasks ready, execute again the current task
			CurrentTaskBlock->TaskState = TASK_RUNNING;
 8000f68:	f240 034c 	movw	r3, #76	; 0x4c
 8000f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f04f 0203 	mov.w	r2, #3
 8000f76:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:689

			//make HighPriorityReady = CurrentTaskBlock:
			HighReadyTaskBlock = (taskTCB_t*)CurrentTaskBlock;
 8000f78:	f240 034c 	movw	r3, #76	; 0x4c
 8000f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f240 0350 	movw	r3, #80	; 0x50
 8000f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f8a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:711
		}
	}

	//updates the current TCB:
	//CurrentTaskBlock = (taskTCB_t *)HighReadyTaskBlock;
}
 8000f8c:	f107 0710 	add.w	r7, r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <uLipe_Start>:
uLipe_Start():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:730
	 	   to give its control to OS, but also it MUST be called after
	 	   all tasks were instaled and after a uLipe_Init().

 ************************************************************************/
void uLipe_Start(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:736

	//allocates a StatusRegister:
//	uint32_t StatusReg = 0x100;

	//Allocates a error variable:
	uint8_t Err = OS_OK;
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:739

	//pointer to task list:
	taskTCB_t *TaskList = (taskTCB_t *)NULL;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:742

	//first get the current task list:
	TaskList = (taskTCB_t*)Task_GetList();
 8000fa6:	f000 f945 	bl	8001234 <Task_GetList>
 8000faa:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:745

	//Go trhough task list and creates its initial frames:
	while((taskTCB_t*)NULL != TaskList)
 8000fac:	e005      	b.n	8000fba <uLipe_Start+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:748
	{
		//build initial stack frame:
		uLipe_StackFrameCreate((taskTCB_t*) TaskList);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fc80 	bl	80008b4 <uLipe_StackFrameCreate>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:751

		//go to next task:
		TaskList = TaskList->NextTask;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:745

	//first get the current task list:
	TaskList = (taskTCB_t*)Task_GetList();

	//Go trhough task list and creates its initial frames:
	while((taskTCB_t*)NULL != TaskList)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f6      	bne.n	8000fae <uLipe_Start+0x1a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:759
	//Create critical code section:
   //StatusReg = Asm_CriticalIn();

	//Since the stack frames are created,
	//initialize the task ready list:
	uLipe_TaskQueueInit();
 8000fc0:	f7ff fcda 	bl	8000978 <uLipe_TaskQueueInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:762

	//the system is ready to execute, get the first task in current task:
	CurrentTaskBlock = (taskTCB_t*)uLipe_TaskDequeue(&Err);
 8000fc4:	f107 0303 	add.w	r3, r7, #3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fdcb 	bl	8000b64 <uLipe_TaskDequeue>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	f240 034c 	movw	r3, #76	; 0x4c
 8000fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fd8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:765

	//Init Tick counter system (low-Level)
	Asm_LowLevelTickInit(TIMER_LOAD);
 8000fda:	f641 0029 	movw	r0, #6185	; 0x1829
 8000fde:	f2c0 0017 	movt	r0, #23
 8000fe2:	f7ff fbed 	bl	80007c0 <Asm_LowLevelTickInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:768

	//Unlock scheduler:
	ScheduleFlag = SCHED_EN;
 8000fe6:	f240 0340 	movw	r3, #64	; 0x40
 8000fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:771

	//and finally schedule at first time:
	uLipe_Schedule();
 8000ff4:	f7ff ff24 	bl	8000e40 <uLipe_Schedule>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:777

	//should not get here:
	while(1)
	{

	}
 8000ff8:	e7fe      	b.n	8000ff8 <uLipe_Start+0x64>
 8000ffa:	bf00      	nop

08000ffc <uLipe_GetCurrentTick>:
uLipe_GetCurrentTick():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:890
 	 return:	 - Current tick counter value.


 ************************************************************************/
uint32_t uLipe_GetCurrentTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:892
	//return the current count:
	return(TickCounter);
 8001000:	f240 0354 	movw	r3, #84	; 0x54
 8001004:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001008:	681b      	ldr	r3, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:893
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <Task_InitBlocks>:
Task_InitBlocks():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:92
 	 return:	N/A


 ************************************************************************/
void Task_InitBlocks(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:94
	//fill with zeros all TCBS!
	memset(&TaskBlockList, NULL, sizeof(TaskBlockList));
 8001018:	f640 20d8 	movw	r0, #2776	; 0xad8
 800101c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001020:	f04f 0100 	mov.w	r1, #0
 8001024:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001028:	f000 f924 	bl	8001274 <memset>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:95
}
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop

08001030 <Task_Create>:
Task_Create():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:144
 ************************************************************************/
os_error_t 	Task_Create
			(taskptr_t (*TaskAction), os_stack_t *TaskStack,
			uint8_t TaskPriority, os_taskname_t *TaskName,
			uint8_t NameSize,os_stack_t StackSize)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:145
	taskTCB_t *TaskList 		= &TaskBlockList,
 8001040:	f640 23d8 	movw	r3, #2776	; 0xad8
 8001044:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001048:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:146
			  *TaskToBeLinked	= &TaskBlockList;
 800104a:	f640 23d8 	movw	r3, #2776	; 0xad8
 800104e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001052:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:148

	uint8_t    LoopCntr = 0;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	76fb      	strb	r3, [r7, #27]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:151

	//check for size of taskname:
	if(NameSize > 32)
 800105a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800105e:	2b20      	cmp	r3, #32
 8001060:	d902      	bls.n	8001068 <Task_Create+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:154
	{
		//return error if too long
		return(OS_NAME_TOO_LONG);
 8001062:	f04f 0305 	mov.w	r3, #5
 8001066:	e0db      	b.n	8001220 <Task_Create+0x1f0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:158
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	76fb      	strb	r3, [r7, #27]
 800106e:	e052      	b.n	8001116 <Task_Create+0xe6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:161
	{
		//check if current TCB is empty
		if(EMPTY == TaskList->EmptyTCB)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d137      	bne.n	80010e8 <Task_Create+0xb8>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:166
		{
			//if yes,fill the task TCB

			//put the task function
			TaskList->TaskAction =(taskptr_t *)TaskAction;
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:170

			//put the task stack, and points to its top.
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
								  (StackSize>>2) - 1);
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	ea4f 0393 	mov.w	r3, r3, lsr #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:169

			//put the task function
			TaskList->TaskAction =(taskptr_t *)TaskAction;

			//put the task stack, and points to its top.
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
 8001084:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001088:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	18d2      	adds	r2, r2, r3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:173
								  (StackSize>>2) - 1);

			//check for priority given
			if(TaskPriority < MAX_PRIORITY || TaskPriority > LESS_PRIORITY)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b1f      	cmp	r3, #31
 8001098:	d902      	bls.n	80010a0 <Task_Create+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:176
			{
				//return if the priority is invalid
				return(OS_PRIORITY_OUT_OF_RANGE);
 800109a:	f04f 0303 	mov.w	r3, #3
 800109e:	e0bf      	b.n	8001220 <Task_Create+0x1f0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:183

			//if priority is ok, continues to fill
			//the TCB

			//mask, and put the priority
			TaskList->TaskPriority = TaskPriority & 0x1F;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:186

			//Points to the task name
			TaskList->TaskName = TaskName;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	615a      	str	r2, [r3, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:189

			//puts the calculated ID
			TaskList->TaskID   = LoopCntr;
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	7efa      	ldrb	r2, [r7, #27]
 80010b6:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:192

			//reset the time elapsed counter
			TaskList->TaskElapsedTime = uLipe_GetCurrentTick();
 80010b8:	f7ff ffa0 	bl	8000ffc <uLipe_GetCurrentTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:196

			//calculate its deadline, based on
			//its priority
			TaskList->TaskTime = TICKS;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f04f 0209 	mov.w	r2, #9
 80010c8:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:199

			//Put the initial TCB state
			TaskList->TaskState   = TASK_READY;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:202

			//if all gone well, occupies the TCB
			TaskList->EmptyTCB    =  FILLED;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80010d8:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:205

			//Set the first time execution flag.
			TaskList->TaskFlags  |= TASK_FLAG_IS_FIRST_TIME;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:208

			//filled TCB, break this loop
			break;
 80010e6:	e019      	b.n	800111c <Task_Create+0xec>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:214

		}
		else
		{
			//else, try next TCB
			TaskList = &TaskBlockList[LoopCntr];
 80010e8:	7efa      	ldrb	r2, [r7, #27]
 80010ea:	4613      	mov	r3, r2
 80010ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80010f0:	189b      	adds	r3, r3, r2
 80010f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80010f6:	f640 22d8 	movw	r2, #2776	; 0xad8
 80010fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:217

			//check for tasklist full
			if(NUMBER_OF_TASK - 1  <  LoopCntr)
 8001102:	7efb      	ldrb	r3, [r7, #27]
 8001104:	2b07      	cmp	r3, #7
 8001106:	d902      	bls.n	800110e <Task_Create+0xde>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:220
			{
				//if yes, return error
				return(OS_TASKLIST_FULL);
 8001108:	f04f 0302 	mov.w	r3, #2
 800110c:	e088      	b.n	8001220 <Task_Create+0x1f0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:158
		//return error if too long
		return(OS_NAME_TOO_LONG);
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 800110e:	7efb      	ldrb	r3, [r7, #27]
 8001110:	f103 0301 	add.w	r3, r3, #1
 8001114:	76fb      	strb	r3, [r7, #27]
 8001116:	7efb      	ldrb	r3, [r7, #27]
 8001118:	2b08      	cmp	r3, #8
 800111a:	d9a9      	bls.n	8001070 <Task_Create+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:229
	}
	//after fill the taskblock is time to insert it on the
	//tasklist linked list

	//Points first to the last TCB in Table(is head)
	TaskList = &TaskBlockList[NUMBER_OF_TASK];
 800111c:	4b43      	ldr	r3, [pc, #268]	; (800122c <Task_Create+0x1fc>)
 800111e:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:232

	//check if Idle TCB was already initialized:
	if(EMPTY == TaskList->EmptyTCB)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d14a      	bne.n	80011be <Task_Create+0x18e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:237
	{
		//if not, initialize it.

		//Put the task function (Task Idle)
		TaskList->TaskAction = (taskptr_t *)& Task_Idle;
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f241 2349 	movw	r3, #4681	; 0x1249
 800112e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001132:	61d3      	str	r3, [r2, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:240

		//Points to task stack
		TaskList->TaskStack  = (os_stack_t *)(IdleTaskStack +
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	4a3e      	ldr	r2, [pc, #248]	; (8001230 <Task_Create+0x200>)
 8001138:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:244
							   (sizeof(IdleTaskStack) >> 2) - 1);

		//Assign its priority(is the least)
		TaskList->TaskPriority = LESS_PRIORITY + 1;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f04f 0220 	mov.w	r2, #32
 8001140:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:247

		//Assign its name pointing to it
		TaskList->TaskName = (os_taskname_t *) &IdleName;
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	f240 0344 	movw	r3, #68	; 0x44
 8001148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800114c:	6153      	str	r3, [r2, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:250

		//Its ID is always the greater on tasklist
		TaskList->TaskID = NUMBER_OF_TASK + 1;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f04f 0209 	mov.w	r2, #9
 8001154:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:253

		//Reset its time counter
		TaskList->TaskElapsedTime = uLipe_GetCurrentTick();
 8001156:	f7ff ff51 	bl	8000ffc <uLipe_GetCurrentTick>
 800115a:	4602      	mov	r2, r0
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:256

		//Assign its Deadline based on its priority
		TaskList->TaskTime = TICKS;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f04f 0209 	mov.w	r2, #9
 8001166:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:259

		//Set the initial state
		TaskList->TaskState   = TASK_READY;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:262

		//Occupie its TCB
		TaskList->EmptyTCB    =  FILLED;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001176:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:265

		//Additionally, attach its as head of tasklist
		TaskList->NextTask    = &TaskBlockList[LoopCntr];
 8001178:	7efa      	ldrb	r2, [r7, #27]
 800117a:	4613      	mov	r3, r2
 800117c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001180:	189b      	adds	r3, r3, r2
 8001182:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001186:	f640 22d8 	movw	r2, #2776	; 0xad8
 800118a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800118e:	189a      	adds	r2, r3, r2
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:268

		//attach next task...
		TaskList = TaskList->NextTask;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:271

		//...and the previous task
		TaskList->PrevTask = &TaskBlockList[NUMBER_OF_TASK];
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <Task_Create+0x1fc>)
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:274

		//marks the end of list
		TaskList->NextTask = END_LIST;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:277

		//Declare that task has never executed
		TaskList->TaskFlags |= TASK_FLAG_IS_FIRST_TIME;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e025      	b.n	8001202 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:289
	{

		while(END_LIST != TaskList->NextTask)
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	e000      	b.n	80011c0 <Task_Create+0x190>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:286
	//if Head of list exists, then attach the
	//TCB desired on it.
	else
	{

		while(END_LIST != TaskList->NextTask)
 80011be:	bf00      	nop
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f6      	bne.n	80011b6 <Task_Create+0x186>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:295
		}

		//when the end of list is found

		//The last item of list points to our new TCB
		TaskList->NextTask = &TaskBlockList[LoopCntr - 1];
 80011c8:	7efb      	ldrb	r3, [r7, #27]
 80011ca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80011ce:	4613      	mov	r3, r2
 80011d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011d4:	189b      	adds	r3, r3, r2
 80011d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80011da:	f640 22d8 	movw	r2, #2776	; 0xad8
 80011de:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011e2:	189a      	adds	r2, r3, r2
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:298

		//and our new TCB...
		TaskToBeLinked     = TaskList->NextTask;
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:301

		//...points to the ex-last item as previous task
		TaskToBeLinked->PrevTask = TaskList;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:304

		//marks the new end of list
		TaskList = TaskList->NextTask;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:307


		TaskList->NextTask = END_LIST;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:312

	}

	//Increment task installed counter:
	TaskInstalledCounter++;
 8001202:	f240 0358 	movw	r3, #88	; 0x58
 8001206:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	f103 0301 	add.w	r3, r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f240 0358 	movw	r3, #88	; 0x58
 8001216:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800121a:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:315

	//return a ok, if all gone well :)
	return(OS_OK);
 800121c:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:316
}
 8001220:	4618      	mov	r0, r3
 8001222:	f107 0720 	add.w	r7, r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000c18 	.word	0x20000c18
 8001230:	20000ad4 	.word	0x20000ad4

08001234 <Task_GetList>:
Task_GetList():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:696
 	 	 	 	 	 	 	   never change in list.


 ************************************************************************/
taskTCB_t* Task_GetList(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:698
	//simply get the tasklist from idle task:
	return((taskTCB_t *)&TaskBlockList[NUMBER_OF_TASK]);
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <Task_GetList+0x10>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:700

}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000c18 	.word	0x20000c18

08001248 <Task_Idle>:
Task_Idle():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:717
 	 return:	  N/A


 ************************************************************************/
void Task_Idle(void *TaskArgs)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:719
	//Execution counter, used for statistical
	uint32_t ExecutionCounter = 0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:722

	//Allocates a status register:
	uint32_t StatusReg = 0;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:727

	while(1)
	{

		StatusReg = Asm_CriticalIn();
 800125c:	f7ff fac3 	bl	80007e6 <Asm_CriticalIn>
 8001260:	60b8      	str	r0, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:730

		//each task execution this counter is incremented
		ExecutionCounter++;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f103 0301 	add.w	r3, r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:732

		Asm_CriticalOut(StatusReg);
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f7ff fabf 	bl	80007ee <Asm_CriticalOut>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:733
	}
 8001270:	e7f4      	b.n	800125c <Task_Idle+0x14>
 8001272:	bf00      	nop

08001274 <memset>:
memset():
 8001274:	b4f0      	push	{r4, r5, r6, r7}
 8001276:	0784      	lsls	r4, r0, #30
 8001278:	4603      	mov	r3, r0
 800127a:	f000 808e 	beq.w	800139a <memset+0x126>
 800127e:	1e54      	subs	r4, r2, #1
 8001280:	2a00      	cmp	r2, #0
 8001282:	f000 8088 	beq.w	8001396 <memset+0x122>
 8001286:	07e5      	lsls	r5, r4, #31
 8001288:	b2ce      	uxtb	r6, r1
 800128a:	d411      	bmi.n	80012b0 <memset+0x3c>
 800128c:	461a      	mov	r2, r3
 800128e:	1e67      	subs	r7, r4, #1
 8001290:	f802 6b01 	strb.w	r6, [r2], #1
 8001294:	4613      	mov	r3, r2
 8001296:	4615      	mov	r5, r2
 8001298:	0792      	lsls	r2, r2, #30
 800129a:	d00f      	beq.n	80012bc <memset+0x48>
 800129c:	2c00      	cmp	r4, #0
 800129e:	d07a      	beq.n	8001396 <memset+0x122>
 80012a0:	f803 6b01 	strb.w	r6, [r3], #1
 80012a4:	079a      	lsls	r2, r3, #30
 80012a6:	463c      	mov	r4, r7
 80012a8:	461d      	mov	r5, r3
 80012aa:	d007      	beq.n	80012bc <memset+0x48>
 80012ac:	3c01      	subs	r4, #1
 80012ae:	e7ed      	b.n	800128c <memset+0x18>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f803 6b01 	strb.w	r6, [r3], #1
 80012b6:	079a      	lsls	r2, r3, #30
 80012b8:	461d      	mov	r5, r3
 80012ba:	d1f7      	bne.n	80012ac <memset+0x38>
 80012bc:	2c03      	cmp	r4, #3
 80012be:	d952      	bls.n	8001366 <memset+0xf2>
 80012c0:	b2ce      	uxtb	r6, r1
 80012c2:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 80012c6:	2c0f      	cmp	r4, #15
 80012c8:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 80012cc:	d92d      	bls.n	800132a <memset+0xb6>
 80012ce:	f1a4 0210 	sub.w	r2, r4, #16
 80012d2:	4617      	mov	r7, r2
 80012d4:	2f0f      	cmp	r7, #15
 80012d6:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	606b      	str	r3, [r5, #4]
 80012de:	60ab      	str	r3, [r5, #8]
 80012e0:	60eb      	str	r3, [r5, #12]
 80012e2:	f105 0210 	add.w	r2, r5, #16
 80012e6:	d916      	bls.n	8001316 <memset+0xa2>
 80012e8:	b13e      	cbz	r6, 80012fa <memset+0x86>
 80012ea:	3f10      	subs	r7, #16
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	6053      	str	r3, [r2, #4]
 80012f0:	6093      	str	r3, [r2, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
 80012f4:	3210      	adds	r2, #16
 80012f6:	2f0f      	cmp	r7, #15
 80012f8:	d90d      	bls.n	8001316 <memset+0xa2>
 80012fa:	3f20      	subs	r7, #32
 80012fc:	f102 0610 	add.w	r6, r2, #16
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	6053      	str	r3, [r2, #4]
 8001304:	6093      	str	r3, [r2, #8]
 8001306:	60d3      	str	r3, [r2, #12]
 8001308:	6113      	str	r3, [r2, #16]
 800130a:	6153      	str	r3, [r2, #20]
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	61d3      	str	r3, [r2, #28]
 8001310:	3220      	adds	r2, #32
 8001312:	2f0f      	cmp	r7, #15
 8001314:	d8f1      	bhi.n	80012fa <memset+0x86>
 8001316:	f1a4 0210 	sub.w	r2, r4, #16
 800131a:	f022 020f 	bic.w	r2, r2, #15
 800131e:	f004 040f 	and.w	r4, r4, #15
 8001322:	3210      	adds	r2, #16
 8001324:	2c03      	cmp	r4, #3
 8001326:	4415      	add	r5, r2
 8001328:	d91d      	bls.n	8001366 <memset+0xf2>
 800132a:	1f27      	subs	r7, r4, #4
 800132c:	463e      	mov	r6, r7
 800132e:	462a      	mov	r2, r5
 8001330:	2e03      	cmp	r6, #3
 8001332:	f842 3b04 	str.w	r3, [r2], #4
 8001336:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800133a:	d90d      	bls.n	8001358 <memset+0xe4>
 800133c:	b127      	cbz	r7, 8001348 <memset+0xd4>
 800133e:	3e04      	subs	r6, #4
 8001340:	2e03      	cmp	r6, #3
 8001342:	f842 3b04 	str.w	r3, [r2], #4
 8001346:	d907      	bls.n	8001358 <memset+0xe4>
 8001348:	4617      	mov	r7, r2
 800134a:	3e08      	subs	r6, #8
 800134c:	f847 3b04 	str.w	r3, [r7], #4
 8001350:	6053      	str	r3, [r2, #4]
 8001352:	1d3a      	adds	r2, r7, #4
 8001354:	2e03      	cmp	r6, #3
 8001356:	d8f7      	bhi.n	8001348 <memset+0xd4>
 8001358:	1f23      	subs	r3, r4, #4
 800135a:	f023 0203 	bic.w	r2, r3, #3
 800135e:	1d13      	adds	r3, r2, #4
 8001360:	f004 0403 	and.w	r4, r4, #3
 8001364:	18ed      	adds	r5, r5, r3
 8001366:	b1b4      	cbz	r4, 8001396 <memset+0x122>
 8001368:	462b      	mov	r3, r5
 800136a:	b2c9      	uxtb	r1, r1
 800136c:	f803 1b01 	strb.w	r1, [r3], #1
 8001370:	192c      	adds	r4, r5, r4
 8001372:	43ed      	mvns	r5, r5
 8001374:	1962      	adds	r2, r4, r5
 8001376:	42a3      	cmp	r3, r4
 8001378:	f002 0501 	and.w	r5, r2, #1
 800137c:	d00b      	beq.n	8001396 <memset+0x122>
 800137e:	b11d      	cbz	r5, 8001388 <memset+0x114>
 8001380:	f803 1b01 	strb.w	r1, [r3], #1
 8001384:	42a3      	cmp	r3, r4
 8001386:	d006      	beq.n	8001396 <memset+0x122>
 8001388:	461a      	mov	r2, r3
 800138a:	f802 1b01 	strb.w	r1, [r2], #1
 800138e:	7059      	strb	r1, [r3, #1]
 8001390:	1c53      	adds	r3, r2, #1
 8001392:	42a3      	cmp	r3, r4
 8001394:	d1f8      	bne.n	8001388 <memset+0x114>
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	4770      	bx	lr
 800139a:	4605      	mov	r5, r0
 800139c:	4614      	mov	r4, r2
 800139e:	e78d      	b.n	80012bc <memset+0x48>
