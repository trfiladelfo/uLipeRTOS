
uLipeRTOS.elf:     file format elf32-littlearm
uLipeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x0000155c memsz 0x0000155c flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x0800155c align 2**15
         filesz 0x00000044 memsz 0x00000c54 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000284  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  08000284  08000284  00008284  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         000012d4  08000288  08000288  00008288  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000044  20000000  0800155c  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000b10  20000044  080015a0  00010044  2**2  ALLOC
  5 ._check_stack 00000100  20000b54  080020b0  00010044  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  00010044  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  000100b4  2**0  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  000100e8  2**3  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001ef9  00000000  00000000  00010370  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000908  00000000  00000000  00012269  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000220d  00000000  00000000  00012b71  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000670  00000000  00000000  00014d80  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060264  00000000  00000000  000153f0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ac2  00000000  00000000  00075654  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e8  00000000  00000000  00076116  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f62e  00000000  00000000  000762fe  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000284 l    d  ._inits	00000000 ._inits
08000288 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000044 l    d  .bss	00000000 .bss
20000b54 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tasks.c
2000008c l     O .bss	00000004 counter1.4232
20000090 l     O .bss	00000004 counter2.4233
20000094 l     O .bss	00000004 counter3.4234
20000080 l     O .bss	00000004 counter1.4239
20000084 l     O .bss	00000004 counter2.4240
20000088 l     O .bss	00000004 counter3.4241
20000074 l     O .bss	00000004 counter1.4246
20000078 l     O .bss	00000004 counter2.4247
2000007c l     O .bss	00000004 counter3.4248
20000068 l     O .bss	00000004 counter1.4253
2000006c l     O .bss	00000004 counter2.4254
20000070 l     O .bss	00000004 counter3.4255
2000005c l     O .bss	00000004 counter1.4260
20000060 l     O .bss	00000004 counter2.4261
20000064 l     O .bss	00000004 counter3.4262
20000050 l     O .bss	00000004 counter1.4267
20000054 l     O .bss	00000004 counter2.4268
20000058 l     O .bss	00000004 counter3.4269
20000044 l     O .bss	00000004 counter1.4274
20000048 l     O .bss	00000004 counter2.4275
2000004c l     O .bss	00000004 counter3.4276
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
080006b8 l     F .text	00000186 SetSysClock
080008d6 l       .text	00000000 FIRST_CHANGE
080008f6 l       .text	00000000 SECOND_CHANGE
080008c8 l       .text	00000000 NO_SAVE
00000000 l    df *ABS*	00000000 uLipe_Core.c
00000000 l    df *ABS*	00000000 uLipe_Task.c
00000000 l    df *ABS*	00000000 memset.c
08000288 l       ._inits	00000000 __fini_array_end
08000288 l       ._inits	00000000 __fini_array_start
08000288 l       ._inits	00000000 __init_array_end
08000288 l       ._inits	00000000 __preinit_array_end
08000288 l       ._inits	00000000 __init_array_start
08000284 l       ._inits	00000000 __preinit_array_start
0800022c  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
0800022c  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI2_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
08000434 g     F .text	00000034 TaskTry3
0800026c  w    F .isr_vector	00000006 DebugMon_Handler
08000284 g     O ._inits	00000004 p_system_init
20000000 g     O .data	00000007 Try
20000000 g       .data	00000000 __data_start__
2001fc00 g       *ABS*	00000000 _Heap_Limit
200001a8 g     O .bss	00000100 TaskTryStack8
0800022c  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
0800023c  w    F .isr_vector	00000010 HardFault_Handler
0800022c  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
080004d0 g     F .text	00000034 TaskTry6
20000098 g     O .bss	00000004 CurrentTaskBlock
080010b0 g     F .text	00000144 SysTick_Handler
0800022c  w    F .isr_vector	00000006 PVD_IRQHandler
0800022c  w    F .isr_vector	00000006 SDIO_IRQHandler
0800022c  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
00000400 g       *ABS*	00000000 _Main_Stack_Size
0800155c g       *ABS*	00000000 _sidata
08000892 g     F .text	00000006 PendSV_Handler
08000234  w    F .isr_vector	00000006 NMI_Handler
0800155c g       *ABS*	00000000 __exidx_end
080001d4 g     F .isr_vector	00000056 system_init
0800022c  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI3_IRQHandler
08001228 g     F .text	000001e8 Task_Create
08000866 g     F .text	00000000 Asm_CriticalIn
080009f8 g     F .text	000001ec uLipe_TaskQueueInit
20000b54 g       ._check_stack	00000000 _Heap_Begin
0800022c  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
0800155c g       *ABS*	00000000 _etext
20000044 g       .bss	00000000 _sbss
200008a8 g     O .bss	0000000c TaskMainCtl
2001fc00 g       *ABS*	00000000 __Main_Stack_Limit
0800022c  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
080011f4 g     F .text	00000016 uLipe_GetCurrentTick
200002a8 g     O .bss	00000100 TaskTryStack6
20000018 g     O .data	00000008 Try4
0800022c  w    F .isr_vector	00000006 EXTI0_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000b54 g       ._check_stack	00000000 _noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
0800022c  w    F .isr_vector	00000006 FPU_IRQHandler
200000a4 g     O .bss	00000001 ID
0800022c  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
0800025c  w    F .isr_vector	00000006 UsageFault_Handler
0800022c  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
20000044 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
0800022c  w    F .isr_vector	00000006 SPI1_IRQHandler
200000a0 g     O .bss	00000004 TickCounter
20000914 g     O .bss	00000100 IdleTaskStack
200003a8 g     O .bss	00000100 TaskTryStack7
0800022c  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
0800022c  w    F .isr_vector	00000006 DCMI_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20000010 g     O .data	00000008 Try3
08001410 g     F .text	00000014 Task_GetList
0800086e g     F .text	00000000 Asm_CriticalOut
0800155c g       *ABS*	00000000 __exidx_start
08000468 g     F .text	00000034 TaskTry4
0800022c  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
08000538 g     F .text	0000008e __libc_init_array
00000400 g       *ABS*	00000000 __Main_Stack_Size
08000876 g     F .text	00000000 Asm_IntLevelContextChange
08000d30 g     F .text	00000072 uLipe_TaskQueryByIndex
0800022c  w    F .isr_vector	00000006 USART6_IRQHandler
2000003c g     O .data	00000008 IdleName
0800022c  w    F .isr_vector	00000006 USART3_IRQHandler
200004a8 g     O .bss	00000100 TaskTryStack2
0800022c  w    F .isr_vector	00000006 CRYP_IRQHandler
080005c8 g     F .text	0000004e __libc_fini_array
20000b54 g       .bss	00000000 _ebss
08000188  w    F .isr_vector	0000004c Reset_Handler
0800022c  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
08000400 g     F .text	00000034 TaskTry2
0800022c  w    F .isr_vector	00000006 UART5_IRQHandler
08000934 g     F .text	000000c2 uLipe_StackFrameCreate
0800022c  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM4_IRQHandler
200005a8 g     O .bss	00000100 TaskTryStack4
0800022c  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
20000044 g       .data	00000000 __data_end__
08000ee4 g     F .text	0000001e uLipe_Init
08001048 g     F .text	00000066 uLipe_Start
08000da4 g     F .text	00000140 uLipe_TaskDropByIndex
0800022c  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 UART4_IRQHandler
20000b54 g       .bss	00000000 __bss_end__
0800022c  w    F .isr_vector	00000006 TIM3_IRQHandler
0800022c  w    F .isr_vector	00000006 RCC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
0800022c  w    F .isr_vector	00000006 Default_Handler
0800022c  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
0800022c  w    F .isr_vector	00000006 ADC_IRQHandler
20000a14 g     O .bss	00000140 TaskBlockList
20000020 g     O .data	00000008 Try5
20000b54 g       ._check_stack	00000000 _end_noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
0800120c g     F .text	0000001a Task_InitBlocks
0800022c  w    F .isr_vector	00000006 TIM7_IRQHandler
08000c84 g     F .text	000000ac uLipe_TaskDequeue
0800022c  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
20000028 g     O .data	00000008 Try6
08000f04 g     F .text	00000144 uLipe_Schedule
0800022c  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
0800022c  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
08000be4 g     F .text	0000009e uLipe_TaskEnqueue
0800022c  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 SPI2_IRQHandler
200008b4 g     O .bss	00000060 TaskMainQueue
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
08001430 g     F .text	0000012c memset
0800024c  w    F .isr_vector	00000006 MemManage_Handler
08000288 g     F .text	00000144 main
0800022c  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
08000840 g     F .text	00000000 Asm_LowLevelTickInit
08000264  w    F .isr_vector	00000006 SVC_Handler
20000038 g     O .data	00000001 ScheduleFlag
200006a8 g     O .bss	00000100 TaskTryStack3
0800022c  w    F .isr_vector	00000006 EXTI4_IRQHandler
08000504 g     F .text	00000034 TaskTry7
08000624 g     F .text	00000092 SystemInit
08001424 g     F .text	0000000a Task_Idle
0800022c  w    F .isr_vector	00000006 FSMC_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_IRQHandler
2000009c g     O .bss	00000004 HighReadyTaskBlock
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
0800022c  w    F .isr_vector	00000006 WWDG_IRQHandler
200000a8 g     O .bss	00000100 TaskTryStack
080003cc g     F .text	00000034 TaskTry
0800022c  w    F .isr_vector	00000006 TIM2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
20020000 g       *ABS*	00000000 __stack
0800022c  w    F .isr_vector	00000006 EXTI1_IRQHandler
20000044 g       .data	00000000 _edata
08000884 g     F .text	00000000 Asm_TaskLevelContextChange
0800022c  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	00000188 g_pfnVectors
0800022c  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
200007a8 g     O .bss	00000100 TaskTryStack5
0800022c  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 FLASH_IRQHandler
08000618  w    F .text	0000000a _exit
0800022c  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000254  w    F .isr_vector	00000006 BusFault_Handler
0800022c  w    F .isr_vector	00000006 USART1_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_IRQHandler
20000030 g     O .data	00000008 Try7
0800022c  w    F .isr_vector	00000006 SPI3_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
00000000         *UND*	00000000 TaskQuery
0800022c  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
0800049c g     F .text	00000034 TaskTry5
20000008 g     O .data	00000008 Try2
0800022c  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 89 01 00 08 35 02 00 08 3d 02 00 08     ... ....5...=...
 8000010:	4d 02 00 08 55 02 00 08 5d 02 00 08 00 00 00 00     M...U...].......
	...
 800002c:	65 02 00 08 6d 02 00 08 00 00 00 00 93 08 00 08     e...m...........
 800003c:	b1 10 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     ....-...-...-...
 800004c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800005c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800006c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800007c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800008c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800009c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ac:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000bc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000cc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000dc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ec:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000fc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800010c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800011c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800012c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800013c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800014c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800015c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800016c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800017c:	2d 02 00 08 2d 02 00 08 2d 02 00 08                 -...-...-...

08000188 <Reset_Handler>:
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	f240 0344 	movw	r3, #68	; 0x44
 8000192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	f640 3354 	movw	r3, #2900	; 0xb54
 800019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001a0:	607b      	str	r3, [r7, #4]
bss_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	e007      	b.n	80001b8 <Reset_Handler+0x30>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	f04f 0200 	mov.w	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f103 0304 	add.w	r3, r3, #4
 80001b6:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d8f3      	bhi.n	80001a8 <Reset_Handler+0x20>
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001c0:	f000 f9ba 	bl	8000538 <__libc_init_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001c4:	f000 f860 	bl	8000288 <__fini_array_end>
 80001c8:	60f8      	str	r0, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001ca:	f000 f9fd 	bl	80005c8 <__libc_fini_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f000 fa22 	bl	8000618 <_exit>

080001d4 <system_init>:
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	f241 535c 	movw	r3, #5468	; 0x155c
 80001de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	f240 0300 	movw	r3, #0
 80001e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	f240 0344 	movw	r3, #68	; 0x44
 80001f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001f6:	607b      	str	r3, [r7, #4]
data_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	e00b      	b.n	8000216 <system_init+0x42>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	f103 0304 	add.w	r3, r3, #4
 800020c:	603b      	str	r3, [r7, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f103 0304 	add.w	r3, r3, #4
 8000214:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d8ef      	bhi.n	80001fe <system_init+0x2a>
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 800021e:	f000 fa01 	bl	8000624 <SystemInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000222:	f107 0710 	add.w	r7, r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop

0800022c <ADC_IRQHandler>:
Default_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:433
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:436
  while (1)
    {
    }
 8000230:	e7fe      	b.n	8000230 <ADC_IRQHandler+0x4>
DMA1_Stream3_IRQHandler():
 8000232:	bf00      	nop

08000234 <NMI_Handler>:
NMI_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:445
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:448
  while (1)
    {
    }
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>
 800023a:	bf00      	nop

0800023c <HardFault_Handler>:
HardFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:453
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b0c3      	sub	sp, #268	; 0x10c
 8000240:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:458
  //debuggers:

 unsigned long  FaultStack[64];
 unsigned long *StackPointer;
 unsigned long  i= 0;
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:463

 while (1)
    {

    }
 800024a:	e7fe      	b.n	800024a <HardFault_Handler+0xe>

0800024c <MemManage_Handler>:
MemManage_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:471
  while (1)
    {
    }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
BusFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:479
  while (1)
    {
    }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
UsageFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:487
  while (1)
    {
    }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
SVC_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:495
  while (1)
    {
    }
 8000268:	e7fe      	b.n	8000268 <SVC_Handler+0x4>
 800026a:	bf00      	nop

0800026c <DebugMon_Handler>:
DebugMon_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:503
  while (1)
    {
    }
 8000270:	e7fe      	b.n	8000270 <DebugMon_Handler+0x4>
 8000272:	bf00      	nop
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:511
  while (1)
    {
    }
 8000278:	e7fe      	b.n	8000278 <DebugMon_Handler+0xc>
DebugMon_Handler():
 800027a:	bf00      	nop
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:516
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:519
  while (1)
    {
    }
 8000280:	e7fe      	b.n	8000280 <DebugMon_Handler+0x14>
DebugMon_Handler():
 8000282:	bf00      	nop

Disassembly of section .text:

08000288 <main>:
main():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:63
volatile os_taskID_t ID;


int
main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af02      	add	r7, sp, #8
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:66


	uLipe_Init();
 800028e:	f000 fe29 	bl	8000ee4 <uLipe_Init>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:68

	Task_Create(&TaskTry, &TaskTryStack, 0 , &Try, sizeof(Try),sizeof(TaskTryStack));
 8000292:	f04f 0307 	mov.w	r3, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	f240 30cd 	movw	r0, #973	; 0x3cd
 80002a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002a6:	f240 01a8 	movw	r1, #168	; 0xa8
 80002aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002ae:	f04f 0200 	mov.w	r2, #0
 80002b2:	f240 0300 	movw	r3, #0
 80002b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ba:	f000 ffb5 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:69
	Task_Create(&TaskTry2, &TaskTryStack2, 1 , &Try2, sizeof(Try2),sizeof(TaskTryStack));
 80002be:	f04f 0308 	mov.w	r3, #8
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	f240 4001 	movw	r0, #1025	; 0x401
 80002ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002d2:	f240 41a8 	movw	r1, #1192	; 0x4a8
 80002d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002da:	f04f 0201 	mov.w	r2, #1
 80002de:	f240 0308 	movw	r3, #8
 80002e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e6:	f000 ff9f 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:70
	Task_Create(&TaskTry3, &TaskTryStack3, 3 , &Try3, sizeof(Try2),sizeof(TaskTryStack));
 80002ea:	f04f 0308 	mov.w	r3, #8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	f240 4035 	movw	r0, #1077	; 0x435
 80002fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002fe:	f240 61a8 	movw	r1, #1704	; 0x6a8
 8000302:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000306:	f04f 0203 	mov.w	r2, #3
 800030a:	f240 0310 	movw	r3, #16
 800030e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000312:	f000 ff89 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:71
	Task_Create(&TaskTry4, &TaskTryStack4, 9 , &Try4, sizeof(Try2),sizeof(TaskTryStack));
 8000316:	f04f 0308 	mov.w	r3, #8
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	f240 4069 	movw	r0, #1129	; 0x469
 8000326:	f6c0 0000 	movt	r0, #2048	; 0x800
 800032a:	f240 51a8 	movw	r1, #1448	; 0x5a8
 800032e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000332:	f04f 0209 	mov.w	r2, #9
 8000336:	f240 0318 	movw	r3, #24
 800033a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800033e:	f000 ff73 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:72
	Task_Create(&TaskTry5, &TaskTryStack5, 7 , &Try5, sizeof(Try2),sizeof(TaskTryStack));
 8000342:	f04f 0308 	mov.w	r3, #8
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	f240 409d 	movw	r0, #1181	; 0x49d
 8000352:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000356:	f240 71a8 	movw	r1, #1960	; 0x7a8
 800035a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800035e:	f04f 0207 	mov.w	r2, #7
 8000362:	f240 0320 	movw	r3, #32
 8000366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800036a:	f000 ff5d 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:73
	Task_Create(&TaskTry6, &TaskTryStack6, 2 , &Try6, sizeof(Try2),sizeof(TaskTryStack));
 800036e:	f04f 0308 	mov.w	r3, #8
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	f240 40d1 	movw	r0, #1233	; 0x4d1
 800037e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000382:	f240 21a8 	movw	r1, #680	; 0x2a8
 8000386:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800038a:	f04f 0202 	mov.w	r2, #2
 800038e:	f240 0328 	movw	r3, #40	; 0x28
 8000392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000396:	f000 ff47 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:74
	Task_Create(&TaskTry7, &TaskTryStack7, 12 , &Try7, sizeof(Try2),sizeof(TaskTryStack));
 800039a:	f04f 0308 	mov.w	r3, #8
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	f240 5005 	movw	r0, #1285	; 0x505
 80003aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003ae:	f240 31a8 	movw	r1, #936	; 0x3a8
 80003b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003b6:	f04f 020c 	mov.w	r2, #12
 80003ba:	f240 0330 	movw	r3, #48	; 0x30
 80003be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003c2:	f000 ff31 	bl	8001228 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:76

	uLipe_Start();
 80003c6:	f000 fe3f 	bl	8001048 <uLipe_Start>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:83





	while (1);
 80003ca:	e7fe      	b.n	80003ca <main+0x142>

080003cc <TaskTry>:
TaskTry():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:40
os_stack_t TaskTryStack8[64];
os_taskname_t Try8[8] = {"TaskTry8"};


taskptr_t TaskTry(void *TaskArgs)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:48
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 250;
 80003d4:	f240 038c 	movw	r3, #140	; 0x8c
 80003d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003dc:	f04f 02fa 	mov.w	r2, #250	; 0xfa
 80003e0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:49
		counter2 = 225;
 80003e2:	f240 0390 	movw	r3, #144	; 0x90
 80003e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ea:	f04f 02e1 	mov.w	r2, #225	; 0xe1
 80003ee:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:50
		counter3 = 350;
 80003f0:	f240 0394 	movw	r3, #148	; 0x94
 80003f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80003fc:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:51
	}
 80003fe:	e7e9      	b.n	80003d4 <TaskTry+0x8>

08000400 <TaskTry2>:
TaskTry2():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:56

}

taskptr_t TaskTry2(void *TaskArgs)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:63
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 8000408:	f240 0380 	movw	r3, #128	; 0x80
 800040c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000410:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000414:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:64
		counter2 = 150;
 8000416:	f240 0384 	movw	r3, #132	; 0x84
 800041a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800041e:	f04f 0296 	mov.w	r2, #150	; 0x96
 8000422:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:65
		counter3 = 175;
 8000424:	f240 0388 	movw	r3, #136	; 0x88
 8000428:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800042c:	f04f 02af 	mov.w	r2, #175	; 0xaf
 8000430:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:66
	}
 8000432:	e7e9      	b.n	8000408 <TaskTry2+0x8>

08000434 <TaskTry3>:
TaskTry3():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:71
}


taskptr_t TaskTry3(void *TaskArgs)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:79
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 800043c:	f240 0374 	movw	r3, #116	; 0x74
 8000440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000444:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000448:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:80
		counter2 = 150;
 800044a:	f240 0378 	movw	r3, #120	; 0x78
 800044e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000452:	f04f 0296 	mov.w	r2, #150	; 0x96
 8000456:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:81
		counter3 = 175;
 8000458:	f240 037c 	movw	r3, #124	; 0x7c
 800045c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000460:	f04f 02af 	mov.w	r2, #175	; 0xaf
 8000464:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:82
	}
 8000466:	e7e9      	b.n	800043c <TaskTry3+0x8>

08000468 <TaskTry4>:
TaskTry4():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:86
}

taskptr_t TaskTry4(void *TaskArgs)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:94
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 8000470:	f240 0368 	movw	r3, #104	; 0x68
 8000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000478:	f04f 0264 	mov.w	r2, #100	; 0x64
 800047c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:95
		counter2 = 150;
 800047e:	f240 036c 	movw	r3, #108	; 0x6c
 8000482:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000486:	f04f 0296 	mov.w	r2, #150	; 0x96
 800048a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:96
		counter3 = 175;
 800048c:	f240 0370 	movw	r3, #112	; 0x70
 8000490:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000494:	f04f 02af 	mov.w	r2, #175	; 0xaf
 8000498:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:97
	}
 800049a:	e7e9      	b.n	8000470 <TaskTry4+0x8>

0800049c <TaskTry5>:
TaskTry5():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:102
}


taskptr_t TaskTry5(void *TaskArgs)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:110
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 80004a4:	f240 035c 	movw	r3, #92	; 0x5c
 80004a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ac:	f04f 0264 	mov.w	r2, #100	; 0x64
 80004b0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:111
		counter2 = 150;
 80004b2:	f240 0360 	movw	r3, #96	; 0x60
 80004b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ba:	f04f 0296 	mov.w	r2, #150	; 0x96
 80004be:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:112
		counter3 = 175;
 80004c0:	f240 0364 	movw	r3, #100	; 0x64
 80004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004c8:	f04f 02af 	mov.w	r2, #175	; 0xaf
 80004cc:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:113
	}
 80004ce:	e7e9      	b.n	80004a4 <TaskTry5+0x8>

080004d0 <TaskTry6>:
TaskTry6():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:117
}

taskptr_t TaskTry6(void *TaskArgs)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:125
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 80004d8:	f240 0350 	movw	r3, #80	; 0x50
 80004dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004e0:	f04f 0264 	mov.w	r2, #100	; 0x64
 80004e4:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:126
		counter2 = 150;
 80004e6:	f240 0354 	movw	r3, #84	; 0x54
 80004ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ee:	f04f 0296 	mov.w	r2, #150	; 0x96
 80004f2:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:127
		counter3 = 175;
 80004f4:	f240 0358 	movw	r3, #88	; 0x58
 80004f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004fc:	f04f 02af 	mov.w	r2, #175	; 0xaf
 8000500:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:128
	}
 8000502:	e7e9      	b.n	80004d8 <TaskTry6+0x8>

08000504 <TaskTry7>:
TaskTry7():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:133
}


taskptr_t TaskTry7(void *TaskArgs)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:141
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 800050c:	f240 0344 	movw	r3, #68	; 0x44
 8000510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000514:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000518:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:142
		counter2 = 150;
 800051a:	f240 0348 	movw	r3, #72	; 0x48
 800051e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000522:	f04f 0296 	mov.w	r2, #150	; 0x96
 8000526:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:143
		counter3 = 175;
 8000528:	f240 034c 	movw	r3, #76	; 0x4c
 800052c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000530:	f04f 02af 	mov.w	r2, #175	; 0xaf
 8000534:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:144
	}
 8000536:	e7e9      	b.n	800050c <TaskTry7+0x8>

08000538 <__libc_init_array>:
__libc_init_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 800053e:	f240 2288 	movw	r2, #648	; 0x288
 8000542:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000546:	f240 2384 	movw	r3, #644	; 0x284
 800054a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000554:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 8000556:	f04f 0300 	mov.w	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	e00b      	b.n	8000576 <__libc_init_array+0x3e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:185
    __preinit_array_start[i]();
 800055e:	f240 2384 	movw	r3, #644	; 0x284
 8000562:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800056c:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f103 0301 	add.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	429a      	cmp	r2, r3
 800057c:	d3ef      	bcc.n	800055e <__libc_init_array+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 800057e:	f240 2288 	movw	r2, #648	; 0x288
 8000582:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000586:	f240 2388 	movw	r3, #648	; 0x288
 800058a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000594:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e00b      	b.n	80005b6 <__libc_init_array+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:194
    __init_array_start[i]();
 800059e:	f240 2388 	movw	r3, #648	; 0x288
 80005a2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ac:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f103 0301 	add.w	r3, r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3ef      	bcc.n	800059e <__libc_init_array+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 80005be:	f107 0708 	add.w	r7, r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop

080005c8 <__libc_fini_array>:
__libc_fini_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 80005ce:	f240 2288 	movw	r2, #648	; 0x288
 80005d2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80005d6:	f240 2388 	movw	r3, #648	; 0x288
 80005da:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80005e4:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e00d      	b.n	8000608 <__libc_fini_array+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:206
    __fini_array_start[i - 1]();
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80005f2:	f240 2388 	movw	r3, #648	; 0x288
 80005f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005fe:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1ee      	bne.n	80005ec <__libc_fini_array+0x24>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 800060e:	f107 0708 	add.w	r7, r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop

08000618 <_exit>:
_exit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:47
#if defined(DEBUG)
  while(1)
  ;
 8000620:	e7fe      	b.n	8000620 <_exit+0x8>
 8000622:	bf00      	nop

08000624 <SystemInit>:
SystemInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:338
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:345
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800062c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000630:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000634:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000638:	6812      	ldr	r2, [r2, #0]
 800063a:	f042 0201 	orr.w	r2, r2, #1
 800063e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:348

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000640:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000644:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000648:	f04f 0200 	mov.w	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:351

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800064e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000652:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000656:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800065a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000664:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000668:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:354

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800066a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800066e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000672:	f243 0210 	movw	r2, #12304	; 0x3010
 8000676:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800067a:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:357

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800067c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000684:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000688:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000692:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:360

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000694:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000698:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:368
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80006a2:	f000 f809 	bl	80006b8 <SetSysClock>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:374

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006a6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80006aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80006ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b2:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:376
#endif
}
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop

080006b8 <SetSysClock>:
SetSysClock():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:471
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:475
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006be:	f04f 0300 	mov.w	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:478
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80006d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006e0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:483
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80006e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f0:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:484
    StartUpCounter++;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f103 0301 	add.w	r3, r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:485
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d103      	bne.n	8000708 <SetSysClock+0x50>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000706:	d1ec      	bne.n	80006e2 <SetSysClock+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:487

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000708:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800070c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <SetSysClock+0x6a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:489
  {
    HSEStatus = (uint32_t)0x01;
 800071a:	f04f 0301 	mov.w	r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	e002      	b.n	8000728 <SetSysClock+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:493
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:496
  }

  if (HSEStatus == (uint32_t)0x01)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	f040 8082 	bne.w	8000834 <SetSysClock+0x17c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:499
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000730:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000734:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000738:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800073c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000740:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000742:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000746:	641a      	str	r2, [r3, #64]	; 0x40
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:500
    PWR->CR |= PWR_CR_VOS;
 8000748:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800074c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000750:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000754:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800075e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:503

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000760:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000764:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000768:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800076c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000770:	6892      	ldr	r2, [r2, #8]
 8000772:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:507

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000774:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800077c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000780:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000784:	6892      	ldr	r2, [r2, #8]
 8000786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800078a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:510
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800078c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000790:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000794:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000798:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800079c:	6892      	ldr	r2, [r2, #8]
 800079e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80007a2:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:522
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80007a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007ac:	f245 4219 	movw	r2, #21529	; 0x5419
 80007b0:	f2c0 7240 	movt	r2, #1856	; 0x740
 80007b4:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:526
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80007cc:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:529

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007ce:	bf00      	nop
 80007d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f6      	beq.n	80007d0 <SetSysClock+0x118>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:549
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80007e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80007e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007ea:	f240 7205 	movw	r2, #1797	; 0x705
 80007ee:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:558
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000800:	6892      	ldr	r2, [r2, #8]
 8000802:	f022 0203 	bic.w	r2, r2, #3
 8000806:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:559
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000808:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800080c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000810:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000814:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000818:	6892      	ldr	r2, [r2, #8]
 800081a:	f042 0202 	orr.w	r2, r2, #2
 800081e:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:562

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000820:	bf00      	nop
 8000822:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000826:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f003 030c 	and.w	r3, r3, #12
 8000830:	2b08      	cmp	r3, #8
 8000832:	d1f6      	bne.n	8000822 <SetSysClock+0x16a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:571
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000834:	f107 070c 	add.w	r7, r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <Asm_LowLevelTickInit>:
Asm_LowLevelTickInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:47
@************************************************************************
.thumb_func
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
 8000840:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
								@
		LDR  R1, =0xE000ED14	@SCB->CCR
 8000842:	4936      	ldr	r1, [pc, #216]	; (800091c <SECOND_CHANGE+0x26>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:50
		LDR  R2, [R1]			@
 8000844:	680a      	ldr	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:51
		ORR  R2,R2,#0x200		@Enable double word aling
 8000846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:52
		STR	 R2,[R1]			@
 800084a:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
								@
		LDR  R1, =0xE000E010    @Load the systick control register contents
 800084c:	4934      	ldr	r1, [pc, #208]	; (8000920 <SECOND_CHANGE+0x2a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:55
		MOVS R2, #0x00000000	@
 800084e:	2200      	movs	r2, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:56
		STR	 R2, [R1], #0x04	@
 8000850:	f841 2b04 	str.w	r2, [r1], #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:57
		STR  R0, [R1]			@Write the new value for load count
 8000854:	6008      	str	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:58
		SUBS R1, #0x04			@Points again to systick control gerister
 8000856:	3904      	subs	r1, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:61
								@
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
 8000858:	2203      	movs	r2, #3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:62
		STR  R2, [R1]		 	@Write back on the systick register, and points to
 800085a:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 800085c:	4931      	ldr	r1, [pc, #196]	; (8000924 <SECOND_CHANGE+0x2e>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:66
		MOVS  R0, #0xFF			@
 800085e:	20ff      	movs	r0, #255	; 0xff
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:67
		STRB  R0,[R1]			@set pend sv priority
 8000860:	7008      	strb	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:69
								@
		CPSIE  I				@Enable global interrupts
 8000862:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:70
		BX	LR					@Return from sub
 8000864:	4770      	bx	lr

08000866 <Asm_CriticalIn>:
Asm_CriticalIn():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:85
@
@
@************************************************************************
.thumb_func
Asm_CriticalIn:
		MRS     R0, PRIMASK			@save status register
 8000866:	f3ef 8010 	mrs	r0, PRIMASK
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:86
		CPSID	I					@disables all interrupts
 800086a:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:87
		BX		LR					@Return from sub
 800086c:	4770      	bx	lr

0800086e <Asm_CriticalOut>:
Asm_CriticalOut():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:103
@
@************************************************************************
.thumb_func
Asm_CriticalOut:

		MSR	    PRIMASK,R0				@retrieve saved sr register
 800086e:	f380 8810 	msr	PRIMASK, r0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:104
		CPSIE	I					@enables all interrupts
 8000872:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:105
		BX		LR					@Return from sub
 8000874:	4770      	bx	lr

08000876 <Asm_IntLevelContextChange>:
Asm_IntLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:122
@
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
 8000876:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:123
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000878:	482b      	ldr	r0, [pc, #172]	; (8000928 <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:124
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 800087a:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:127
									@exception
									@
		STR		R1,[R0]				@
 800087e:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:128
		CPSIE	I					@Enable interrupts
 8000880:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:130
									@
		BX LR 					  	@Return from sub
 8000882:	4770      	bx	lr

08000884 <Asm_TaskLevelContextChange>:
Asm_TaskLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:147
@
@************************************************************************
.thumb_func
Asm_TaskLevelContextChange:

		CPSID 	I					@Disables interrrupts
 8000884:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:148
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000886:	4828      	ldr	r0, [pc, #160]	; (8000928 <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:149
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 8000888:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:152
									@exception
									@
		STR		R1,[R0]				@
 800088c:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:153
		CPSIE	I					@Enable interrupts
 800088e:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:156
									@
									@
		BX 		LR 					@Return from sub
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:172
@
@
@************************************************************************
.thumb_func
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
 8000892:	f01e 0f04 	tst.w	lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:173
		IT		EQ						@if, it from a MSP usage
 8000896:	bf08      	it	eq
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:174
		BEQ		FIRST_CHANGE			@
 8000898:	f000 b81d 	beq.w	80008d6 <FIRST_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:176
										@
		LDR		R0, =HighReadyTaskBlock @if not,
 800089c:	4823      	ldr	r0, [pc, #140]	; (800092c <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:177
		LDR		R0,[R0]					@
 800089e:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:178
		LDR		R1,[R0]					@Check the current taskFLag
 80008a0:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:179
		TST		R1,#1					@Check if first time flag is set
 80008a2:	f011 0f01 	tst.w	r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:180
		IT		NE						@
 80008a6:	bf18      	it	ne
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:181
		BNE 	SECOND_CHANGE			@Jump for first context switch
 80008a8:	f000 b825 	bne.w	80008f6 <SECOND_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:184
										@
										@if, not, runs context switch normally
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 80008ac:	4820      	ldr	r0, [pc, #128]	; (8000930 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:185
		LDR		R0,[R0]					@
 80008ae:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:186
		MRS		R1, PSP					@Get the current SP
 80008b0:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:187
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 80008b4:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:189
										@
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 80008b8:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:191
										@
		LDR		R0,=HighReadyTaskBlock  @Get the first task from de queue
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:192
		LDR		R0,[R0]					@Get the new stack pointer
 80008bc:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:193
		LDR		R1, [R0,#0x00000018]	@
 80008be:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:195
									    @
		LDMIA	R1!,{R4 - R11}			@Reload R4 -- R11
 80008c0:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:196
		MSR		PSP , R1				@write the new stackpointer
 80008c4:	f381 8809 	msr	PSP, r1

080008c8 <NO_SAVE>:
NO_SAVE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:199
NO_SAVE:								@
										@update the new current tcb
		LDR     R0, =HighReadyTaskBlock	@
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:200
		LDR		R0, [R0]				@
 80008ca:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:201
		LDR		R1,=CurrentTaskBlock	@
 80008cc:	4918      	ldr	r1, [pc, #96]	; (8000930 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:202
		STR		R0, [R1]				@
 80008ce:	6008      	str	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:203
		ORR     LR,LR,#0x00000004		@ensures that return in PSP
 80008d0:	f04e 0e04 	orr.w	lr, lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:204
		BX		LR						@Return from sub
 80008d4:	4770      	bx	lr

080008d6 <FIRST_CHANGE>:
FIRST_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:207
										@
FIRST_CHANGE:							@
		MOVS    R4, #0x02				@if the first run
 80008d6:	2402      	movs	r4, #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:208
		MSR	    CONTROL, R4				@uses PSP always
 80008d8:	f384 8814 	msr	CONTROL, r4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:209
		ISB								@recommended after write control
 80008dc:	f3bf 8f6f 	isb	sy
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:210
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 80008e0:	4812      	ldr	r0, [pc, #72]	; (800092c <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:211
		LDR		R0,[R0]					@Get the new stack pointer
 80008e2:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:212
		LDR		R1,[R0]					@Get task flags
 80008e4:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:213
		BIC		R1,R1,#1				@clear first time flag
 80008e6:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:214
		STR		R1,[R0]					@
 80008ea:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:215
		LDR		R1, [R0,#0x00000018]	@
 80008ec:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:216
		MSR     PSP,R1					@Load the first stack pointer
 80008ee:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:217
		B		NO_SAVE					@
 80008f2:	f7ff bfe9 	b.w	80008c8 <NO_SAVE>

080008f6 <SECOND_CHANGE>:
SECOND_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:220

SECOND_CHANGE:
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:221
		LDR		R0,[R0]					@
 80008f8:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:222
		MRS		R1, PSP					@Get the current SP
 80008fa:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:223
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 80008fe:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:224
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 8000902:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:226
										@
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:227
		LDR		R0,[R0]					@Get the new stack pointer
 8000906:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:228
		LDR		R1,[R0]					@Get task flags
 8000908:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:229
		BIC		R1,R1,#1				@clear first time flag
 800090a:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:230
		STR		R1,[R0]					@
 800090e:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:231
		LDR		R1, [R0,#0x00000018]	@
 8000910:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:232
		MSR     PSP,R1					@Load the first stack pointer
 8000912:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:233
		B		NO_SAVE					@
 8000916:	f7ff bfd7 	b.w	80008c8 <NO_SAVE>
 800091a:	0000      	.short	0x0000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
								@
		LDR  R1, =0xE000ED14	@SCB->CCR
 800091c:	e000ed14 	.word	0xe000ed14
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
		LDR  R2, [R1]			@
		ORR  R2,R2,#0x200		@Enable double word aling
		STR	 R2,[R1]			@
								@
		LDR  R1, =0xE000E010    @Load the systick control register contents
 8000920:	e000e010 	.word	0xe000e010
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
		STR  R2, [R1]		 	@Write back on the systick register, and points to
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 8000924:	e000ed22 	.word	0xe000ed22
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:123
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000928:	e000ed04 	.word	0xe000ed04
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:176
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
		IT		EQ						@if, it from a MSP usage
		BEQ		FIRST_CHANGE			@
										@
		LDR		R0, =HighReadyTaskBlock @if not,
 800092c:	2000009c 	.word	0x2000009c
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:184
		TST		R1,#1					@Check if first time flag is set
		IT		NE						@
		BNE 	SECOND_CHANGE			@Jump for first context switch
										@
										@if, not, runs context switch normally
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000930:	20000098 	.word	0x20000098

08000934 <uLipe_StackFrameCreate>:
uLipe_StackFrameCreate():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:137
 	 return:	TODO


 ************************************************************************/
void uLipe_StackFrameCreate(taskTCB_t *CurrTask)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:141
	//create a stack frame for this TCB:

	//first the APSR register
	*--CurrTask->TaskStack = 0x01000000;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f1a3 0204 	sub.w	r2, r3, #4
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	619a      	str	r2, [r3, #24]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000950:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:143
	//Now the current PC (first address of task method)
	*--CurrTask->TaskStack = (uint32_t)CurrTask->TaskAction;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f1a3 0204 	sub.w	r2, r3, #4
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	619a      	str	r2, [r3, #24]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	69d2      	ldr	r2, [r2, #28]
 8000966:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:145
	//The LR register with exc_return with PSP
	*--CurrTask->TaskStack = 0xFFFFFFFD;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f1a3 0204 	sub.w	r2, r3, #4
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f06f 0202 	mvn.w	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:147
	//R12
	*--CurrTask->TaskStack = 0x00;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f1a3 0204 	sub.w	r2, r3, #4
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	619a      	str	r2, [r3, #24]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:149
	//R3
	*--CurrTask->TaskStack = 0x00;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f1a3 0204 	sub.w	r2, r3, #4
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	619a      	str	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f04f 0200 	mov.w	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:151
	//R2
	*--CurrTask->TaskStack = 0x00;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f1a3 0204 	sub.w	r2, r3, #4
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	619a      	str	r2, [r3, #24]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:153
	//R1
	*--CurrTask->TaskStack = 0x00;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f1a3 0204 	sub.w	r2, r3, #4
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	619a      	str	r2, [r3, #24]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:155
	//R0
	*--CurrTask->TaskStack = 0x00;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f1a3 0204 	sub.w	r2, r3, #4
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	619a      	str	r2, [r3, #24]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:156
}
 80009ec:	f107 070c 	add.w	r7, r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <uLipe_TaskQueueInit>:
uLipe_TaskQueueInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:169
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskQueueInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:171
	//create a temporary TCB
	taskTCB_t *CurrTask = NULL;
 80009fe:	f04f 0300 	mov.w	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:173

	uint8_t LoopCntr = 0;
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:178

	//initializes the QueueControl block:

	//first the head
	TaskMainCtl.Head = (TaskQueue_t *) &TaskMainQueue[0];
 8000a0a:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a12:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000a16:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a1a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:181

	//Now the tail:
	TaskMainCtl.Tail = (TaskQueue_t *) &TaskMainQueue[0];
 8000a1c:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a24:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000a28:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a2c:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:184

	//The queue size:
	TaskMainCtl.QueueSize = 0;
 8000a2e:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:187

	//Initialize indexes:
	TaskMainCtl.HeadCurrIndex = TaskMainCtl.TailCurrIndex = 0;
 8000a3c:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	725a      	strb	r2, [r3, #9]
 8000a4a:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a52:	7a5a      	ldrb	r2, [r3, #9]
 8000a54:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a5c:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:190

	//mount a circular queue:
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK; LoopCntr++)
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	70fb      	strb	r3, [r7, #3]
 8000a64:	e077      	b.n	8000b56 <uLipe_TaskQueueInit+0x15e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:193
	{
		//for last iteration we should to wrap next fillment:
		if(NUMBER_OF_TASK == LoopCntr)
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d113      	bne.n	8000a94 <uLipe_TaskQueueInit+0x9c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:196
		{
			//attach a new queue cell on the list:
			TaskMainQueue[LoopCntr].NextNode =
 8000a6c:	78f9      	ldrb	r1, [r7, #3]
 8000a6e:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000a72:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a76:	460b      	mov	r3, r1
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	185b      	adds	r3, r3, r1
 8000a7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a82:	18d3      	adds	r3, r2, r3
 8000a84:	f103 0208 	add.w	r2, r3, #8
 8000a88:	f640 03b4 	movw	r3, #2228	; 0x8b4
 8000a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e01c      	b.n	8000ace <uLipe_TaskQueueInit+0xd6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:202
					&TaskMainQueue[0];
		}
		else
		{
			//attach a new queue cell on the list:
			TaskMainQueue[LoopCntr].NextNode =
 8000a94:	78f9      	ldrb	r1, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:203
					&TaskMainQueue[LoopCntr + 1];
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	f103 0201 	add.w	r2, r3, #1
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000aa8:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000aac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ab0:	1898      	adds	r0, r3, r2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:202
					&TaskMainQueue[0];
		}
		else
		{
			//attach a new queue cell on the list:
			TaskMainQueue[LoopCntr].NextNode =
 8000ab2:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000ab6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000aba:	460b      	mov	r3, r1
 8000abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac0:	185b      	adds	r3, r3, r1
 8000ac2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	f103 0308 	add.w	r3, r3, #8
 8000acc:	6018      	str	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:207
					&TaskMainQueue[LoopCntr + 1];
		}

		//Fill the data with null pointer:
		TaskMainQueue[LoopCntr].TaskQueueData = NULL;
 8000ace:	78f9      	ldrb	r1, [r7, #3]
 8000ad0:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ad8:	460b      	mov	r3, r1
 8000ada:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ade:	185b      	adds	r3, r3, r1
 8000ae0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:211


		//For first iteration we should wrap previos fillment
		if(LoopCntr == 0)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d110      	bne.n	8000b14 <uLipe_TaskQueueInit+0x11c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:214
		{
			//and attach the previous elements:
			TaskMainQueue[LoopCntr].PrevNode =
 8000af2:	78f9      	ldrb	r1, [r7, #3]
 8000af4:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000af8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000afc:	460b      	mov	r3, r1
 8000afe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b02:	185b      	adds	r3, r3, r1
 8000b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	f103 0304 	add.w	r3, r3, #4
 8000b0e:	4a34      	ldr	r2, [pc, #208]	; (8000be0 <uLipe_TaskQueueInit+0x1e8>)
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e01c      	b.n	8000b4e <uLipe_TaskQueueInit+0x156>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:220
					&TaskMainQueue[NUMBER_OF_TASK];
		}
		else
		{
			//and attach the previous elements:
			TaskMainQueue[LoopCntr].PrevNode =
 8000b14:	78f9      	ldrb	r1, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:221
					&TaskMainQueue[LoopCntr - 1];
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b22:	189b      	adds	r3, r3, r2
 8000b24:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b28:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000b2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b30:	1898      	adds	r0, r3, r2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:220
					&TaskMainQueue[NUMBER_OF_TASK];
		}
		else
		{
			//and attach the previous elements:
			TaskMainQueue[LoopCntr].PrevNode =
 8000b32:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000b36:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b46:	18d3      	adds	r3, r2, r3
 8000b48:	f103 0304 	add.w	r3, r3, #4
 8000b4c:	6018      	str	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:190

	//Initialize indexes:
	TaskMainCtl.HeadCurrIndex = TaskMainCtl.TailCurrIndex = 0;

	//mount a circular queue:
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK; LoopCntr++)
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	f103 0301 	add.w	r3, r3, #1
 8000b54:	70fb      	strb	r3, [r7, #3]
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	2b07      	cmp	r3, #7
 8000b5a:	d984      	bls.n	8000a66 <uLipe_TaskQueueInit+0x6e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:228
		}
	}
	//since queue is mounted, let take the tasklist:

	//get the idle task address:
	CurrTask = (taskTCB_t *)Task_GetList();
 8000b5c:	f000 fc58 	bl	8001410 <Task_GetList>
 8000b60:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:231

	//searches the queue for ready tasks:
	while(END_LIST != CurrTask)
 8000b62:	e032      	b.n	8000bca <uLipe_TaskQueueInit+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:234
	{
		//check for ready task:
		if(TASK_READY == CurrTask->TaskState)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7bdb      	ldrb	r3, [r3, #15]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d12b      	bne.n	8000bc4 <uLipe_TaskQueueInit+0x1cc>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:237
		{
			//if it ready the put into queue:
			TaskMainCtl.Tail->TaskQueueData = (taskTCB_t *)CurrTask;
 8000b6c:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:240

			//advances the queue for next free list:
			TaskMainCtl.Tail = (TaskQueue_t *)TaskMainCtl.Tail->NextNode;
 8000b7a:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:243

			//Increments the bottom queue current index:
			TaskMainCtl.TailCurrIndex++;
 8000b90:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b98:	7a5b      	ldrb	r3, [r3, #9]
 8000b9a:	f103 0301 	add.w	r3, r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba8:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:246

			//increments the queue size:
			TaskMainCtl.QueueSize++;
 8000baa:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bb2:	7a9b      	ldrb	r3, [r3, #10]
 8000bb4:	f103 0301 	add.w	r3, r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc2:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:251

			/**THE QUEUE WILL NEVER OVERFLOWS**/
		}
		//go to next task:
		CurrTask = (taskTCB_t *)CurrTask->NextTask;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a1b      	ldr	r3, [r3, #32]
 8000bc8:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:231

	//get the idle task address:
	CurrTask = (taskTCB_t *)Task_GetList();

	//searches the queue for ready tasks:
	while(END_LIST != CurrTask)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1c9      	bne.n	8000b64 <uLipe_TaskQueueInit+0x16c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:258

	/* At this point we get:
	   TaskMainCtl.Head = TaskMainQueue[0] and
	   TaskMainCtl.Tail = TaskMainQueue[LoopCntr]
	 */
	return(OS_OK);
 8000bd0:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:260

}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f107 0708 	add.w	r7, r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000908 	.word	0x20000908

08000be4 <uLipe_TaskEnqueue>:
uLipe_TaskEnqueue():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:273
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskEnqueue(taskTCB_t *CurrTask)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:275
	//check for queue full:
	if((NUMBER_OF_TASK + 1) <= TaskMainCtl.QueueSize)
 8000bec:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf4:	7a9b      	ldrb	r3, [r3, #10]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d902      	bls.n	8000c00 <uLipe_TaskEnqueue+0x1c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:278
	{
		//return queue full error:
		return(OS_QUEUE_FULL);
 8000bfa:	f04f 0307 	mov.w	r3, #7
 8000bfe:	e03a      	b.n	8000c76 <uLipe_TaskEnqueue+0x92>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:282
	}
	//Since the tail is pointing for a freelist put
	//TCB on its position:
	TaskMainCtl.Tail->TaskQueueData =
 8000c00:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:287
			(taskTCB_t *)CurrTask;

	//advances the queue tail for next freelist:
	TaskMainCtl.Tail =
			(TaskQueue_t *)TaskMainCtl.Tail->NextNode;
 8000c0e:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:286
	//TCB on its position:
	TaskMainCtl.Tail->TaskQueueData =
			(taskTCB_t *)CurrTask;

	//advances the queue tail for next freelist:
	TaskMainCtl.Tail =
 8000c1a:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:290
			(TaskQueue_t *)TaskMainCtl.Tail->NextNode;

	//advances the counter:
	TaskMainCtl.QueueSize++;
 8000c24:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c2c:	7a9b      	ldrb	r3, [r3, #10]
 8000c2e:	f103 0301 	add.w	r3, r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c3c:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:293

	//advances tail index:
	TaskMainCtl.TailCurrIndex = (TaskMainCtl.TailCurrIndex + 1)
 8000c3e:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c46:	7a5b      	ldrb	r3, [r3, #9]
 8000c48:	f103 0201 	add.w	r2, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:294
			% (NUMBER_OF_TASK + 1);
 8000c4c:	f04f 0307 	mov.w	r3, #7
 8000c50:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	da05      	bge.n	8000c66 <uLipe_TaskEnqueue+0x82>
 8000c5a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000c5e:	f063 0307 	orn	r3, r3, #7
 8000c62:	f103 0301 	add.w	r3, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:293

	//advances the counter:
	TaskMainCtl.QueueSize++;

	//advances tail index:
	TaskMainCtl.TailCurrIndex = (TaskMainCtl.TailCurrIndex + 1)
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c70:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:297
			% (NUMBER_OF_TASK + 1);

	//return ok:
	return(OS_OK);
 8000c72:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:299

}
 8000c76:	4618      	mov	r0, r3
 8000c78:	f107 070c 	add.w	r7, r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <uLipe_TaskDequeue>:
uLipe_TaskDequeue():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:312
 	 return:	TODO


 ************************************************************************/
taskTCB_t* uLipe_TaskDequeue(os_error_t *Err)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:315
	//TemporaryTCB:
	taskTCB_t* pTCB = (taskTCB_t *)
			TaskMainCtl.Head->TaskQueueData;
 8000c8c:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c94:	681b      	ldr	r3, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:314

 ************************************************************************/
taskTCB_t* uLipe_TaskDequeue(os_error_t *Err)
{
	//TemporaryTCB:
	taskTCB_t* pTCB = (taskTCB_t *)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:318
			TaskMainCtl.Head->TaskQueueData;

	//check if queue is empty first:
	if(NULL == TaskMainCtl.QueueSize)
 8000c9a:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ca2:	7a9b      	ldrb	r3, [r3, #10]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d106      	bne.n	8000cb6 <uLipe_TaskDequeue+0x32>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:321
	{
		//Assign the error:
		*Err = OS_QUEUE_EMPTY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f04f 0208 	mov.w	r2, #8
 8000cae:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:324

		//return the error:
		return(NULL);
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e036      	b.n	8000d24 <uLipe_TaskDequeue+0xa0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:332
	//if not lets remove the TCB is in
	//top of queue:
	//CurrTask = (taskTCB_t *)&pTCB;

	//Move Head for new top of queue:
	TaskMainCtl.Head = (TaskQueue_t *)TaskMainCtl.Head->NextNode;
 8000cb6:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cca:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:336

	//Decrement the size,since a element was removed from
	//queue:
	TaskMainCtl.QueueSize--;
 8000ccc:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cd4:	7a9b      	ldrb	r3, [r3, #10]
 8000cd6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ce4:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:339

	//Advances de the current index:
	TaskMainCtl.HeadCurrIndex = (TaskMainCtl.HeadCurrIndex + 1)
 8000ce6:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cee:	7a1b      	ldrb	r3, [r3, #8]
 8000cf0:	f103 0201 	add.w	r2, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:340
			% (NUMBER_OF_TASK + 1);
 8000cf4:	f04f 0307 	mov.w	r3, #7
 8000cf8:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da05      	bge.n	8000d0e <uLipe_TaskDequeue+0x8a>
 8000d02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000d06:	f063 0307 	orn	r3, r3, #7
 8000d0a:	f103 0301 	add.w	r3, r3, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:339
	//Decrement the size,since a element was removed from
	//queue:
	TaskMainCtl.QueueSize--;

	//Advances de the current index:
	TaskMainCtl.HeadCurrIndex = (TaskMainCtl.HeadCurrIndex + 1)
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d18:	721a      	strb	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:343
			% (NUMBER_OF_TASK + 1);

	//Assign no error:
	*Err = OS_OK;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:346

	//return a ok:
	return(pTCB);
 8000d22:	68fb      	ldr	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:347
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	f107 0714 	add.w	r7, r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <uLipe_TaskQueryByIndex>:
uLipe_TaskQueryByIndex():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:386
 	 return:	TODO


 ************************************************************************/
taskTCB_t* uLipe_TaskQueryByIndex(uint8_t Index, os_error_t *Err)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:388

	taskTCB_t * DesiredTask = NULL;
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:392

	//check if the current index comports a
	//ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000d42:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d4a:	7a1b      	ldrb	r3, [r3, #8]
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d20e      	bcs.n	8000d70 <uLipe_TaskQueryByIndex+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:393
			(Index > TaskMainCtl.TailCurrIndex ))
 8000d52:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d5a:	7a5b      	ldrb	r3, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:392

	taskTCB_t * DesiredTask = NULL;

	//check if the current index comports a
	//ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d906      	bls.n	8000d70 <uLipe_TaskQueryByIndex+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:396
			(Index > TaskMainCtl.TailCurrIndex ))
	{
		//Assign error:
		*Err = OS_QUEUE_OUT_OF_RANGE;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f04f 0209 	mov.w	r2, #9
 8000d68:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:399

		//and return Null pointer
		return(NULL);
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	e012      	b.n	8000d96 <uLipe_TaskQueryByIndex+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:406

	//since the index is in range and corresponds directly
	//to ready list table only indexes it with the passed
	//index.

	DesiredTask = (taskTCB_t*) TaskMainQueue[Index].TaskQueueData;
 8000d70:	79f9      	ldrb	r1, [r7, #7]
 8000d72:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000d76:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:409

	//Assign system ok:
	*Err = OS_OK;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:412

	//return succefull action..
	return((taskTCB_t *)DesiredTask);
 8000d94:	68fb      	ldr	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:413
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	f107 0714 	add.w	r7, r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <uLipe_TaskDropByIndex>:
uLipe_TaskDropByIndex():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:427
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_TaskDropByIndex(uint8_t Index)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:429
	//Auxiliaries:
	uint8_t LoopCntr = 0;
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:432

	//check if index corresponds to a ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000db4:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dbc:	7a1b      	ldrb	r3, [r3, #8]
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d20a      	bcs.n	8000dda <uLipe_TaskDropByIndex+0x36>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:433
			(Index > TaskMainCtl.TailCurrIndex ))
 8000dc4:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dcc:	7a5b      	ldrb	r3, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:432
{
	//Auxiliaries:
	uint8_t LoopCntr = 0;

	//check if index corresponds to a ready task:
	if((Index < TaskMainCtl.HeadCurrIndex ) &&
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d902      	bls.n	8000dda <uLipe_TaskDropByIndex+0x36>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:436
			(Index > TaskMainCtl.TailCurrIndex ))
	{
		//return a error of index
		return(OS_INDEX_OUT_OF_RANGE);
 8000dd4:	f04f 030b 	mov.w	r3, #11
 8000dd8:	e07e      	b.n	8000ed8 <uLipe_TaskDropByIndex+0x134>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:440
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e03e      	b.n	8000e5e <uLipe_TaskDropByIndex+0xba>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:444
			LoopCntr++, Index = (Index + 1)% (NUMBER_OF_TASK + 1))
	{
		//we simply overwrite the current tcbs in one previous position:
		TaskMainQueue[LoopCntr].TaskQueueData =
 8000de0:	7bf9      	ldrb	r1, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:445
				TaskMainQueue[(LoopCntr + 1)%(NUMBER_OF_TASK + 1)].TaskQueueData;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	f103 0201 	add.w	r2, r3, #1
 8000de8:	f04f 0307 	mov.w	r3, #7
 8000dec:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da05      	bge.n	8000e02 <uLipe_TaskDropByIndex+0x5e>
 8000df6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000dfa:	f063 0307 	orn	r3, r3, #7
 8000dfe:	f103 0301 	add.w	r3, r3, #1
 8000e02:	4618      	mov	r0, r3
 8000e04:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000e08:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e12:	181b      	adds	r3, r3, r0
 8000e14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	6818      	ldr	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:444
	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
			LoopCntr++, Index = (Index + 1)% (NUMBER_OF_TASK + 1))
	{
		//we simply overwrite the current tcbs in one previous position:
		TaskMainQueue[LoopCntr].TaskQueueData =
 8000e1c:	f640 02b4 	movw	r2, #2228	; 0x8b4
 8000e20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e24:	460b      	mov	r3, r1
 8000e26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e2a:	185b      	adds	r3, r3, r1
 8000e2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e30:	18d3      	adds	r3, r2, r3
 8000e32:	6018      	str	r0, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:441
		return(OS_INDEX_OUT_OF_RANGE);
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
			LoopCntr++, Index = (Index + 1)% (NUMBER_OF_TASK + 1))
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	f103 0301 	add.w	r3, r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f103 0201 	add.w	r2, r3, #1
 8000e42:	f04f 0307 	mov.w	r3, #7
 8000e46:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	da05      	bge.n	8000e5c <uLipe_TaskDropByIndex+0xb8>
 8000e50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000e54:	f063 0307 	orn	r3, r3, #7
 8000e58:	f103 0301 	add.w	r3, r3, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:440
		//return a error of index
		return(OS_INDEX_OUT_OF_RANGE);
	}

	//since the ready task exists, let remove it:
	for(LoopCntr = Index; LoopCntr <= TaskMainCtl.TailCurrIndex;
 8000e5e:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e66:	7a5b      	ldrb	r3, [r3, #9]
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d9b8      	bls.n	8000de0 <uLipe_TaskDropByIndex+0x3c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:449
		TaskMainQueue[LoopCntr].TaskQueueData =
				TaskMainQueue[(LoopCntr + 1)%(NUMBER_OF_TASK + 1)].TaskQueueData;

	}
	//updates the Tail
	TaskMainCtl.Tail = TaskMainCtl.Tail->PrevNode;
 8000e6e:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e82:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:452

	//updates the tail index:
	TaskMainCtl.TailCurrIndex--;
 8000e84:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e8c:	7a5b      	ldrb	r3, [r3, #9]
 8000e8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e9c:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:455

	//wraps to maximum queue table length:
	if(TaskMainCtl.TailCurrIndex > NUMBER_OF_TASK)
 8000e9e:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea6:	7a5b      	ldrb	r3, [r3, #9]
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	d906      	bls.n	8000eba <uLipe_TaskDropByIndex+0x116>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:457
	{
		TaskMainCtl.TailCurrIndex = NUMBER_OF_TASK;
 8000eac:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eb4:	f04f 0207 	mov.w	r2, #7
 8000eb8:	725a      	strb	r2, [r3, #9]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:462
	}

	//decrements the queue size, since a "middle data"
	//was dequeued
	TaskMainCtl.QueueSize--;
 8000eba:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec2:	7a9b      	ldrb	r3, [r3, #10]
 8000ec4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed2:	729a      	strb	r2, [r3, #10]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:465

	//Return ok!
	return(OS_OK);
 8000ed4:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:466
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f107 0714 	add.w	r7, r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <uLipe_Init>:
uLipe_Init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:479
 	 return:	TODO


 ************************************************************************/
os_error_t uLipe_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:481
	//Initialize the tasks control blocks:
	Task_InitBlocks();
 8000ee8:	f000 f990 	bl	800120c <Task_InitBlocks>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:494
	//Timers

	//Semaphores

	//reset the tick counter:
	TickCounter = 0;
 8000eec:	f240 03a0 	movw	r3, #160	; 0xa0
 8000ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:497

	//return ok
	return(OS_OK);
 8000efa:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:498
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop

08000f04 <uLipe_Schedule>:
uLipe_Schedule():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:511
 	 return:	TODO


 ************************************************************************/
void  uLipe_Schedule(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:513
	//auxiliar tcb pointer:
	taskTCB_t *AuxiliarTcb = NULL;
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:516

	//create a temporary status register:
	uint32_t StatusReg = 0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:519

	//a auxiliar index for search tasks:
	uint8_t  Index = 0, AuxiliarIndex = 0, Err = OS_OK;
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	73bb      	strb	r3, [r7, #14]
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:522

	//High priority task pointer must be 0 in first iteration:
	HighReadyTaskBlock = (taskTCB_t*)0;
 8000f28:	f240 039c 	movw	r3, #156	; 0x9c
 8000f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:525

	//check if scheduler is not locked:
	if(SCHED_EN == ScheduleFlag)
 8000f36:	f240 0338 	movw	r3, #56	; 0x38
 8000f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d17d      	bne.n	8001040 <uLipe_Schedule+0x13c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:529
	{
		//only schedule if queue is
		//not empty
		if(NULL != TaskMainCtl.QueueSize)
 8000f44:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f4c:	7a9b      	ldrb	r3, [r3, #10]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d064      	beq.n	800101c <uLipe_Schedule+0x118>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:535
		{
			//if not empty search for ready tasks:

			//make head queue as a start point
			//to queury a queue:
			Index = TaskMainCtl.HeadCurrIndex;
 8000f52:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f5a:	7a1b      	ldrb	r3, [r3, #8]
 8000f5c:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:538

			//perform a search:
			while(Index < TaskMainCtl.TailCurrIndex)
 8000f5e:	e031      	b.n	8000fc4 <uLipe_Schedule+0xc0>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:541
			{
				//create a critical code section:
				StatusReg = Asm_CriticalIn();
 8000f60:	f7ff fc81 	bl	8000866 <Asm_CriticalIn>
 8000f64:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:544

				//query for current index task:
				AuxiliarTcb = (taskTCB_t*)uLipe_TaskQueryByIndex(Index, &Err);
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	f107 0303 	add.w	r3, r7, #3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fede 	bl	8000d30 <uLipe_TaskQueryByIndex>
 8000f74:	60b8      	str	r0, [r7, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:547

				//check for invalid value in HighPriorityReady:
				if((taskTCB_t *)NULL == HighReadyTaskBlock)
 8000f76:	f240 039c 	movw	r3, #156	; 0x9c
 8000f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d106      	bne.n	8000f92 <uLipe_Schedule+0x8e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:550
				{
					//assign a valid value on it
					HighReadyTaskBlock = (taskTCB_t*)AuxiliarTcb;
 8000f84:	f240 039c 	movw	r3, #156	; 0x9c
 8000f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e011      	b.n	8000fb6 <uLipe_Schedule+0xb2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:557
				else
				{
					//check which priority is higher, remember
					//that less value of priority most high is it:

					if(HighReadyTaskBlock->TaskPriority > AuxiliarTcb->TaskPriority)
 8000f92:	f240 039c 	movw	r3, #156	; 0x9c
 8000f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7b5a      	ldrb	r2, [r3, #13]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	7b5b      	ldrb	r3, [r3, #13]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d907      	bls.n	8000fb6 <uLipe_Schedule+0xb2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:561
					{
						//if a new high priority is appeared
						//get it
						HighReadyTaskBlock = (taskTCB_t *)AuxiliarTcb;
 8000fa6:	f240 039c 	movw	r3, #156	; 0x9c
 8000faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:564

						//Save the candidate of most priority task on queue index:
						AuxiliarIndex = Index;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	73bb      	strb	r3, [r7, #14]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:570

					}
				}

				//go to next task in queue
				Index++;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f103 0301 	add.w	r3, r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:573

				//end of critical section.
				Asm_CriticalOut(StatusReg);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fc55 	bl	800086e <Asm_CriticalOut>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:538
			//make head queue as a start point
			//to queury a queue:
			Index = TaskMainCtl.HeadCurrIndex;

			//perform a search:
			while(Index < TaskMainCtl.TailCurrIndex)
 8000fc4:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fcc:	7a5b      	ldrb	r3, [r3, #9]
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3c5      	bcc.n	8000f60 <uLipe_Schedule+0x5c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:579

			}


			//check if the most priority task is in top of queue:
			if(AuxiliarIndex == TaskMainCtl.TailCurrIndex)
 8000fd4:	f640 03a8 	movw	r3, #2216	; 0x8a8
 8000fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fdc:	7a5b      	ldrb	r3, [r3, #9]
 8000fde:	7bba      	ldrb	r2, [r7, #14]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d106      	bne.n	8000ff2 <uLipe_Schedule+0xee>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:582
			{
				//The only dequeues it:
				AuxiliarTcb = (taskTCB_t*)uLipe_TaskDequeue(&Err);
 8000fe4:	f107 0303 	add.w	r3, r7, #3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe4b 	bl	8000c84 <uLipe_TaskDequeue>
 8000fee:	60b8      	str	r0, [r7, #8]
 8000ff0:	e003      	b.n	8000ffa <uLipe_Schedule+0xf6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:588
			}
			else
			{
				//if task is other position inside of queue
				//drop it
				uLipe_TaskDropByIndex(AuxiliarIndex);
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fed5 	bl	8000da4 <uLipe_TaskDropByIndex>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:592
			}

			//create a critical code section:
			StatusReg = Asm_CriticalIn();
 8000ffa:	f7ff fc34 	bl	8000866 <Asm_CriticalIn>
 8000ffe:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:595

			//Set task as running:
			HighReadyTaskBlock->TaskState = TASK_RUNNING;
 8001000:	f240 039c 	movw	r3, #156	; 0x9c
 8001004:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f04f 0203 	mov.w	r2, #3
 800100e:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:598

			//Perform a context switching:
			Asm_IntLevelContextChange();
 8001010:	f7ff fc31 	bl	8000876 <Asm_IntLevelContextChange>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:603



			//ends the critical section:
			Asm_CriticalOut(StatusReg);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fc2a 	bl	800086e <Asm_CriticalOut>
 800101a:	e011      	b.n	8001040 <uLipe_Schedule+0x13c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:610
		}
		else
		{

			//if no tasks ready, execute again the current task
			CurrentTaskBlock->TaskState = TASK_RUNNING;
 800101c:	f240 0398 	movw	r3, #152	; 0x98
 8001020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f04f 0203 	mov.w	r2, #3
 800102a:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:613

			//make HighPriorityReady = CurrentTaskBlock:
			HighReadyTaskBlock = (taskTCB_t*)CurrentTaskBlock;
 800102c:	f240 0398 	movw	r3, #152	; 0x98
 8001030:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f240 039c 	movw	r3, #156	; 0x9c
 800103a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800103e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:635
		}
	}

	//updates the current TCB:
	//CurrentTaskBlock = (taskTCB_t *)HighReadyTaskBlock;
}
 8001040:	f107 0710 	add.w	r7, r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <uLipe_Start>:
uLipe_Start():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:649
 	 return:	TODO


 ************************************************************************/
void uLipe_Start(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:655

	//allocates a StatusRegister:
//	uint32_t StatusReg = 0x100;

	//Allocates a error variable:
	uint8_t Err = OS_OK;
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:658

	//pointer to task list:
	taskTCB_t *TaskList = (taskTCB_t *)NULL;
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:661

	//first get the current task list:
	TaskList = (taskTCB_t*)Task_GetList();
 800105a:	f000 f9d9 	bl	8001410 <Task_GetList>
 800105e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:664

	//Go trhough task list and creates its initial frames:
	while((taskTCB_t*)NULL != TaskList)
 8001060:	e005      	b.n	800106e <uLipe_Start+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:667
	{
		//build initial stack frame:
		uLipe_StackFrameCreate((taskTCB_t*) TaskList);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fc66 	bl	8000934 <uLipe_StackFrameCreate>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:670

		//go to next task:
		TaskList = TaskList->NextTask;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:664

	//first get the current task list:
	TaskList = (taskTCB_t*)Task_GetList();

	//Go trhough task list and creates its initial frames:
	while((taskTCB_t*)NULL != TaskList)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f6      	bne.n	8001062 <uLipe_Start+0x1a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:678
	//Create critical code section:
   //StatusReg = Asm_CriticalIn();

	//Since the stack frames are created,
	//initialize the task ready list:
	uLipe_TaskQueueInit();
 8001074:	f7ff fcc0 	bl	80009f8 <uLipe_TaskQueueInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:681

	//the system is ready to execute, get the first task in current task:
	CurrentTaskBlock = (taskTCB_t*)uLipe_TaskDequeue(&Err);
 8001078:	f107 0303 	add.w	r3, r7, #3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fe01 	bl	8000c84 <uLipe_TaskDequeue>
 8001082:	4602      	mov	r2, r0
 8001084:	f240 0398 	movw	r3, #152	; 0x98
 8001088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800108c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:684

	//Init Tick counter system (low-Level)
	Asm_LowLevelTickInit(TIMER_LOAD);
 800108e:	f44f 4002 	mov.w	r0, #33280	; 0x8200
 8001092:	f2c0 0014 	movt	r0, #20
 8001096:	f7ff fbd3 	bl	8000840 <Asm_LowLevelTickInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:687

	//Unlock scheduler:
	ScheduleFlag = SCHED_EN;
 800109a:	f240 0338 	movw	r3, #56	; 0x38
 800109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:690

	//and finally schedule at first time:
	uLipe_Schedule();
 80010a8:	f7ff ff2c 	bl	8000f04 <uLipe_Schedule>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:696

	//should not get here:
	while(1)
	{

	}
 80010ac:	e7fe      	b.n	80010ac <uLipe_Start+0x64>
 80010ae:	bf00      	nop

080010b0 <SysTick_Handler>:
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:712
 	 return:	TODO


 ************************************************************************/
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:714
	//points to tasklist:
	taskTCB_t *TaskList = (taskTCB_t *) NULL;
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:717

	//allocates a status register:
	uint32_t StatusReg = 0;
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:720

	//Enable critical section:
	StatusReg = Asm_CriticalIn();
 80010c2:	f7ff fbd0 	bl	8000866 <Asm_CriticalIn>
 80010c6:	6038      	str	r0, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:723

	//Disable scheduling:
	ScheduleFlag = SCHED_DIS;
 80010c8:	f240 0338 	movw	r3, #56	; 0x38
 80010cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d0:	f04f 02aa 	mov.w	r2, #170	; 0xaa
 80010d4:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:726

	//First of all, update the current Tick:
	TickCounter++;
 80010d6:	f240 03a0 	movw	r3, #160	; 0xa0
 80010da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f103 0201 	add.w	r2, r3, #1
 80010e4:	f240 03a0 	movw	r3, #160	; 0xa0
 80010e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ec:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:729

	//Disable critical section:
	Asm_CriticalOut(StatusReg);
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff fbbd 	bl	800086e <Asm_CriticalOut>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:732

	//Get the head of tasklist:
	TaskList = (taskTCB_t*)Task_GetList();
 80010f4:	f000 f98c 	bl	8001410 <Task_GetList>
 80010f8:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:735

	//Check for a time quanta expiration:
	if(TICK <= TickCounter - CurrentTaskBlock->TaskElapsedTime)
 80010fa:	f240 03a0 	movw	r3, #160	; 0xa0
 80010fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f240 0398 	movw	r3, #152	; 0x98
 8001108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b07      	cmp	r3, #7
 8001114:	d965      	bls.n	80011e2 <SysTick_Handler+0x132>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:738
	{
		//Suspend the current task:
		CurrentTaskBlock->TaskState = TASK_SUSPEND;
 8001116:	f240 0398 	movw	r3, #152	; 0x98
 800111a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f04f 0201 	mov.w	r2, #1
 8001124:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:741

		//Store the current tick counter:
		CurrentTaskBlock->TaskElapsedTime = TickCounter;
 8001126:	f240 0398 	movw	r3, #152	; 0x98
 800112a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f240 03a0 	movw	r3, #160	; 0xa0
 8001134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6093      	str	r3, [r2, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:744

		//Enable Scheduling:
		ScheduleFlag = SCHED_EN;
 800113c:	f240 0338 	movw	r3, #56	; 0x38
 8001140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:749
	}

	//go trhough task list and executes
	//the admission control:
	while((taskTCB_t*)NULL != TaskList)
 800114a:	e04a      	b.n	80011e2 <SysTick_Handler+0x132>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:753
	{

		//check if task is not in ready state:
		if(TASK_READY != TaskList->TaskState)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7bdb      	ldrb	r3, [r3, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d043      	beq.n	80011dc <SysTick_Handler+0x12c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:756
		{
			//search if a tick already occurred:
			if(TICK <= (TickCounter - TaskList->TaskElapsedTime))
 8001154:	f240 03a0 	movw	r3, #160	; 0xa0
 8001158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b07      	cmp	r3, #7
 8001166:	d939      	bls.n	80011dc <SysTick_Handler+0x12c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:759
			{
				//then set this task as a ready:
				TaskList->TaskState = TASK_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:762

				//Read current tick counter:
				TaskList->TaskElapsedTime = TickCounter;
 8001170:	f240 03a0 	movw	r3, #160	; 0xa0
 8001174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:765

				//check if this task has more priority than current task:
				if((TaskList->TaskPriority > CurrentTaskBlock->TaskPriority)&&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b5a      	ldrb	r2, [r3, #13]
 8001182:	f240 0398 	movw	r3, #152	; 0x98
 8001186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	7b5b      	ldrb	r3, [r3, #13]
 800118e:	429a      	cmp	r2, r3
 8001190:	d921      	bls.n	80011d6 <SysTick_Handler+0x126>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:766
					CurrentTaskBlock->TaskState  != TASK_SUSPEND	)
 8001192:	f240 0398 	movw	r3, #152	; 0x98
 8001196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	7bdb      	ldrb	r3, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:765

				//Read current tick counter:
				TaskList->TaskElapsedTime = TickCounter;

				//check if this task has more priority than current task:
				if((TaskList->TaskPriority > CurrentTaskBlock->TaskPriority)&&
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d019      	beq.n	80011d6 <SysTick_Handler+0x126>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:769
					CurrentTaskBlock->TaskState  != TASK_SUSPEND	)
				{
					//Suspend current task execution
					CurrentTaskBlock->TaskState = TASK_SUSPEND;
 80011a2:	f240 0398 	movw	r3, #152	; 0x98
 80011a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f04f 0201 	mov.w	r2, #1
 80011b0:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:772

					//Get current current tick counter:
					CurrentTaskBlock->TaskElapsedTime = TickCounter;
 80011b2:	f240 0398 	movw	r3, #152	; 0x98
 80011b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f240 03a0 	movw	r3, #160	; 0xa0
 80011c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6093      	str	r3, [r2, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:775

					//Enable scheduling in order to preempt current task:
					ScheduleFlag = SCHED_EN;
 80011c8:	f240 0338 	movw	r3, #56	; 0x38
 80011cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:780
				}

				//Put this task control block on
				//ready list:
				uLipe_TaskEnqueue((taskTCB_t*) TaskList);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fd04 	bl	8000be4 <uLipe_TaskEnqueue>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:785
			}

		}
		//in other cases, go to next task:
		TaskList = TaskList->NextTask;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:749
		ScheduleFlag = SCHED_EN;
	}

	//go trhough task list and executes
	//the admission control:
	while((taskTCB_t*)NULL != TaskList)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1b1      	bne.n	800114c <SysTick_Handler+0x9c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:790
		TaskList = TaskList->NextTask;
	}

	//after proccess tick counter,
	//its time to schedule the next ready task:
	uLipe_Schedule();
 80011e8:	f7ff fe8c 	bl	8000f04 <uLipe_Schedule>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:792

}
 80011ec:	f107 0708 	add.w	r7, r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <uLipe_GetCurrentTick>:
uLipe_GetCurrentTick():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:805
 	 return:	TODO


 ************************************************************************/
uint32_t uLipe_GetCurrentTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:807
	//return the current count:
	return(TickCounter);
 80011f8:	f240 03a0 	movw	r3, #160	; 0xa0
 80011fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001200:	681b      	ldr	r3, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Core.c:808
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <Task_InitBlocks>:
Task_InitBlocks():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:89
 	 return:	TODO


 ************************************************************************/
void Task_InitBlocks(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:91
	//fill with zeros all TCBS!
	memset(&TaskBlockList, NULL, sizeof(TaskBlockList));
 8001210:	f640 2014 	movw	r0, #2580	; 0xa14
 8001214:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001218:	f04f 0100 	mov.w	r1, #0
 800121c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001220:	f000 f906 	bl	8001430 <memset>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:92
}
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop

08001228 <Task_Create>:
Task_Create():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:110
 ************************************************************************/
os_error_t 	Task_Create
			(taskptr_t (*TaskAction), os_stack_t *TaskStack,
			uint8_t TaskPriority, os_taskname_t *TaskName,
			uint8_t NameSize,os_stack_t StackSize)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	4613      	mov	r3, r2
 8001236:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:111
	taskTCB_t *TaskList 		= &TaskBlockList,
 8001238:	f640 2314 	movw	r3, #2580	; 0xa14
 800123c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001240:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:112
			  *TaskToBeLinked	= &TaskBlockList;
 8001242:	f640 2314 	movw	r3, #2580	; 0xa14
 8001246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800124a:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:114

	uint8_t    LoopCntr = 0;
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	76fb      	strb	r3, [r7, #27]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:117

	//check for size of taskname:
	if(NameSize > 32)
 8001252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001256:	2b20      	cmp	r3, #32
 8001258:	d902      	bls.n	8001260 <Task_Create+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:120
	{
		//return error if too long
		return(OS_NAME_TOO_LONG);
 800125a:	f04f 0305 	mov.w	r3, #5
 800125e:	e0ce      	b.n	80013fe <Task_Create+0x1d6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:124
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e052      	b.n	800130e <Task_Create+0xe6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:127
	{
		//check if current TCB is empty
		if(EMPTY == TaskList->EmptyTCB)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d137      	bne.n	80012e0 <Task_Create+0xb8>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:132
		{
			//if yes,fill the task TCB

			//put the task function
			TaskList->TaskAction =(taskptr_t *)TaskAction;
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:136

			//put the task stack, and points to its top.
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
								  (StackSize>>2) - 1);
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	ea4f 0393 	mov.w	r3, r3, lsr #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:135

			//put the task function
			TaskList->TaskAction =(taskptr_t *)TaskAction;

			//put the task stack, and points to its top.
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
 800127c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001280:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	18d2      	adds	r2, r2, r3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:139
								  (StackSize>>2) - 1);

			//check for priority given
			if(TaskPriority < MAX_PRIORITY || TaskPriority > LESS_PRIORITY)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b1f      	cmp	r3, #31
 8001290:	d902      	bls.n	8001298 <Task_Create+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:142
			{
				//return if the priority is invalid
				return(OS_PRIORITY_OUT_OF_RANGE);
 8001292:	f04f 0303 	mov.w	r3, #3
 8001296:	e0b2      	b.n	80013fe <Task_Create+0x1d6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:149

			//if priority is ok, continues to fill
			//the TCB

			//mask, and put the priority
			TaskList->TaskPriority = TaskPriority & 0x1F;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:152

			//Points to the task name
			TaskList->TaskName = TaskName;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	615a      	str	r2, [r3, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:155

			//puts the calculated ID
			TaskList->TaskID   = LoopCntr;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	7efa      	ldrb	r2, [r7, #27]
 80012ae:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:158

			//reset the time elapsed counter
			TaskList->TaskElapsedTime = uLipe_GetCurrentTick();
 80012b0:	f7ff ffa0 	bl	80011f4 <uLipe_GetCurrentTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:162

			//calculate its deadline, based on
			//its priority
			TaskList->TaskTime = 0;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:165

			//Put the initial TCB state
			TaskList->TaskState   = TASK_READY;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:168

			//if all gone well, occupies the TCB
			TaskList->EmptyTCB    =  FILLED;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80012d0:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:171

			//Set the first time execution flag.
			TaskList->TaskFlags  |= TASK_FLAG_IS_FIRST_TIME;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:174

			//filled TCB, break this loop
			break;
 80012de:	e019      	b.n	8001314 <Task_Create+0xec>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:180

		}
		else
		{
			//else, try next TCB
			TaskList = &TaskBlockList[LoopCntr];
 80012e0:	7efa      	ldrb	r2, [r7, #27]
 80012e2:	4613      	mov	r3, r2
 80012e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012e8:	189b      	adds	r3, r3, r2
 80012ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80012ee:	f640 2214 	movw	r2, #2580	; 0xa14
 80012f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80012f6:	189b      	adds	r3, r3, r2
 80012f8:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:183

			//check for tasklist full
			if(NUMBER_OF_TASK - 1  <  LoopCntr)
 80012fa:	7efb      	ldrb	r3, [r7, #27]
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d902      	bls.n	8001306 <Task_Create+0xde>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:186
			{
				//if yes, return error
				return(OS_TASKLIST_FULL);
 8001300:	f04f 0302 	mov.w	r3, #2
 8001304:	e07b      	b.n	80013fe <Task_Create+0x1d6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:124
		//return error if too long
		return(OS_NAME_TOO_LONG);
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8001306:	7efb      	ldrb	r3, [r7, #27]
 8001308:	f103 0301 	add.w	r3, r3, #1
 800130c:	76fb      	strb	r3, [r7, #27]
 800130e:	7efb      	ldrb	r3, [r7, #27]
 8001310:	2b07      	cmp	r3, #7
 8001312:	d9a9      	bls.n	8001268 <Task_Create+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:195
	}
	//after fill the taskblock is time to insert it on the
	//tasklist linked list

	//Points first to the last TCB in Table(is head)
	TaskList = &TaskBlockList[NUMBER_OF_TASK];
 8001314:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <Task_Create+0x1e0>)
 8001316:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:198

	//check if Idle TCB was already initialized:
	if(EMPTY == TaskList->EmptyTCB)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d14a      	bne.n	80013b6 <Task_Create+0x18e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:203
	{
		//if not, initialize it.

		//Put the task function (Task Idle)
		TaskList->TaskAction = (taskptr_t *)& Task_Idle;
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f241 4325 	movw	r3, #5157	; 0x1425
 8001326:	f6c0 0300 	movt	r3, #2048	; 0x800
 800132a:	61d3      	str	r3, [r2, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:206

		//Points to task stack
		TaskList->TaskStack  = (os_stack_t *)(IdleTaskStack +
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4a37      	ldr	r2, [pc, #220]	; (800140c <Task_Create+0x1e4>)
 8001330:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:210
							   (sizeof(IdleTaskStack) >> 2) - 1);

		//Assign its priority(is the least)
		TaskList->TaskPriority = LESS_PRIORITY + 1;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f04f 0220 	mov.w	r2, #32
 8001338:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:213

		//Assign its name pointing to it
		TaskList->TaskName = (os_taskname_t *) &IdleName;
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	f240 033c 	movw	r3, #60	; 0x3c
 8001340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001344:	6153      	str	r3, [r2, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:216

		//Its ID is always the greater on tasklist
		TaskList->TaskID = NUMBER_OF_TASK + 1;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f04f 0208 	mov.w	r2, #8
 800134c:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:219

		//Reset its time counter
		TaskList->TaskElapsedTime = uLipe_GetCurrentTick();
 800134e:	f7ff ff51 	bl	80011f4 <uLipe_GetCurrentTick>
 8001352:	4602      	mov	r2, r0
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:222

		//Assign its Deadline based on its priority
		TaskList->TaskTime = 1;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f04f 0201 	mov.w	r2, #1
 800135e:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:225

		//Set the initial state
		TaskList->TaskState   = TASK_READY;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:228

		//Occupie its TCB
		TaskList->EmptyTCB    =  FILLED;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800136e:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:231

		//Additionally, attach its as head of tasklist
		TaskList->NextTask    = &TaskBlockList[LoopCntr];
 8001370:	7efa      	ldrb	r2, [r7, #27]
 8001372:	4613      	mov	r3, r2
 8001374:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001378:	189b      	adds	r3, r3, r2
 800137a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800137e:	f640 2214 	movw	r2, #2580	; 0xa14
 8001382:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001386:	189a      	adds	r2, r3, r2
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:234

		//attach next task...
		TaskList = TaskList->NextTask;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:237

		//...and the previous task
		TaskList->PrevTask = &TaskBlockList[NUMBER_OF_TASK];
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <Task_Create+0x1e0>)
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:240

		//marks the end of list
		TaskList->NextTask = END_LIST;
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:243

		//Declare that task has never executed
		TaskList->TaskFlags |= TASK_FLAG_IS_FIRST_TIME;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e025      	b.n	80013fa <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:255
	{

		while(END_LIST != TaskList->NextTask)
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	e000      	b.n	80013b8 <Task_Create+0x190>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:252
	//if Head of list exists, then attach the
	//TCB desired on it.
	else
	{

		while(END_LIST != TaskList->NextTask)
 80013b6:	bf00      	nop
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f6      	bne.n	80013ae <Task_Create+0x186>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:261
		}

		//when the end of list is found

		//The last item of list points to our new TCB
		TaskList->NextTask = &TaskBlockList[LoopCntr - 1];
 80013c0:	7efb      	ldrb	r3, [r7, #27]
 80013c2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80013c6:	4613      	mov	r3, r2
 80013c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80013cc:	189b      	adds	r3, r3, r2
 80013ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80013d2:	f640 2214 	movw	r2, #2580	; 0xa14
 80013d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80013da:	189a      	adds	r2, r3, r2
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:264

		//and our new TCB...
		TaskToBeLinked     = TaskList->NextTask;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:267

		//...points to the ex-last item as previous task
		TaskToBeLinked->PrevTask = TaskList;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:270

		//marks the new end of list
		TaskList = TaskList->NextTask;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:273


		TaskList->NextTask = END_LIST;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:278

	}

	//return a ok, if all gone well :)
	return(OS_OK);
 80013fa:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:279
}
 80013fe:	4618      	mov	r0, r3
 8001400:	f107 0720 	add.w	r7, r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000b2c 	.word	0x20000b2c
 800140c:	20000a10 	.word	0x20000a10

08001410 <Task_GetList>:
Task_GetList():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:644
 	 return:	TODO


 ************************************************************************/
taskTCB_t* Task_GetList(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:646
	//simply get the tasklist from idle task:
	return((taskTCB_t *)&TaskBlockList[NUMBER_OF_TASK]);
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <Task_GetList+0x10>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:648

}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000b2c 	.word	0x20000b2c

08001424 <Task_Idle>:
Task_Idle():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:663
 	 return:	TODO


 ************************************************************************/
void Task_Idle(void *TaskArgs)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:664
	while(1);
 800142c:	e7fe      	b.n	800142c <Task_Idle+0x8>
 800142e:	bf00      	nop

08001430 <memset>:
memset():
 8001430:	b4f0      	push	{r4, r5, r6, r7}
 8001432:	0784      	lsls	r4, r0, #30
 8001434:	4603      	mov	r3, r0
 8001436:	f000 808e 	beq.w	8001556 <memset+0x126>
 800143a:	1e54      	subs	r4, r2, #1
 800143c:	2a00      	cmp	r2, #0
 800143e:	f000 8088 	beq.w	8001552 <memset+0x122>
 8001442:	07e5      	lsls	r5, r4, #31
 8001444:	b2ce      	uxtb	r6, r1
 8001446:	d411      	bmi.n	800146c <memset+0x3c>
 8001448:	461a      	mov	r2, r3
 800144a:	1e67      	subs	r7, r4, #1
 800144c:	f802 6b01 	strb.w	r6, [r2], #1
 8001450:	4613      	mov	r3, r2
 8001452:	4615      	mov	r5, r2
 8001454:	0792      	lsls	r2, r2, #30
 8001456:	d00f      	beq.n	8001478 <memset+0x48>
 8001458:	2c00      	cmp	r4, #0
 800145a:	d07a      	beq.n	8001552 <memset+0x122>
 800145c:	f803 6b01 	strb.w	r6, [r3], #1
 8001460:	079a      	lsls	r2, r3, #30
 8001462:	463c      	mov	r4, r7
 8001464:	461d      	mov	r5, r3
 8001466:	d007      	beq.n	8001478 <memset+0x48>
 8001468:	3c01      	subs	r4, #1
 800146a:	e7ed      	b.n	8001448 <memset+0x18>
 800146c:	4603      	mov	r3, r0
 800146e:	f803 6b01 	strb.w	r6, [r3], #1
 8001472:	079a      	lsls	r2, r3, #30
 8001474:	461d      	mov	r5, r3
 8001476:	d1f7      	bne.n	8001468 <memset+0x38>
 8001478:	2c03      	cmp	r4, #3
 800147a:	d952      	bls.n	8001522 <memset+0xf2>
 800147c:	b2ce      	uxtb	r6, r1
 800147e:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8001482:	2c0f      	cmp	r4, #15
 8001484:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8001488:	d92d      	bls.n	80014e6 <memset+0xb6>
 800148a:	f1a4 0210 	sub.w	r2, r4, #16
 800148e:	4617      	mov	r7, r2
 8001490:	2f0f      	cmp	r7, #15
 8001492:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8001496:	602b      	str	r3, [r5, #0]
 8001498:	606b      	str	r3, [r5, #4]
 800149a:	60ab      	str	r3, [r5, #8]
 800149c:	60eb      	str	r3, [r5, #12]
 800149e:	f105 0210 	add.w	r2, r5, #16
 80014a2:	d916      	bls.n	80014d2 <memset+0xa2>
 80014a4:	b13e      	cbz	r6, 80014b6 <memset+0x86>
 80014a6:	3f10      	subs	r7, #16
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	6053      	str	r3, [r2, #4]
 80014ac:	6093      	str	r3, [r2, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
 80014b0:	3210      	adds	r2, #16
 80014b2:	2f0f      	cmp	r7, #15
 80014b4:	d90d      	bls.n	80014d2 <memset+0xa2>
 80014b6:	3f20      	subs	r7, #32
 80014b8:	f102 0610 	add.w	r6, r2, #16
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	6053      	str	r3, [r2, #4]
 80014c0:	6093      	str	r3, [r2, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
 80014c4:	6113      	str	r3, [r2, #16]
 80014c6:	6153      	str	r3, [r2, #20]
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	61d3      	str	r3, [r2, #28]
 80014cc:	3220      	adds	r2, #32
 80014ce:	2f0f      	cmp	r7, #15
 80014d0:	d8f1      	bhi.n	80014b6 <memset+0x86>
 80014d2:	f1a4 0210 	sub.w	r2, r4, #16
 80014d6:	f022 020f 	bic.w	r2, r2, #15
 80014da:	f004 040f 	and.w	r4, r4, #15
 80014de:	3210      	adds	r2, #16
 80014e0:	2c03      	cmp	r4, #3
 80014e2:	4415      	add	r5, r2
 80014e4:	d91d      	bls.n	8001522 <memset+0xf2>
 80014e6:	1f27      	subs	r7, r4, #4
 80014e8:	463e      	mov	r6, r7
 80014ea:	462a      	mov	r2, r5
 80014ec:	2e03      	cmp	r6, #3
 80014ee:	f842 3b04 	str.w	r3, [r2], #4
 80014f2:	f3c7 0780 	ubfx	r7, r7, #2, #1
 80014f6:	d90d      	bls.n	8001514 <memset+0xe4>
 80014f8:	b127      	cbz	r7, 8001504 <memset+0xd4>
 80014fa:	3e04      	subs	r6, #4
 80014fc:	2e03      	cmp	r6, #3
 80014fe:	f842 3b04 	str.w	r3, [r2], #4
 8001502:	d907      	bls.n	8001514 <memset+0xe4>
 8001504:	4617      	mov	r7, r2
 8001506:	3e08      	subs	r6, #8
 8001508:	f847 3b04 	str.w	r3, [r7], #4
 800150c:	6053      	str	r3, [r2, #4]
 800150e:	1d3a      	adds	r2, r7, #4
 8001510:	2e03      	cmp	r6, #3
 8001512:	d8f7      	bhi.n	8001504 <memset+0xd4>
 8001514:	1f23      	subs	r3, r4, #4
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	1d13      	adds	r3, r2, #4
 800151c:	f004 0403 	and.w	r4, r4, #3
 8001520:	18ed      	adds	r5, r5, r3
 8001522:	b1b4      	cbz	r4, 8001552 <memset+0x122>
 8001524:	462b      	mov	r3, r5
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	f803 1b01 	strb.w	r1, [r3], #1
 800152c:	192c      	adds	r4, r5, r4
 800152e:	43ed      	mvns	r5, r5
 8001530:	1962      	adds	r2, r4, r5
 8001532:	42a3      	cmp	r3, r4
 8001534:	f002 0501 	and.w	r5, r2, #1
 8001538:	d00b      	beq.n	8001552 <memset+0x122>
 800153a:	b11d      	cbz	r5, 8001544 <memset+0x114>
 800153c:	f803 1b01 	strb.w	r1, [r3], #1
 8001540:	42a3      	cmp	r3, r4
 8001542:	d006      	beq.n	8001552 <memset+0x122>
 8001544:	461a      	mov	r2, r3
 8001546:	f802 1b01 	strb.w	r1, [r2], #1
 800154a:	7059      	strb	r1, [r3, #1]
 800154c:	1c53      	adds	r3, r2, #1
 800154e:	42a3      	cmp	r3, r4
 8001550:	d1f8      	bne.n	8001544 <memset+0x114>
 8001552:	bcf0      	pop	{r4, r5, r6, r7}
 8001554:	4770      	bx	lr
 8001556:	4605      	mov	r5, r0
 8001558:	4614      	mov	r4, r2
 800155a:	e78d      	b.n	8001478 <memset+0x48>
