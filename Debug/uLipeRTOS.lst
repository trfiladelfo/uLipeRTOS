
uLipeRTOS.elf:     file format elf32-littlearm
uLipeRTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
    LOAD off    0x00008000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00000f88 memsz 0x00000f88 flags rwx
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x08000f88 align 2**15
         filesz 0x00000038 memsz 0x00000bb4 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector   00000284  08000000  08000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 ._inits       00000004  08000284  08000284  00008284  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00000d00  08000288  08000288  00008288  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000038  20000000  08000f88  00010000  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000a7c  20000038  08000fc0  00010038  2**2  ALLOC
  5 ._check_stack 00000100  20000ab4  08001a3c  00010038  2**0  ALLOC
  6 .comment      00000070  00000000  00000000  00010038  2**0  CONTENTS, READONLY
  7 .ARM.attributes 00000031  00000000  00000000  000100a8  2**0  CONTENTS, READONLY
  8 .debug_aranges 000001f0  00000000  00000000  000100e0  2**3  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000190d  00000000  00000000  000102d0  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000793  00000000  00000000  00011bdd  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c5d  00000000  00000000  00012370  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000498  00000000  00000000  00013fd0  2**2  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ff79  00000000  00000000  00014468  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000077e  00000000  00000000  000743e1  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00074b5f  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f4ac  00000000  00000000  00074cbf  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000284 l    d  ._inits	00000000 ._inits
08000288 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000038 l    d  .bss	00000000 .bss
20000ab4 l    d  ._check_stack	00000000 ._check_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 vectors_stm32f4xx.c
00000000 l    df *ABS*	00000000 startup_cm.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tasks.c
2000005c l     O .bss	00000004 counter1.4205
20000060 l     O .bss	00000004 counter2.4206
20000064 l     O .bss	00000004 counter3.4207
20000050 l     O .bss	00000004 counter1.4212
20000054 l     O .bss	00000004 counter2.4213
20000058 l     O .bss	00000004 counter3.4214
2000004c l     O .bss	00000004 counter.4219
20000048 l     O .bss	00000004 counter.4223
20000044 l     O .bss	00000004 counter.4227
20000040 l     O .bss	00000004 counter.4231
2000003c l     O .bss	00000004 counter.4235
00000000 l    df *ABS*	00000000 startup_stm32f4xx.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
080008fc l     F .text	00000186 SetSysClock
08000b0a l       .text	00000000 FIRST_CHANGE
08000b2a l       .text	00000000 SECOND_CHANGE
08000b04 l       .text	00000000 NO_SAVE
00000000 l    df *ABS*	00000000 uLipe_Task.c
00000000 l    df *ABS*	00000000 memset.c
08000288 l       ._inits	00000000 __fini_array_end
08000288 l       ._inits	00000000 __fini_array_start
08000288 l       ._inits	00000000 __init_array_end
08000288 l       ._inits	00000000 __preinit_array_end
08000288 l       ._inits	00000000 __init_array_start
08000284 l       ._inits	00000000 __preinit_array_start
0800022c  w    F .isr_vector	00000006 RTC_Alarm_IRQHandler
0800022c  w    F .isr_vector	00000006 HASH_RNG_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI2_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_CC_IRQHandler
080006a0 g     F .text	0000002a TaskTry3
0800026c  w    F .isr_vector	00000006 DebugMon_Handler
08000284 g     O ._inits	00000004 p_system_init
20000000 g     O .data	00000007 Try
20000000 g       .data	00000000 __data_start__
2001fc00 g       *ABS*	00000000 _Heap_Limit
20000174 g     O .bss	00000100 TaskTryStack8
0800022c  w    F .isr_vector	00000006 TIM1_CC_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream5_IRQHandler
0800023c  w    F .isr_vector	00000010 HardFault_Handler
0800022c  w    F .isr_vector	00000006 DMA1_Stream5_IRQHandler
08000724 g     F .text	0000002a TaskTry6
20000068 g     O .bss	00000004 CurrentTaskBlock
080005dc g     F .text	00000046 SysTick_Handler
0800022c  w    F .isr_vector	00000006 PVD_IRQHandler
0800022c  w    F .isr_vector	00000006 SDIO_IRQHandler
0800022c  w    F .isr_vector	00000006 TAMP_STAMP_IRQHandler
00000400 g       *ABS*	00000000 _Main_Stack_Size
08000f88 g       *ABS*	00000000 _sidata
08000ace g     F .text	00000006 PendSV_Handler
08000234  w    F .isr_vector	00000006 NMI_Handler
08000f88 g       *ABS*	00000000 __exidx_end
080001d4 g     F .isr_vector	00000056 system_init
0800022c  w    F .isr_vector	00000006 CAN2_RX1_IRQHandler
0800022c  w    F .isr_vector	00000006 EXTI3_IRQHandler
08000b84 g     F .text	000001e8 Task_Create
08000aaa g     F .text	00000000 Asm_CriticalIn
20000ab4 g       ._check_stack	00000000 _Heap_Begin
0800022c  w    F .isr_vector	00000006 TIM8_TRG_COM_TIM14_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_UP_TIM10_IRQHandler
08000f88 g       *ABS*	00000000 _etext
20000038 g       .bss	00000000 _sbss
2001fc00 g       *ABS*	00000000 __Main_Stack_Limit
0800022c  w    F .isr_vector	00000006 TIM8_UP_TIM13_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_ER_IRQHandler
20000274 g     O .bss	00000100 TaskTryStack6
20000018 g     O .data	00000008 Try4
0800022c  w    F .isr_vector	00000006 EXTI0_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C2_EV_IRQHandler
20000ab4 g       ._check_stack	00000000 _noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream2_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_RX0_IRQHandler
0800022c  w    F .isr_vector	00000006 FPU_IRQHandler
20000070 g     O .bss	00000001 ID
0800022c  w    F .isr_vector	00000006 OTG_HS_WKUP_IRQHandler
0800025c  w    F .isr_vector	00000006 UsageFault_Handler
0800022c  w    F .isr_vector	00000006 CAN2_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream2_IRQHandler
20000038 g       .bss	00000000 __bss_start__
20000038 g     O .bss	00000004 TestTCB
20000000 g       .data	00000000 _sdata
0800022c  w    F .isr_vector	00000006 SPI1_IRQHandler
20000874 g     O .bss	00000100 IdleTaskStack
20000374 g     O .bss	00000100 TaskTryStack7
0800022c  w    F .isr_vector	00000006 TIM6_DAC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_BRK_TIM9_IRQHandler
0800022c  w    F .isr_vector	00000006 DCMI_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_RX0_IRQHandler
20000010 g     O .data	00000008 Try3
08000aae g     F .text	00000000 Asm_CriticalOut
08000f88 g       *ABS*	00000000 __exidx_start
080006cc g     F .text	0000002a TaskTry4
0800022c  w    F .isr_vector	00000006 DMA2_Stream3_IRQHandler
0800077c g     F .text	0000008e __libc_init_array
00000400 g       *ABS*	00000000 __Main_Stack_Size
08000ab2 g     F .text	00000000 Asm_IntLevelContextChange
0800022c  w    F .isr_vector	00000006 USART6_IRQHandler
08000f80 g     O .text	00000008 IdleName
0800022c  w    F .isr_vector	00000006 USART3_IRQHandler
20000474 g     O .bss	00000100 TaskTryStack2
0800022c  w    F .isr_vector	00000006 CRYP_IRQHandler
0800080c g     F .text	0000004e __libc_fini_array
20000ab4 g       .bss	00000000 _ebss
08000188  w    F .isr_vector	0000004c Reset_Handler
0800022c  w    F .isr_vector	00000006 CAN1_RX1_IRQHandler
0800066c g     F .text	00000034 TaskTry2
0800022c  w    F .isr_vector	00000006 UART5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM4_IRQHandler
20000574 g     O .bss	00000100 TaskTryStack4
0800022c  w    F .isr_vector	00000006 I2C1_EV_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream6_IRQHandler
20000038 g       .data	00000000 __data_end__
0800022c  w    F .isr_vector	00000006 DMA1_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 UART4_IRQHandler
20000ab4 g       .bss	00000000 __bss_end__
0800022c  w    F .isr_vector	00000006 TIM3_IRQHandler
0800022c  w    F .isr_vector	00000006 RCC_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM8_BRK_TIM12_IRQHandler
0800022c  w    F .isr_vector	00000006 Default_Handler
08000e0c g     F .text	00000048 Task_Query
0800022c  w    F .isr_vector	00000006 EXTI15_10_IRQHandler
00000100 g       *ABS*	00000000 _Minimum_Stack_Size
0800022c  w    F .isr_vector	00000006 ADC_IRQHandler
20000974 g     O .bss	00000140 TaskBlockList
20000020 g     O .data	00000008 Try5
20000ab4 g       ._check_stack	00000000 _end_noinit
0800022c  w    F .isr_vector	00000006 DMA1_Stream7_IRQHandler
08000b68 g     F .text	0000001a Task_InitBlocks
0800022c  w    F .isr_vector	00000006 TIM7_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN2_TX_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM5_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA2_Stream7_IRQHandler
0800022c  w    F .isr_vector	00000006 I2C3_EV_IRQHandler
20000028 g     O .data	00000008 Try6
0800022c  w    F .isr_vector	00000006 EXTI9_5_IRQHandler
0800022c  w    F .isr_vector	00000006 RTC_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 SPI2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_IN_IRQHandler
08000e54 g     F .text	0000012c memset
0800024c  w    F .isr_vector	00000006 MemManage_Handler
08000288 g     F .text	00000354 main
0800022c  w    F .isr_vector	00000006 DMA1_Stream0_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_TX_IRQHandler
08000a84 g     F .text	00000000 Asm_LowLevelTickInit
08000264  w    F .isr_vector	00000006 SVC_Handler
20000674 g     O .bss	00000100 TaskTryStack3
0800022c  w    F .isr_vector	00000006 EXTI4_IRQHandler
08000750 g     F .text	0000002a TaskTry7
08000868 g     F .text	00000092 SystemInit
08000624 g     F .text	00000012 Task_Idle
0800022c  w    F .isr_vector	00000006 FSMC_IRQHandler
0800022c  w    F .isr_vector	00000006 ETH_IRQHandler
2000006c g     O .bss	00000004 HighReadyTaskBlock
0800022c  w    F .isr_vector	00000006 OTG_HS_EP1_OUT_IRQHandler
0800022c  w    F .isr_vector	00000006 WWDG_IRQHandler
20000074 g     O .bss	00000100 TaskTryStack
08000638 g     F .text	00000034 TaskTry
0800022c  w    F .isr_vector	00000006 TIM2_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_WKUP_IRQHandler
0800022c  w    F .isr_vector	00000006 TIM1_TRG_COM_TIM11_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_HS_IRQHandler
20020000 g       *ABS*	00000000 _estack
20020000 g       *ABS*	00000000 __stack
0800022c  w    F .isr_vector	00000006 EXTI1_IRQHandler
20000038 g       .data	00000000 _edata
08000d6c g     F .text	000000a0 Task_GetID
08000ac0 g     F .text	00000000 Asm_TaskLevelContextChange
0800022c  w    F .isr_vector	00000006 USART2_IRQHandler
08000000 g     O .isr_vector	00000188 g_pfnVectors
0800022c  w    F .isr_vector	00000006 I2C2_ER_IRQHandler
20000774 g     O .bss	00000100 TaskTryStack5
0800022c  w    F .isr_vector	00000006 DMA2_Stream1_IRQHandler
0800022c  w    F .isr_vector	00000006 CAN1_SCE_IRQHandler
0800022c  w    F .isr_vector	00000006 FLASH_IRQHandler
0800085c  w    F .text	0000000a _exit
0800022c  w    F .isr_vector	00000006 DMA2_Stream4_IRQHandler
08000254  w    F .isr_vector	00000006 BusFault_Handler
0800022c  w    F .isr_vector	00000006 USART1_IRQHandler
0800022c  w    F .isr_vector	00000006 OTG_FS_IRQHandler
20000030 g     O .data	00000008 Try7
0800022c  w    F .isr_vector	00000006 SPI3_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream4_IRQHandler
00000000         *UND*	00000000 TaskQuery
0800022c  w    F .isr_vector	00000006 I2C1_ER_IRQHandler
080006f8 g     F .text	0000002a TaskTry5
20000008 g     O .data	00000008 Try2
0800022c  w    F .isr_vector	00000006 DMA2_Stream6_IRQHandler
0800022c  w    F .isr_vector	00000006 DMA1_Stream3_IRQHandler



Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	00 00 02 20 89 01 00 08 35 02 00 08 3d 02 00 08     ... ....5...=...
 8000010:	4d 02 00 08 55 02 00 08 5d 02 00 08 00 00 00 00     M...U...].......
	...
 800002c:	65 02 00 08 6d 02 00 08 00 00 00 00 cf 0a 00 08     e...m...........
 800003c:	dd 05 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     ....-...-...-...
 800004c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800005c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800006c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800007c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800008c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800009c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ac:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000bc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000cc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000dc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000ec:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 80000fc:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800010c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800011c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800012c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800013c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800014c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800015c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800016c:	2d 02 00 08 2d 02 00 08 2d 02 00 08 2d 02 00 08     -...-...-...-...
 800017c:	2d 02 00 08 2d 02 00 08 2d 02 00 08                 -...-...-...

08000188 <Reset_Handler>:
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:217
}

// This is the place where Cortex-M core will go immediately after reset.
void __attribute__ ((section(".after_vectors")))
Reset_Handler(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	f240 0338 	movw	r3, #56	; 0x38
 8000192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000196:	60bb      	str	r3, [r7, #8]
 8000198:	f640 23b4 	movw	r3, #2740	; 0xab4
 800019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001a0:	607b      	str	r3, [r7, #4]
bss_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:118
__attribute__((always_inline))
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	e007      	b.n	80001b8 <Reset_Handler+0x30>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:120
  while (p < section_end)
    *p++ = 0;
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	f04f 0200 	mov.w	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f103 0304 	add.w	r3, r3, #4
 80001b6:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:119
bss_init(unsigned int* section_begin, unsigned int* section_end)
{
  // Iterate and clear word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	429a      	cmp	r2, r3
 80001be:	d8f3      	bhi.n	80001a8 <Reset_Handler+0x20>
Reset_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:227
  // Zero fill the bss segment
  bss_init(&__bss_start__, &__bss_end__);

  // Call the standard library initialisation (mandatory, SystemInit()
  // and C++ static constructors are called from here).
  __libc_init_array();
 80001c0:	f000 fadc 	bl	800077c <__libc_init_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:230

  // Call the main entry point, and save the exit code.
  int r = main();
 80001c4:	f000 f860 	bl	8000288 <__fini_array_end>
 80001c8:	60f8      	str	r0, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:233

  // Run the static destructors.
  __libc_fini_array();
 80001ca:	f000 fb1f 	bl	800080c <__libc_fini_array>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:238

  // On test platforms, like semihosting, this can be used to inform
  // the host on the test result.
  // On embedded platforms, usually reset the processor.
  _exit(r);
 80001ce:	68f8      	ldr	r0, [r7, #12]
 80001d0:	f000 fb44 	bl	800085c <_exit>

080001d4 <system_init>:
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:248

// System initialisation, executed before constructors.
void
__attribute__((section(".after_vectors")))
system_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	f640 7388 	movw	r3, #3976	; 0xf88
 80001de:	f6c0 0300 	movt	r3, #2048	; 0x800
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	f240 0300 	movw	r3, #0
 80001e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ec:	60bb      	str	r3, [r7, #8]
 80001ee:	f240 0338 	movw	r3, #56	; 0x38
 80001f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001f6:	607b      	str	r3, [r7, #4]
data_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:105
data_init(unsigned int* from, unsigned int* section_begin,
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	e00b      	b.n	8000216 <system_init+0x42>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:107
  while (p < section_end)
    *p++ = *from++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	f103 0304 	add.w	r3, r3, #4
 800020c:	603b      	str	r3, [r7, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f103 0304 	add.w	r3, r3, #4
 8000214:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:106
    unsigned int* section_end)
{
  // Iterate and copy word by word.
  // It is assumed that the pointers are word aligned.
  unsigned int *p = section_begin;
  while (p < section_end)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d8ef      	bhi.n	80001fe <system_init+0x2a>
system_init():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:256
  // so we must be sure it is executed somewhere.
  // (for example librdimon)
  data_init(&_sidata, &_sdata, &_edata);

  // Call the CSMSIS system initialisation routine
  SystemInit();
 800021e:	f000 fb23 	bl	8000868 <SystemInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:257
}
 8000222:	f107 0710 	add.w	r7, r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop

0800022c <ADC_IRQHandler>:
Default_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:433
//
//*****************************************************************************

void __attribute__ ((section(".after_vectors")))
Default_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:436
  while (1)
    {
    }
 8000230:	e7fe      	b.n	8000230 <ADC_IRQHandler+0x4>
DMA1_Stream3_IRQHandler():
 8000232:	bf00      	nop

08000234 <NMI_Handler>:
NMI_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:445
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
void __attribute__ ((section(".after_vectors")))
NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:448
  while (1)
    {
    }
 8000238:	e7fe      	b.n	8000238 <NMI_Handler+0x4>
 800023a:	bf00      	nop

0800023c <HardFault_Handler>:
HardFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:453
}

void __attribute__ ((section(".after_vectors")))
HardFault_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	b0c3      	sub	sp, #268	; 0x10c
 8000240:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:458
  //debuggers:

 unsigned long  FaultStack[64];
 unsigned long *StackPointer;
 unsigned long  i= 0;
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:463

 while (1)
    {

    }
 800024a:	e7fe      	b.n	800024a <HardFault_Handler+0xe>

0800024c <MemManage_Handler>:
MemManage_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:468
}

void __attribute__ ((section(".after_vectors")))
MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:471
  while (1)
    {
    }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
BusFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:476
}

void __attribute__ ((section(".after_vectors")))
BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:479
  while (1)
    {
    }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
UsageFault_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:484
}

void __attribute__ ((section(".after_vectors")))
UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:487
  while (1)
    {
    }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
SVC_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:492
}

void __attribute__ ((section(".after_vectors")))
SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:495
  while (1)
    {
    }
 8000268:	e7fe      	b.n	8000268 <SVC_Handler+0x4>
 800026a:	bf00      	nop

0800026c <DebugMon_Handler>:
DebugMon_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:500
}

void __attribute__ ((section(".after_vectors")))
DebugMon_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:503
  while (1)
    {
    }
 8000270:	e7fe      	b.n	8000270 <DebugMon_Handler+0x4>
 8000272:	bf00      	nop
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:508
}

void __attribute__ ((section(".after_vectors")))
PendSV_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:511
  while (1)
    {
    }
 8000278:	e7fe      	b.n	8000278 <DebugMon_Handler+0xc>
DebugMon_Handler():
 800027a:	bf00      	nop
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:516
}

void __attribute__ ((section(".after_vectors")))
SysTick_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/vectors_stm32f4xx.c:519
  while (1)
    {
    }
 8000280:	e7fe      	b.n	8000280 <DebugMon_Handler+0x14>
DebugMon_Handler():
 8000282:	bf00      	nop

Disassembly of section .text:

08000288 <main>:
main():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:67

volatile os_error_t  Error = OS_OK; //cria um handles de erro

int
main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af02      	add	r7, sp, #8
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:71



	Task_InitBlocks();
 800028e:	f000 fc6b 	bl	8000b68 <Task_InitBlocks>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:73

	Task_Create(&TaskTry, &TaskTryStack, 0 , &Try, sizeof(Try),sizeof(TaskTryStack));
 8000292:	f04f 0307 	mov.w	r3, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	f240 6039 	movw	r0, #1593	; 0x639
 80002a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002a6:	f240 0174 	movw	r1, #116	; 0x74
 80002aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002ae:	f04f 0200 	mov.w	r2, #0
 80002b2:	f240 0300 	movw	r3, #0
 80002b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ba:	f000 fc63 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:74
	Task_Create(&TaskTry2, &TaskTryStack2, 1 , &Try2, sizeof(Try2),sizeof(TaskTryStack));
 80002be:	f04f 0308 	mov.w	r3, #8
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	f240 606d 	movw	r0, #1645	; 0x66d
 80002ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002d2:	f240 4174 	movw	r1, #1140	; 0x474
 80002d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002da:	f04f 0201 	mov.w	r2, #1
 80002de:	f240 0308 	movw	r3, #8
 80002e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e6:	f000 fc4d 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:75
	Task_Create(&TaskTry3, &TaskTryStack3, 3 , &Try3, sizeof(Try2),sizeof(TaskTryStack));
 80002ea:	f04f 0308 	mov.w	r3, #8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	f240 60a1 	movw	r0, #1697	; 0x6a1
 80002fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002fe:	f240 6174 	movw	r1, #1652	; 0x674
 8000302:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000306:	f04f 0203 	mov.w	r2, #3
 800030a:	f240 0310 	movw	r3, #16
 800030e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000312:	f000 fc37 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:76
	Task_Create(&TaskTry4, &TaskTryStack4, 9 , &Try4, sizeof(Try2),sizeof(TaskTryStack));
 8000316:	f04f 0308 	mov.w	r3, #8
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	f240 60cd 	movw	r0, #1741	; 0x6cd
 8000326:	f6c0 0000 	movt	r0, #2048	; 0x800
 800032a:	f240 5174 	movw	r1, #1396	; 0x574
 800032e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000332:	f04f 0209 	mov.w	r2, #9
 8000336:	f240 0318 	movw	r3, #24
 800033a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800033e:	f000 fc21 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:77
	Task_Create(&TaskTry5, &TaskTryStack5, 7 , &Try5, sizeof(Try2),sizeof(TaskTryStack));
 8000342:	f04f 0308 	mov.w	r3, #8
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	f240 60f9 	movw	r0, #1785	; 0x6f9
 8000352:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000356:	f240 7174 	movw	r1, #1908	; 0x774
 800035a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800035e:	f04f 0207 	mov.w	r2, #7
 8000362:	f240 0320 	movw	r3, #32
 8000366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800036a:	f000 fc0b 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:78
	Task_Create(&TaskTry6, &TaskTryStack6, 2 , &Try6, sizeof(Try2),sizeof(TaskTryStack));
 800036e:	f04f 0308 	mov.w	r3, #8
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	f240 7025 	movw	r0, #1829	; 0x725
 800037e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000382:	f240 2174 	movw	r1, #628	; 0x274
 8000386:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800038a:	f04f 0202 	mov.w	r2, #2
 800038e:	f240 0328 	movw	r3, #40	; 0x28
 8000392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000396:	f000 fbf5 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:79
	Task_Create(&TaskTry7, &TaskTryStack7, 12 , &Try7, sizeof(Try2),sizeof(TaskTryStack));
 800039a:	f04f 0308 	mov.w	r3, #8
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	f240 7051 	movw	r0, #1873	; 0x751
 80003aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003ae:	f240 3174 	movw	r1, #884	; 0x374
 80003b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003b6:	f04f 020c 	mov.w	r2, #12
 80003ba:	f240 0330 	movw	r3, #48	; 0x30
 80003be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003c2:	f000 fbdf 	bl	8000b84 <Task_Create>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:85





	CurrentTaskBlock = Task_Query(Task_GetID(&Try2, sizeof(Try2)));
 80003c6:	f240 0008 	movw	r0, #8
 80003ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003ce:	f04f 0108 	mov.w	r1, #8
 80003d2:	f000 fccb 	bl	8000d6c <Task_GetID>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fd17 	bl	8000e0c <Task_Query>
 80003de:	4602      	mov	r2, r0
 80003e0:	f240 0368 	movw	r3, #104	; 0x68
 80003e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003e8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:86
	HighReadyTaskBlock = Task_Query(Task_GetID(&Try, sizeof(Try)));
 80003ea:	f240 0000 	movw	r0, #0
 80003ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003f2:	f04f 0107 	mov.w	r1, #7
 80003f6:	f000 fcb9 	bl	8000d6c <Task_GetID>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fd05 	bl	8000e0c <Task_Query>
 8000402:	4602      	mov	r2, r0
 8000404:	f240 036c 	movw	r3, #108	; 0x6c
 8000408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800040c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:88

	TestTCB = HighReadyTaskBlock;
 800040e:	f240 036c 	movw	r3, #108	; 0x6c
 8000412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	f240 0338 	movw	r3, #56	; 0x38
 800041c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000420:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:93

	//os_stack_t *TempStack = (os_stack_t *)HighReadyTaskBlock->TaskStack;

	//cria um stack frame para HighReady:
	*--HighReadyTaskBlock->TaskStack = 0x01000000; //status registers
 8000422:	f240 036c 	movw	r3, #108	; 0x6c
 8000426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	699a      	ldr	r2, [r3, #24]
 800042e:	f1a2 0204 	sub.w	r2, r2, #4
 8000432:	619a      	str	r2, [r3, #24]
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800043a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:94
	*--HighReadyTaskBlock->TaskStack = (taskptr_t *)HighReadyTaskBlock->TaskAction;//PC
 800043c:	f240 036c 	movw	r3, #108	; 0x6c
 8000440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	699a      	ldr	r2, [r3, #24]
 8000448:	f1a2 0204 	sub.w	r2, r2, #4
 800044c:	619a      	str	r2, [r3, #24]
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	f240 036c 	movw	r3, #108	; 0x6c
 8000454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	6013      	str	r3, [r2, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:95
	*--HighReadyTaskBlock->TaskStack = 0xFFFFFFFD;
 800045e:	f240 036c 	movw	r3, #108	; 0x6c
 8000462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	f1a2 0204 	sub.w	r2, r2, #4
 800046e:	619a      	str	r2, [r3, #24]
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f06f 0202 	mvn.w	r2, #2
 8000476:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:96
	*--HighReadyTaskBlock->TaskStack = 0x00;
 8000478:	f240 036c 	movw	r3, #108	; 0x6c
 800047c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	f1a2 0204 	sub.w	r2, r2, #4
 8000488:	619a      	str	r2, [r3, #24]
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f04f 0200 	mov.w	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:97
	*--HighReadyTaskBlock->TaskStack = 0x00;
 8000492:	f240 036c 	movw	r3, #108	; 0x6c
 8000496:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	699a      	ldr	r2, [r3, #24]
 800049e:	f1a2 0204 	sub.w	r2, r2, #4
 80004a2:	619a      	str	r2, [r3, #24]
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f04f 0200 	mov.w	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:98
	*--HighReadyTaskBlock->TaskStack = 0x00;
 80004ac:	f240 036c 	movw	r3, #108	; 0x6c
 80004b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	699a      	ldr	r2, [r3, #24]
 80004b8:	f1a2 0204 	sub.w	r2, r2, #4
 80004bc:	619a      	str	r2, [r3, #24]
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f04f 0200 	mov.w	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:99
	*--HighReadyTaskBlock->TaskStack = 0x00;
 80004c6:	f240 036c 	movw	r3, #108	; 0x6c
 80004ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	f1a2 0204 	sub.w	r2, r2, #4
 80004d6:	619a      	str	r2, [r3, #24]
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f04f 0200 	mov.w	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:100
	*--HighReadyTaskBlock->TaskStack = 0x00;
 80004e0:	f240 036c 	movw	r3, #108	; 0x6c
 80004e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	699a      	ldr	r2, [r3, #24]
 80004ec:	f1a2 0204 	sub.w	r2, r2, #4
 80004f0:	619a      	str	r2, [r3, #24]
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:112
	*--HighReadyTaskBlock->TaskStack = 0x00;
	*--HighReadyTaskBlock->TaskStack = 0x12345678;
*/

    //outro stack frame
	*--CurrentTaskBlock->TaskStack = 0x01000000; //status registers
 80004fa:	f240 0368 	movw	r3, #104	; 0x68
 80004fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	f1a2 0204 	sub.w	r2, r2, #4
 800050a:	619a      	str	r2, [r3, #24]
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000512:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:113
	*--CurrentTaskBlock->TaskStack = (taskptr_t *)CurrentTaskBlock->TaskAction;//PC
 8000514:	f240 0368 	movw	r3, #104	; 0x68
 8000518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	699a      	ldr	r2, [r3, #24]
 8000520:	f1a2 0204 	sub.w	r2, r2, #4
 8000524:	619a      	str	r2, [r3, #24]
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	f240 0368 	movw	r3, #104	; 0x68
 800052c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	6013      	str	r3, [r2, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:114
	*--CurrentTaskBlock->TaskStack = 0xFFFFFFFD;
 8000536:	f240 0368 	movw	r3, #104	; 0x68
 800053a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	f1a2 0204 	sub.w	r2, r2, #4
 8000546:	619a      	str	r2, [r3, #24]
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f06f 0202 	mvn.w	r2, #2
 800054e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:115
	*--CurrentTaskBlock->TaskStack = 0x00;
 8000550:	f240 0368 	movw	r3, #104	; 0x68
 8000554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	f1a2 0204 	sub.w	r2, r2, #4
 8000560:	619a      	str	r2, [r3, #24]
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f04f 0200 	mov.w	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:116
	*--CurrentTaskBlock->TaskStack = 0x00;
 800056a:	f240 0368 	movw	r3, #104	; 0x68
 800056e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	f1a2 0204 	sub.w	r2, r2, #4
 800057a:	619a      	str	r2, [r3, #24]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:117
	*--CurrentTaskBlock->TaskStack = 0x00;
 8000584:	f240 0368 	movw	r3, #104	; 0x68
 8000588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	699a      	ldr	r2, [r3, #24]
 8000590:	f1a2 0204 	sub.w	r2, r2, #4
 8000594:	619a      	str	r2, [r3, #24]
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f04f 0200 	mov.w	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:118
	*--CurrentTaskBlock->TaskStack = 0x00;
 800059e:	f240 0368 	movw	r3, #104	; 0x68
 80005a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	699a      	ldr	r2, [r3, #24]
 80005aa:	f1a2 0204 	sub.w	r2, r2, #4
 80005ae:	619a      	str	r2, [r3, #24]
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f04f 0200 	mov.w	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:119
	*--CurrentTaskBlock->TaskStack = 0x00;
 80005b8:	f240 0368 	movw	r3, #104	; 0x68
 80005bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	699a      	ldr	r2, [r3, #24]
 80005c4:	f1a2 0204 	sub.w	r2, r2, #4
 80005c8:	619a      	str	r2, [r3, #24]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:129
	*--CurrentTaskBlock->TaskStack = 0x00;
	*--CurrentTaskBlock->TaskStack = 0x00;
	*--CurrentTaskBlock->TaskStack = 0x00;
	*--CurrentTaskBlock->TaskStack = 0x12345678;
*/
	Asm_LowLevelTickInit(16800); //vamos testar!
 80005d2:	f244 10a0 	movw	r0, #16800	; 0x41a0
 80005d6:	f000 fa55 	bl	8000a84 <Asm_LowLevelTickInit>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:131

	while (1);
 80005da:	e7fe      	b.n	80005da <main+0x352>

080005dc <SysTick_Handler>:
SysTick_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:176
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:178
	//simple round robin scheduling
	TestTCB = HighReadyTaskBlock;
 80005e0:	f240 036c 	movw	r3, #108	; 0x6c
 80005e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	f240 0338 	movw	r3, #56	; 0x38
 80005ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f2:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:179
	HighReadyTaskBlock = CurrentTaskBlock;
 80005f4:	f240 0368 	movw	r3, #104	; 0x68
 80005f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f240 036c 	movw	r3, #108	; 0x6c
 8000602:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000606:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:180
	CurrentTaskBlock = TestTCB;
 8000608:	f240 0338 	movw	r3, #56	; 0x38
 800060c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	f240 0368 	movw	r3, #104	; 0x68
 8000616:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800061a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:182

	Asm_TaskLevelContextChange(); //vamos testar?
 800061c:	f000 fa50 	bl	8000ac0 <Asm_TaskLevelContextChange>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:183
}
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop

08000624 <Task_Idle>:
Task_Idle():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:187


void Task_Idle(void *TaskArgs)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/main.c:189

}
 800062c:	f107 070c 	add.w	r7, r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <TaskTry>:
TaskTry():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:40
os_stack_t TaskTryStack8[64];
os_taskname_t Try8[8] = {"TaskTry8"};


taskptr_t TaskTry(void *TaskArgs)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:48
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 250;
 8000640:	f240 035c 	movw	r3, #92	; 0x5c
 8000644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000648:	f04f 02fa 	mov.w	r2, #250	; 0xfa
 800064c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:49
		counter2 = 225;
 800064e:	f240 0360 	movw	r3, #96	; 0x60
 8000652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000656:	f04f 02e1 	mov.w	r2, #225	; 0xe1
 800065a:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:50
		counter3 = 350;
 800065c:	f240 0364 	movw	r3, #100	; 0x64
 8000660:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000664:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000668:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:51
	}
 800066a:	e7e9      	b.n	8000640 <TaskTry+0x8>

0800066c <TaskTry2>:
TaskTry2():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:56

}

taskptr_t TaskTry2(void *TaskArgs)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:63
					counter2 = 0,
					counter3 = 0;

	while(1)
	{
		counter1 = 100;
 8000674:	f240 0350 	movw	r3, #80	; 0x50
 8000678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800067c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000680:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:64
		counter2 = 150;
 8000682:	f240 0354 	movw	r3, #84	; 0x54
 8000686:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800068a:	f04f 0296 	mov.w	r2, #150	; 0x96
 800068e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:65
		counter3 = 175;
 8000690:	f240 0358 	movw	r3, #88	; 0x58
 8000694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000698:	f04f 02af 	mov.w	r2, #175	; 0xaf
 800069c:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:66
	}
 800069e:	e7e9      	b.n	8000674 <TaskTry2+0x8>

080006a0 <TaskTry3>:
TaskTry3():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:71
}


taskptr_t TaskTry3(void *TaskArgs)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:75

	static uint32_t counter = 0;

	counter++;
 80006a8:	f240 034c 	movw	r3, #76	; 0x4c
 80006ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f103 0201 	add.w	r2, r3, #1
 80006b6:	f240 034c 	movw	r3, #76	; 0x4c
 80006ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006be:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:76
}
 80006c0:	f107 070c 	add.w	r7, r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <TaskTry4>:
TaskTry4():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:79

taskptr_t TaskTry4(void *TaskArgs)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:83

	static uint32_t counter = 0;

	counter++;
 80006d4:	f240 0348 	movw	r3, #72	; 0x48
 80006d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f103 0201 	add.w	r2, r3, #1
 80006e2:	f240 0348 	movw	r3, #72	; 0x48
 80006e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006ea:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:84
}
 80006ec:	f107 070c 	add.w	r7, r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <TaskTry5>:
TaskTry5():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:88


taskptr_t TaskTry5(void *TaskArgs)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:92

	static uint32_t counter = 0;

	counter++;
 8000700:	f240 0344 	movw	r3, #68	; 0x44
 8000704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f103 0201 	add.w	r2, r3, #1
 800070e:	f240 0344 	movw	r3, #68	; 0x44
 8000712:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000716:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:93
}
 8000718:	f107 070c 	add.w	r7, r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <TaskTry6>:
TaskTry6():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:96

taskptr_t TaskTry6(void *TaskArgs)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:100

	static uint32_t counter = 0;

	counter++;
 800072c:	f240 0340 	movw	r3, #64	; 0x40
 8000730:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f103 0201 	add.w	r2, r3, #1
 800073a:	f240 0340 	movw	r3, #64	; 0x40
 800073e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000742:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:101
}
 8000744:	f107 070c 	add.w	r7, r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <TaskTry7>:
TaskTry7():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:105


taskptr_t TaskTry7(void *TaskArgs)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:109

	static uint32_t counter = 0;

	counter++;
 8000758:	f240 033c 	movw	r3, #60	; 0x3c
 800075c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f103 0201 	add.w	r2, r3, #1
 8000766:	f240 033c 	movw	r3, #60	; 0x3c
 800076a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800076e:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../src/tasks.c:110
}
 8000770:	f107 070c 	add.w	r7, r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <__libc_init_array>:
__libc_init_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:179
(*__fini_array_end[])(void) __attribute__((weak));

// Iterate over all the preinit/init routines.
inline void
__libc_init_array(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:183
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
 8000782:	f240 2288 	movw	r2, #648	; 0x288
 8000786:	f6c0 0200 	movt	r2, #2048	; 0x800
 800078a:	f240 2384 	movw	r3, #644	; 0x284
 800078e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000798:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
  for (i = 0; i < count; i++)
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	e00b      	b.n	80007ba <__libc_init_array+0x3e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:185
    __preinit_array_start[i]();
 80007a2:	f240 2384 	movw	r3, #644	; 0x284
 80007a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b0:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:184
{
  size_t count;
  size_t i;

  count = __preinit_array_end - __preinit_array_start;
  for (i = 0; i < count; i++)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f103 0301 	add.w	r3, r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3ef      	bcc.n	80007a2 <__libc_init_array+0x26>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:192
  // If you need to run the code in the .init section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
 80007c2:	f240 2288 	movw	r2, #648	; 0x288
 80007c6:	f6c0 0200 	movt	r2, #2048	; 0x800
 80007ca:	f240 2388 	movw	r3, #648	; 0x288
 80007ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80007d8:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  for (i = 0; i < count; i++)
 80007da:	f04f 0300 	mov.w	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	e00b      	b.n	80007fa <__libc_init_array+0x7e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:194
    __init_array_start[i]();
 80007e2:	f240 2388 	movw	r3, #648	; 0x288
 80007e6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f0:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:193
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_init();

  count = __init_array_end - __init_array_start;
  for (i = 0; i < count; i++)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f103 0301 	add.w	r3, r3, #1
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d3ef      	bcc.n	80007e2 <__libc_init_array+0x66>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:195
    __init_array_start[i]();
}
 8000802:	f107 0708 	add.w	r7, r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop

0800080c <__libc_fini_array>:
__libc_fini_array():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:200

// Run all the cleanup routines.
inline void
__libc_fini_array(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:204
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
 8000812:	f240 2288 	movw	r2, #648	; 0x288
 8000816:	f6c0 0200 	movt	r2, #2048	; 0x800
 800081a:	f240 2388 	movw	r3, #648	; 0x288
 800081e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8000828:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
  for (i = count; i > 0; i--)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	e00d      	b.n	800084c <__libc_fini_array+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:206
    __fini_array_start[i - 1]();
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000836:	f240 2388 	movw	r3, #648	; 0x288
 800083a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800083e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000842:	4798      	blx	r3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:205
{
  size_t count;
  size_t i;

  count = __fini_array_end - __fini_array_start;
  for (i = count; i > 0; i--)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ee      	bne.n	8000830 <__libc_fini_array+0x24>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_cm.c:212

  // If you need to run the code in the .fini section, please use
  // the startup files, since this requires the code in crti.o and crtn.o
  // to add the function prologue/epilogue.
  //_fini();
}
 8000852:	f107 0708 	add.w	r7, r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop

0800085c <_exit>:
_exit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:44
// You can redefine it in the application, if more functionality
// is required
void
__attribute__((weak))
_exit(int r)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/startup_stm32f4xx.c:47
#if defined(DEBUG)
  while(1)
  ;
 8000864:	e7fe      	b.n	8000864 <_exit+0x8>
 8000866:	bf00      	nop

08000868 <SystemInit>:
SystemInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:338
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:345
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800086c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000870:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000874:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000878:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	f042 0201 	orr.w	r2, r2, #1
 8000882:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:348

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000884:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800088c:	f04f 0200 	mov.w	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:351

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000892:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000896:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800089a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800089e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008a2:	6812      	ldr	r2, [r2, #0]
 80008a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80008a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008ac:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:354

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008b6:	f243 0210 	movw	r2, #12304	; 0x3010
 80008ba:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80008be:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:357

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80008cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80008d0:	6812      	ldr	r2, [r2, #0]
 80008d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008d6:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:360

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:368
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80008e6:	f000 f809 	bl	80008fc <SetSysClock>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:374

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008ea:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008f6:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:376
#endif
}
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop

080008fc <SetSysClock>:
SetSysClock():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:471
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:475
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:478
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800090e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000912:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000916:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800091a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000924:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:483
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000926:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800092a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000934:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:484
    StartUpCounter++;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f103 0301 	add.w	r3, r3, #1
 800093c:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:485
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d103      	bne.n	800094c <SetSysClock+0x50>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800094a:	d1ec      	bne.n	8000926 <SetSysClock+0x2a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:487

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800094c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <SetSysClock+0x6a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:489
  {
    HSEStatus = (uint32_t)0x01;
 800095e:	f04f 0301 	mov.w	r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	e002      	b.n	800096c <SetSysClock+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:493
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:496
  }

  if (HSEStatus == (uint32_t)0x01)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	f040 8082 	bne.w	8000a78 <SetSysClock+0x17c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:499
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000974:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000978:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800097c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000980:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000984:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800098a:	641a      	str	r2, [r3, #64]	; 0x40
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:500
    PWR->CR |= PWR_CR_VOS;
 800098c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000990:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000994:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000998:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80009a2:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:503

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80009b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009b4:	6892      	ldr	r2, [r2, #8]
 80009b6:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:507

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80009c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009c8:	6892      	ldr	r2, [r2, #8]
 80009ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009ce:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:510
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80009dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009e0:	6892      	ldr	r2, [r2, #8]
 80009e2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80009e6:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:522
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80009e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009f0:	f245 4219 	movw	r2, #21529	; 0x5419
 80009f4:	f2c0 7240 	movt	r2, #1856	; 0x740
 80009f8:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:526
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a02:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000a10:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:529

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a12:	bf00      	nop
 8000a14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f6      	beq.n	8000a14 <SetSysClock+0x118>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:549
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a26:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a2e:	f240 7205 	movw	r2, #1797	; 0x705
 8000a32:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:558
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a44:	6892      	ldr	r2, [r2, #8]
 8000a46:	f022 0203 	bic.w	r2, r2, #3
 8000a4a:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:559
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a5c:	6892      	ldr	r2, [r2, #8]
 8000a5e:	f042 0202 	orr.w	r2, r2, #2
 8000a62:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:562

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a64:	bf00      	nop
 8000a66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 030c 	and.w	r3, r3, #12
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d1f6      	bne.n	8000a66 <SetSysClock+0x16a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../libs/CMSIS/src/system_stm32f4xx.c:571
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000a78:	f107 070c 	add.w	r7, r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <Asm_LowLevelTickInit>:
Asm_LowLevelTickInit():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:47
@************************************************************************
.thumb_func
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts
 8000a84:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49

		LDR  R1, =0xE000ED14	@
 8000a86:	4932      	ldr	r1, [pc, #200]	; (8000b50 <SECOND_CHANGE+0x26>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:50
		LDR  R2, [R1]			@
 8000a88:	680a      	ldr	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:51
		ORR  R2,R2,#0x200		@
 8000a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:52
		STR	 R2,[R1]			@
 8000a8e:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54

		LDR  R1, =0xE000E010    @Load the systick control register contents
 8000a90:	4930      	ldr	r1, [pc, #192]	; (8000b54 <SECOND_CHANGE+0x2a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:55
		MOVS R2, #0x00000000	@
 8000a92:	2200      	movs	r2, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:56
		STR	 R2, [R1], #0x04	@
 8000a94:	f841 2b04 	str.w	r2, [r1], #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:57
		STR  R0, [R1]			@Write the new value for load count
 8000a98:	6008      	str	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:58
		SUBS R1, #0x04			@Points again to systick control gerister
 8000a9a:	3904      	subs	r1, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:61
								@
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
 8000a9c:	2203      	movs	r2, #3
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:62
		STR  R2, [R1]		 	@Write back on the systick register, and points to
 8000a9e:	600a      	str	r2, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 8000aa0:	492d      	ldr	r1, [pc, #180]	; (8000b58 <SECOND_CHANGE+0x2e>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:66
		MOVS  R0, #0xFF			@
 8000aa2:	20ff      	movs	r0, #255	; 0xff
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:67
		STRB  R0,[R1]			@set pend sv priority
 8000aa4:	7008      	strb	r0, [r1, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:69
								@
		CPSIE  I				@Enable global interrupts
 8000aa6:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:70
		BX	LR					@Return from sub
 8000aa8:	4770      	bx	lr

08000aaa <Asm_CriticalIn>:
Asm_CriticalIn():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:86
@
@************************************************************************
.thumb_func
Asm_CriticalIn:

		CPSID	I					@disables all interrupts
 8000aaa:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:87
		BX		LR					@Return from sub
 8000aac:	4770      	bx	lr

08000aae <Asm_CriticalOut>:
Asm_CriticalOut():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:103
@
@************************************************************************
.thumb_func
Asm_CriticalOut:

		CPSIE	I					@enables all interrupts
 8000aae:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:104
		BX		LR					@Return from sub
 8000ab0:	4770      	bx	lr

08000ab2 <Asm_IntLevelContextChange>:
Asm_IntLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:121
@
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
 8000ab2:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:122
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000ab4:	4829      	ldr	r0, [pc, #164]	; (8000b5c <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:123
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 8000ab6:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:126
									@exception
									@
		STR		R1,[R0]				@
 8000aba:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:127
		CPSIE	I					@Enable interrupts
 8000abc:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:129
									@
		BX LR 					  	@Return from sub
 8000abe:	4770      	bx	lr

08000ac0 <Asm_TaskLevelContextChange>:
Asm_TaskLevelContextChange():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:146
@
@************************************************************************
.thumb_func
Asm_TaskLevelContextChange:

		CPSID 	I					@Disables interrrupts
 8000ac0:	b672      	cpsid	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:147
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <SECOND_CHANGE+0x32>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:148
		MOVS	R1,#0x10000000	  	@Requests a PENDSV
 8000ac4:	f05f 5180 	movs.w	r1, #268435456	; 0x10000000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:151
									@exception
									@
		STR		R1,[R0]				@
 8000ac8:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:152
		CPSIE	I					@Enable interrupts
 8000aca:	b662      	cpsie	i
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:155
									@

		BX 		LR 					@Should not get here
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:
PendSV_Handler():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:171
@
@
@************************************************************************
.thumb_func
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
 8000ace:	f01e 0f04 	tst.w	lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:172
		IT		EQ						@
 8000ad2:	bf08      	it	eq
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:173
		BEQ		FIRST_CHANGE			@fisrt change
 8000ad4:	f000 b819 	beq.w	8000b0a <FIRST_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:174
		LDR		R0, =HighReadyTaskBlock @if not, check for second change
 8000ad8:	4821      	ldr	r0, [pc, #132]	; (8000b60 <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:175
		LDR		R0,[R0]					@
 8000ada:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:176
		LDR		R1,[R0]					@Check the current taskFLag
 8000adc:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:177
		TST		R1,#1					@Check if first time flag is set
 8000ade:	f011 0f01 	tst.w	r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:178
		IT		NE						@
 8000ae2:	bf18      	it	ne
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:179
		BNE 	SECOND_CHANGE			@Jump for first context switch
 8000ae4:	f000 b821 	bne.w	8000b2a <SECOND_CHANGE>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:181
										@
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:182
		LDR		R0,[R0]					@
 8000aea:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:183
		MRS		R1, PSP					@Get the current SP
 8000aec:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:184
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack
 8000af0:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:186
										@
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 8000af4:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:188
										@								@
		LDR		R0,=HighReadyTaskBlock  @Get the first task from de queue
 8000af6:	481a      	ldr	r0, [pc, #104]	; (8000b60 <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:189
		LDR		R0,[R0]					@Get the new stack pointer
 8000af8:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:190
		LDR		R1, [R0,#0x00000018]	@
 8000afa:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:192
									    @
		LDMIA	R1!,{R4 - R11}			@Change the context
 8000afc:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:193
		MSR		PSP , R1				@write the new stackpointer
 8000b00:	f381 8809 	msr	PSP, r1

08000b04 <NO_SAVE>:
NO_SAVE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:195
NO_SAVE:								@
		ORR     LR,LR,#0x00000004		@ensures that return in PSP
 8000b04:	f04e 0e04 	orr.w	lr, lr, #4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:196
		BX		LR						@Return from sub
 8000b08:	4770      	bx	lr

08000b0a <FIRST_CHANGE>:
FIRST_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:199
										@
FIRST_CHANGE:							@
		MOVS    R4, #0x02				@if the first run
 8000b0a:	2402      	movs	r4, #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:200
		MSR	    CONTROL, R4				@uses PSP always
 8000b0c:	f384 8814 	msr	CONTROL, r4
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:201
		ISB								@recommended after write control
 8000b10:	f3bf 8f6f 	isb	sy
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:202
		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:203
		LDR		R0,[R0]					@Get the new stack pointer
 8000b16:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:204
		LDR		R1,[R0]					@Get task flags
 8000b18:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:205
		BIC		R1,R1,#1				@clear first time flag
 8000b1a:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:206
		STR		R1,[R0]					@
 8000b1e:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:207
		LDR		R1, [R0,#0x00000018]	@
 8000b20:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:208
		MSR     PSP,R1					@Load the first stack pointer
 8000b22:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:209
		B		NO_SAVE					@
 8000b26:	f7ff bfed 	b.w	8000b04 <NO_SAVE>

08000b2a <SECOND_CHANGE>:
SECOND_CHANGE():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:212

SECOND_CHANGE:
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <SECOND_CHANGE+0x3a>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:213
		LDR		R0,[R0]					@
 8000b2c:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:214
		MRS		R1, PSP					@Get the current SP
 8000b2e:	f3ef 8109 	mrs	r1, PSP
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:215
		STMDB	R1!,{R4 - R11}			@save R4 - R11 on the current stack									@
 8000b32:	e921 0ff0 	stmdb	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:216
		STR		R1,[R0,#0x00000018] 	@Save the current stack pointer
 8000b36:	6181      	str	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:218

		LDR		R0,=HighReadyTaskBlock  @Get the newTCB
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <SECOND_CHANGE+0x36>)
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:219
		LDR		R0,[R0]					@Get the new stack pointer
 8000b3a:	6800      	ldr	r0, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:220
		LDR		R1,[R0]					@Get task flags
 8000b3c:	6801      	ldr	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:221
		BIC		R1,R1,#1				@clear first time flag
 8000b3e:	f021 0101 	bic.w	r1, r1, #1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:222
		STR		R1,[R0]					@
 8000b42:	6001      	str	r1, [r0, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:223
		LDR		R1, [R0,#0x00000018]	@
 8000b44:	6981      	ldr	r1, [r0, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:224
		MSR     PSP,R1					@Load the first stack pointer
 8000b46:	f381 8809 	msr	PSP, r1
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:225
		B		NO_SAVE					@
 8000b4a:	f7ff bfdb 	b.w	8000b04 <NO_SAVE>
 8000b4e:	0000      	.short	0x0000
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:49
Asm_LowLevelTickInit:


		CPSID 	I				@Disable interrupts

		LDR  R1, =0xE000ED14	@
 8000b50:	e000ed14 	.word	0xe000ed14
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:54
		LDR  R2, [R1]			@
		ORR  R2,R2,#0x200		@
		STR	 R2,[R1]			@

		LDR  R1, =0xE000E010    @Load the systick control register contents
 8000b54:	e000e010 	.word	0xe000e010
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:65
								@
		MOVS R2, #0x00000003    @Enable systick timer and its interrupt
		STR  R2, [R1]		 	@Write back on the systick register, and points to
							    @Load register
								@
		LDR   R1, =0xE000ED22  	@PENDSV Priority
 8000b58:	e000ed22 	.word	0xe000ed22
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:122
@************************************************************************
.thumb_func
Asm_IntLevelContextChange:

		CPSID 	I					@Disables interrrupts
		LDR  	R0, =0xE000ED04   	@SCB->ICSR register
 8000b5c:	e000ed04 	.word	0xe000ed04
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:174
.thumb_func
PendSV_Handler:
		TST		LR,#4					@check the origin of interrupt
		IT		EQ						@
		BEQ		FIRST_CHANGE			@fisrt change
		LDR		R0, =HighReadyTaskBlock @if not, check for second change
 8000b60:	2000006c 	.word	0x2000006c
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/AsmStuff.S:181
		LDR		R1,[R0]					@Check the current taskFLag
		TST		R1,#1					@Check if first time flag is set
		IT		NE						@
		BNE 	SECOND_CHANGE			@Jump for first context switch
										@
		LDR 	R0, =CurrentTaskBlock	@Get the current TCB
 8000b64:	20000068 	.word	0x20000068

08000b68 <Task_InitBlocks>:
Task_InitBlocks():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:79
 	 return:	TODO


 ************************************************************************/
void Task_InitBlocks(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:81
	//fill with zeros all TCBS!
	memset(&TaskBlockList, NULL, sizeof(TaskBlockList));
 8000b6c:	f640 1074 	movw	r0, #2420	; 0x974
 8000b70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000b74:	f04f 0100 	mov.w	r1, #0
 8000b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b7c:	f000 f96a 	bl	8000e54 <memset>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:82
}
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop

08000b84 <Task_Create>:
Task_Create():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:99

 ************************************************************************/
os_error_t 	Task_Create(taskptr_t (*TaskAction), os_stack_t *TaskStack,
						uint8_t TaskPriority, os_taskname_t *TaskName, uint8_t NameSize,
						os_stack_t StackSize)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:100
	taskTCB_t *TaskList 		= &TaskBlockList,
 8000b94:	f640 1374 	movw	r3, #2420	; 0x974
 8000b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b9c:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:101
			  *TaskToBeLinked	= &TaskBlockList; //points to tasklist
 8000b9e:	f640 1374 	movw	r3, #2420	; 0x974
 8000ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ba6:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:103

	uint8_t    LoopCntr = 0; //simple loop coounter
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	76fb      	strb	r3, [r7, #27]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:106

	//check for size of taskname:
	if(NameSize > 32)
 8000bae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bb2:	2b20      	cmp	r3, #32
 8000bb4:	d902      	bls.n	8000bbc <Task_Create+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:108
	{
		return(OS_NAME_TOO_LONG);
 8000bb6:	f04f 0305 	mov.w	r3, #5
 8000bba:	e0cc      	b.n	8000d56 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:112
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	76fb      	strb	r3, [r7, #27]
 8000bc2:	e051      	b.n	8000c68 <Task_Create+0xe4>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:115
	{
		//check if current TCB is empty
		if(EMPTY == TaskList->EmptyTCB)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d136      	bne.n	8000c3a <Task_Create+0xb6>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:118
		{
			//fill te task TCB
			TaskList->TaskAction =(taskptr_t *)TaskAction; //the task method
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	61da      	str	r2, [r3, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:120
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
								  (StackSize>>2) - 1); //the task stack
 8000bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd4:	ea4f 0393 	mov.w	r3, r3, lsr #2
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:119
		//check if current TCB is empty
		if(EMPTY == TaskList->EmptyTCB)
		{
			//fill te task TCB
			TaskList->TaskAction =(taskptr_t *)TaskAction; //the task method
			TaskList->TaskStack  =(os_stack_t* )(TaskStack +
 8000bd8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000bdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	18d2      	adds	r2, r2, r3
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:123
								  (StackSize>>2) - 1); //the task stack

			//check for priority given
			if(TaskPriority < MAX_PRIORITY || TaskPriority > LESS_PRIORITY)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b1f      	cmp	r3, #31
 8000bec:	d902      	bls.n	8000bf4 <Task_Create+0x70>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:126
			{
				//return the system error
				return(OS_PRIORITY_OUT_OF_RANGE);
 8000bee:	f04f 0303 	mov.w	r3, #3
 8000bf2:	e0b0      	b.n	8000d56 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:128
			}
			TaskList->TaskPriority = TaskPriority & 0x1F; //the task priority
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:129
			TaskList->TaskName = TaskName; 				  //gives name for task
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	615a      	str	r2, [r3, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:130
			TaskList->TaskID   = LoopCntr;				  //gives an ID for Task
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	7efa      	ldrb	r2, [r7, #27]
 8000c0a:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:131
			TaskList->TaskElapsedTime = 0;                //zero the elapsed time
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:132
			TaskList->TaskDelayed = OS_TICKS;			  //byDefault the task is executed
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f04f 02e8 	mov.w	r2, #232	; 0xe8
 8000c1a:	739a      	strb	r2, [r3, #14]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:134
														  //after 1 OS_TICKS
			TaskList->TaskState   = TASK_READY;			  //task initial state
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:136

			TaskList->EmptyTCB    =  FILLED;				  //occupies the TCB
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000c2a:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:137
			TaskList->TaskFlags  |= TASK_FLAG_IS_FIRST_TIME;  //task has never executed
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f043 0201 	orr.w	r2, r3, #1
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	601a      	str	r2, [r3, #0]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:141



			break; //break the loop
 8000c38:	e019      	b.n	8000c6e <Task_Create+0xea>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:146

		}
		else
		{
			TaskList = &TaskBlockList[LoopCntr]; //if not check for next TCB
 8000c3a:	7efa      	ldrb	r2, [r7, #27]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c42:	189b      	adds	r3, r3, r2
 8000c44:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c48:	f640 1274 	movw	r2, #2420	; 0x974
 8000c4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c50:	189b      	adds	r3, r3, r2
 8000c52:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:147
			if(NUMBER_OF_TASK - 1  <  LoopCntr)
 8000c54:	7efb      	ldrb	r3, [r7, #27]
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <Task_Create+0xdc>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:149
			{
				return(OS_TASKLIST_FULL);
 8000c5a:	f04f 0302 	mov.w	r3, #2
 8000c5e:	e07a      	b.n	8000d56 <Task_Create+0x1d2>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:112
	{
		return(OS_NAME_TOO_LONG);
	}

	//first check for a empty task block
	for(LoopCntr = 0; LoopCntr <= NUMBER_OF_TASK ; LoopCntr++)
 8000c60:	7efb      	ldrb	r3, [r7, #27]
 8000c62:	f103 0301 	add.w	r3, r3, #1
 8000c66:	76fb      	strb	r3, [r7, #27]
 8000c68:	7efb      	ldrb	r3, [r7, #27]
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d9aa      	bls.n	8000bc4 <Task_Create+0x40>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:156
		}

	}
	//after fill the taskblock is time to insert it on the
	//tasklist linked list
	TaskList = &TaskBlockList[NUMBER_OF_TASK]; //first points to the TCB Head
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <Task_Create+0x1e0>)
 8000c70:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:159

	//check if Idle TCB was already initialized:
	if(EMPTY == TaskList->EmptyTCB)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d149      	bne.n	8000d0e <Task_Create+0x18a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:162
	{
		//if not, initialize it.
		TaskList->TaskAction = (taskptr_t *)& Task_Idle; //assign the idle task
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	f240 6325 	movw	r3, #1573	; 0x625
 8000c80:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000c84:	61d3      	str	r3, [r2, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:163
		TaskList->TaskStack  = &IdleTaskStack + 64;			//assign a stack
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	4a37      	ldr	r2, [pc, #220]	; (8000d68 <Task_Create+0x1e4>)
 8000c8a:	619a      	str	r2, [r3, #24]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:164
		TaskList->TaskPriority = LESS_PRIORITY + 1; 	// Idletask has the least priority
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f04f 0220 	mov.w	r2, #32
 8000c92:	735a      	strb	r2, [r3, #13]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:165
		TaskList->TaskName = (os_taskname_t *) &IdleName;//gives name for task
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	f640 7380 	movw	r3, #3968	; 0xf80
 8000c9a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000c9e:	6153      	str	r3, [r2, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:166
		TaskList->TaskID   = NUMBER_OF_TASK + 1;		 //gives an ID for Task
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f04f 0208 	mov.w	r2, #8
 8000ca6:	731a      	strb	r2, [r3, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:167
		TaskList->TaskElapsedTime = 0;                //zero the elapsed time
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:168
		TaskList->TaskTime 		  = OS_TICKS;		  //byDefault the task time slot offset
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb6:	605a      	str	r2, [r3, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:170
													  // is 1 Tick
		TaskList->TaskState   = TASK_READY;			  //task initial state
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	73da      	strb	r2, [r3, #15]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:172

		TaskList->EmptyTCB    =  FILLED;				  //occupies the TCB
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000cc6:	611a      	str	r2, [r3, #16]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:174

		TaskList->NextTask    = &TaskBlockList[LoopCntr]; //aditionally attach the desired task on the linked list
 8000cc8:	7efa      	ldrb	r2, [r7, #27]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000cd0:	189b      	adds	r3, r3, r2
 8000cd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000cd6:	f640 1274 	movw	r2, #2420	; 0x974
 8000cda:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000cde:	189a      	adds	r2, r3, r2
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:176

		TaskList = TaskList->NextTask;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
 8000ce8:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:178

		TaskList->PrevTask = &TaskBlockList[NUMBER_OF_TASK];
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <Task_Create+0x1e0>)
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:180

		TaskList->NextTask = END_LIST; //marks the end of list
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:183

		//Declare that task has never executed
		TaskList->TaskFlags |= TASK_FLAG_IS_FIRST_TIME;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f043 0201 	orr.w	r2, r3, #1
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e025      	b.n	8000d52 <Task_Create+0x1ce>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:191
	else	//else only uses it as a start of the linked list
	{
		while(END_LIST != TaskList->NextTask)
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	e000      	b.n	8000d10 <Task_Create+0x18c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:188
		TaskList->TaskFlags |= TASK_FLAG_IS_FIRST_TIME;

	}
	else	//else only uses it as a start of the linked list
	{
		while(END_LIST != TaskList->NextTask)
 8000d0e:	bf00      	nop
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f6      	bne.n	8000d06 <Task_Create+0x182>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:194
		{
			//goes trhough the linked list:
			TaskList = TaskList->NextTask;
		}
		//when the end of list is found
		TaskList->NextTask = &TaskBlockList[LoopCntr - 1]; //attach the new task in the linked list
 8000d18:	7efb      	ldrb	r3, [r7, #27]
 8000d1a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000d1e:	4613      	mov	r3, r2
 8000d20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d24:	189b      	adds	r3, r3, r2
 8000d26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d2a:	f640 1274 	movw	r2, #2420	; 0x974
 8000d2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d32:	189a      	adds	r2, r3, r2
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:195
		TaskToBeLinked     = TaskList->NextTask;
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:198

		//attach the previous task
		TaskToBeLinked->PrevTask = TaskList;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:201

		//marks the new end of list
		TaskList = TaskList->NextTask;
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	61fb      	str	r3, [r7, #28]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:203

		TaskList->NextTask = END_LIST;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:207

	}

	return(OS_OK);
 8000d52:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:208
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000a8c 	.word	0x20000a8c
 8000d68:	20004874 	.word	0x20004874

08000d6c <Task_GetID>:
Task_GetID():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:298
 	 return:	TODO


 ************************************************************************/
os_taskID_t Task_GetID(os_taskname_t *TaskName, uint8_t NameSize)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:299
	taskTCB_t *TaskList = &TaskBlockList[NUMBER_OF_TASK]; //a pointer to the head of tasklist
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <Task_GetID+0x9c>)
 8000d7a:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:301

	uint8_t LoopCntr = 0;									  //a loop counter
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	74fb      	strb	r3, [r7, #19]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:303

	os_taskname_t *ReferenceName = NULL; 				 //Reference Name
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:306

	//check name size:
	if(NameSize > 32)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b20      	cmp	r3, #32
 8000d8c:	d902      	bls.n	8000d94 <Task_GetID+0x28>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:308
	{
		return(OS_NAME_TOO_LONG);
 8000d8e:	f04f 0305 	mov.w	r3, #5
 8000d92:	e033      	b.n	8000dfc <Task_GetID+0x90>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:312
	}

	//The current TCB is the idle block, well points to next:
	TaskList = TaskList->NextTask;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:315

	//start the loopcounter:
	LoopCntr = 0;
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	74fb      	strb	r3, [r7, #19]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:318

	//receive the poiter to name:
	ReferenceName = TaskList->TaskName;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:325
	//go through the tasklist:
	do
	{

		//compare their names
		while(NameSize >= LoopCntr)
 8000da6:	e01a      	b.n	8000dde <Task_GetID+0x72>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:327
		{
			if(TaskName == ReferenceName)
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10c      	bne.n	8000dca <Task_GetID+0x5e>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:330
			{
				//test the next character
				TaskName++;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f103 0301 	add.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:331
				ReferenceName++;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f103 0301 	add.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:334

				//increments the loop counter:
				LoopCntr++;
 8000dc0:	7cfb      	ldrb	r3, [r7, #19]
 8000dc2:	f103 0301 	add.w	r3, r3, #1
 8000dc6:	74fb      	strb	r3, [r7, #19]
 8000dc8:	e009      	b.n	8000dde <Task_GetID+0x72>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:340

			}
			else
			{
				//well, try the next task
				TaskList = TaskList->NextTask;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	6a1b      	ldr	r3, [r3, #32]
 8000dce:	617b      	str	r3, [r7, #20]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:342
				//restarts the counter:
				LoopCntr = 0;
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	74fb      	strb	r3, [r7, #19]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:344
				//re-initialize the name pointer:
				ReferenceName = TaskList->TaskName;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:347

				//breaks the loop
				break;
 8000ddc:	e003      	b.n	8000de6 <Task_GetID+0x7a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:325
	//go through the tasklist:
	do
	{

		//compare their names
		while(NameSize >= LoopCntr)
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	7cfb      	ldrb	r3, [r7, #19]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d2e0      	bcs.n	8000da8 <Task_GetID+0x3c>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:353
			}

		}

		//check if the compare waas succefull:
		if(0 != LoopCntr)
 8000de6:	7cfb      	ldrb	r3, [r7, #19]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <Task_GetID+0x86>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:356
		{
			//yep, then read the task ID of this TCB and return it:
			return(TaskList->TaskID);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	7b1b      	ldrb	r3, [r3, #12]
 8000df0:	e004      	b.n	8000dfc <Task_GetID+0x90>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:361
		}

		//else restarts a new loop.

	}while(END_LIST != TaskList);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f2      	bne.n	8000dde <Task_GetID+0x72>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:364

	//if the task doesnt exist return a undefined ID
	return(UNDEFINED_ID);
 8000df8:	f04f 0309 	mov.w	r3, #9
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:366

}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f107 071c 	add.w	r7, r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000a8c 	.word	0x20000a8c

08000e0c <Task_Query>:
Task_Query():
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:380
 	 return:	TODO


 ************************************************************************/
taskTCB_t* 	Task_Query(os_taskID_t TaskID)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:381
	taskTCB_t *TaskList = &TaskBlockList[NUMBER_OF_TASK]; 	//a TCB that points to a registered tasklist
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <Task_Query+0x44>)
 8000e18:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:384

	//check for a undefined ID:
	if(UNDEFINED_ID == TaskID)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b09      	cmp	r3, #9
 8000e1e:	d102      	bne.n	8000e26 <Task_Query+0x1a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:386
	{
		return(NULL); //returns a null pointer
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00e      	b.n	8000e44 <Task_Query+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:393

	//the alghoritm i very simple:
	do
	{
		//go trhough tasklist and compares by ID:
		if(TaskID == TaskList->TaskID)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	7b1b      	ldrb	r3, [r3, #12]
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d101      	bne.n	8000e34 <Task_Query+0x28>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:396
		{
			//if the IDs was matched, return this TCB
			return (TaskList);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	e007      	b.n	8000e44 <Task_Query+0x38>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:400
		}

		//if not, go to next task
		TaskList = TaskList->NextTask;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	60fb      	str	r3, [r7, #12]
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:401
	}while(END_LIST != TaskList);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f2      	bne.n	8000e26 <Task_Query+0x1a>
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:404

	//if the ID is not match to any registered task, returns a null pointer
	return(NULL);
 8000e40:	f04f 0300 	mov.w	r3, #0
/Users/felipeneves/Documents/Projects/Embedded/uLipeRTOS/Debug/../RTOS/uLipe_Task.c:405
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	f107 0714 	add.w	r7, r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000a8c 	.word	0x20000a8c

08000e54 <memset>:
memset():
 8000e54:	b4f0      	push	{r4, r5, r6, r7}
 8000e56:	0784      	lsls	r4, r0, #30
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f000 808e 	beq.w	8000f7a <memset+0x126>
 8000e5e:	1e54      	subs	r4, r2, #1
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8088 	beq.w	8000f76 <memset+0x122>
 8000e66:	07e5      	lsls	r5, r4, #31
 8000e68:	b2ce      	uxtb	r6, r1
 8000e6a:	d411      	bmi.n	8000e90 <memset+0x3c>
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	1e67      	subs	r7, r4, #1
 8000e70:	f802 6b01 	strb.w	r6, [r2], #1
 8000e74:	4613      	mov	r3, r2
 8000e76:	4615      	mov	r5, r2
 8000e78:	0792      	lsls	r2, r2, #30
 8000e7a:	d00f      	beq.n	8000e9c <memset+0x48>
 8000e7c:	2c00      	cmp	r4, #0
 8000e7e:	d07a      	beq.n	8000f76 <memset+0x122>
 8000e80:	f803 6b01 	strb.w	r6, [r3], #1
 8000e84:	079a      	lsls	r2, r3, #30
 8000e86:	463c      	mov	r4, r7
 8000e88:	461d      	mov	r5, r3
 8000e8a:	d007      	beq.n	8000e9c <memset+0x48>
 8000e8c:	3c01      	subs	r4, #1
 8000e8e:	e7ed      	b.n	8000e6c <memset+0x18>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f803 6b01 	strb.w	r6, [r3], #1
 8000e96:	079a      	lsls	r2, r3, #30
 8000e98:	461d      	mov	r5, r3
 8000e9a:	d1f7      	bne.n	8000e8c <memset+0x38>
 8000e9c:	2c03      	cmp	r4, #3
 8000e9e:	d952      	bls.n	8000f46 <memset+0xf2>
 8000ea0:	b2ce      	uxtb	r6, r1
 8000ea2:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8000ea6:	2c0f      	cmp	r4, #15
 8000ea8:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8000eac:	d92d      	bls.n	8000f0a <memset+0xb6>
 8000eae:	f1a4 0210 	sub.w	r2, r4, #16
 8000eb2:	4617      	mov	r7, r2
 8000eb4:	2f0f      	cmp	r7, #15
 8000eb6:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000eba:	602b      	str	r3, [r5, #0]
 8000ebc:	606b      	str	r3, [r5, #4]
 8000ebe:	60ab      	str	r3, [r5, #8]
 8000ec0:	60eb      	str	r3, [r5, #12]
 8000ec2:	f105 0210 	add.w	r2, r5, #16
 8000ec6:	d916      	bls.n	8000ef6 <memset+0xa2>
 8000ec8:	b13e      	cbz	r6, 8000eda <memset+0x86>
 8000eca:	3f10      	subs	r7, #16
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	6053      	str	r3, [r2, #4]
 8000ed0:	6093      	str	r3, [r2, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
 8000ed4:	3210      	adds	r2, #16
 8000ed6:	2f0f      	cmp	r7, #15
 8000ed8:	d90d      	bls.n	8000ef6 <memset+0xa2>
 8000eda:	3f20      	subs	r7, #32
 8000edc:	f102 0610 	add.w	r6, r2, #16
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	6053      	str	r3, [r2, #4]
 8000ee4:	6093      	str	r3, [r2, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
 8000ee8:	6113      	str	r3, [r2, #16]
 8000eea:	6153      	str	r3, [r2, #20]
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	61d3      	str	r3, [r2, #28]
 8000ef0:	3220      	adds	r2, #32
 8000ef2:	2f0f      	cmp	r7, #15
 8000ef4:	d8f1      	bhi.n	8000eda <memset+0x86>
 8000ef6:	f1a4 0210 	sub.w	r2, r4, #16
 8000efa:	f022 020f 	bic.w	r2, r2, #15
 8000efe:	f004 040f 	and.w	r4, r4, #15
 8000f02:	3210      	adds	r2, #16
 8000f04:	2c03      	cmp	r4, #3
 8000f06:	4415      	add	r5, r2
 8000f08:	d91d      	bls.n	8000f46 <memset+0xf2>
 8000f0a:	1f27      	subs	r7, r4, #4
 8000f0c:	463e      	mov	r6, r7
 8000f0e:	462a      	mov	r2, r5
 8000f10:	2e03      	cmp	r6, #3
 8000f12:	f842 3b04 	str.w	r3, [r2], #4
 8000f16:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8000f1a:	d90d      	bls.n	8000f38 <memset+0xe4>
 8000f1c:	b127      	cbz	r7, 8000f28 <memset+0xd4>
 8000f1e:	3e04      	subs	r6, #4
 8000f20:	2e03      	cmp	r6, #3
 8000f22:	f842 3b04 	str.w	r3, [r2], #4
 8000f26:	d907      	bls.n	8000f38 <memset+0xe4>
 8000f28:	4617      	mov	r7, r2
 8000f2a:	3e08      	subs	r6, #8
 8000f2c:	f847 3b04 	str.w	r3, [r7], #4
 8000f30:	6053      	str	r3, [r2, #4]
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	2e03      	cmp	r6, #3
 8000f36:	d8f7      	bhi.n	8000f28 <memset+0xd4>
 8000f38:	1f23      	subs	r3, r4, #4
 8000f3a:	f023 0203 	bic.w	r2, r3, #3
 8000f3e:	1d13      	adds	r3, r2, #4
 8000f40:	f004 0403 	and.w	r4, r4, #3
 8000f44:	18ed      	adds	r5, r5, r3
 8000f46:	b1b4      	cbz	r4, 8000f76 <memset+0x122>
 8000f48:	462b      	mov	r3, r5
 8000f4a:	b2c9      	uxtb	r1, r1
 8000f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8000f50:	192c      	adds	r4, r5, r4
 8000f52:	43ed      	mvns	r5, r5
 8000f54:	1962      	adds	r2, r4, r5
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	f002 0501 	and.w	r5, r2, #1
 8000f5c:	d00b      	beq.n	8000f76 <memset+0x122>
 8000f5e:	b11d      	cbz	r5, 8000f68 <memset+0x114>
 8000f60:	f803 1b01 	strb.w	r1, [r3], #1
 8000f64:	42a3      	cmp	r3, r4
 8000f66:	d006      	beq.n	8000f76 <memset+0x122>
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f802 1b01 	strb.w	r1, [r2], #1
 8000f6e:	7059      	strb	r1, [r3, #1]
 8000f70:	1c53      	adds	r3, r2, #1
 8000f72:	42a3      	cmp	r3, r4
 8000f74:	d1f8      	bne.n	8000f68 <memset+0x114>
 8000f76:	bcf0      	pop	{r4, r5, r6, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	4614      	mov	r4, r2
 8000f7e:	e78d      	b.n	8000e9c <memset+0x48>

08000f80 <IdleName>:
 8000f80:	6154 6b73 6449 656c                         TaskIdle
